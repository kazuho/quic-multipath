{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2023-03-07T00:55:16.230477+00:00",
  "repo": "quicwg/multipath",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "9F9014"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "has PR",
      "description": "",
      "color": "37F263"
    },
    {
      "name": "separate draft",
      "description": "",
      "color": "5A8582"
    },
    {
      "name": "editorial",
      "description": "",
      "color": "CAC593"
    },
    {
      "name": "design",
      "description": "",
      "color": "F3B663"
    },
    {
      "name": "needs-discussion",
      "description": "",
      "color": "F1217E"
    },
    {
      "name": "no-action-needed",
      "description": "",
      "color": "439B49"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOGNtpaM49OGUy",
      "title": "More illustration figures on different types of path identifiers?",
      "url": "https://github.com/quicwg/multipath/issues/1",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "There is one part I am afraid people might feel a little bit hard to follow: the three types of path identifiers in the PATH_STATUS frame. Those three types of path identifiers were introduced in order to be compatible with zero-length CID use cases, so I think we might need two additional example figures (like figure 3 in the current draft), one for (non-zero length CID, zero-length CID) and the other one for (zero-length CID & zero-length CID). Do you think that is a good idea? I can work on those figures if it doesn't complicate the flow of the draft.",
      "createdAt": "2021-10-15T05:54:13Z",
      "updatedAt": "2022-03-07T09:59:33Z",
      "closedAt": "2022-03-07T09:59:33Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This might be indeed useful in the \"Example\" section.",
          "createdAt": "2021-10-15T09:37:13Z",
          "updatedAt": "2021-10-15T09:37:13Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, please create a PR!",
          "createdAt": "2021-10-15T19:55:43Z",
          "updatedAt": "2021-10-15T19:55:43Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@huitema I am editing the path closing figures with zero-length CID and single PN. Is it similar to what you have in mind?\r\n\r\n~~~\r\n  Client                                                      Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=1, path_id=2]->\r\n                             (server tells client to abandon a path)\r\n                <-1-RTT[Y]: PATH_ABANDON[path_id_type=0, path_id=2],\r\n                                                 ACK_MP[Seq=0, PN=X]\r\n  (client abandons the path that it is using)\r\n  1-RTT[X+1]: DCID=S3 RETIRE_CONNECTION_ID[2],\r\n                            ACK_MP[Seq=0, PN=Y]->\r\n                                 <-1-RTT[Y+1]: ACK_MP[Seq=0, PN=X+1]\r\n  (client waits for idle timeout to release resources)\r\n\r\n~~~\r\n{: #fig-example-path-close2 title=\"Example of closing a path when the server chooses to use zero-length CID\"}\r\n\r\n~~~\r\n  Client                                                     Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=2]->\r\n                            (server tells client to abandon a path)\r\n                          <-1-RTT[Y]: PATH_ABANDON[path_id_type=2],\r\n                                                ACK_MP[Seq=0, PN=X]\r\n  1-RTT[X+1]: ACK_MP[Seq=0, PN=Y]->\r\n  (client waits for idle timeout to release resources)\r\n               (server waits for idle timeout to release resources)\r\n\r\n~~~\r\n{: #fig-example-path-close3 title=\"Example of closing a path when the both client and server choose to use zero-length CIDs.\"}",
          "createdAt": "2021-10-17T01:46:28Z",
          "updatedAt": "2021-10-17T01:46:28Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In the case of single number space, we use ACK, not ACK_MP.  But in fact you do not need to draw the ACKs there, there is no special processing of ACKs required. Also, there is no need to wait for an idle timeout, which typically is 10 to 30 seconds. That's too large. \r\n\r\nDo we really need to send \"abandon path\" in both directions? If I think about it, the real concern is that client will send a PATH_ABANDON message, but some time later, due to differences in delay, etc., the server receive data on the same four tuples.\r\nHow does the server know whether it should create a new path or not?\r\n\r\nIn the single space case, the logical test may be to check the sequence numbers of the packet. If the sequence number of the new packet is greater than that of the path_abandon, then the client is reactivating a path that was abandoned previously. Maybe the client connected again to the same network, after some disconnected interval. The server can start sending on the reactivated path. If the packet number is lower than that of the path abandon, then the server should not reactivate the path.\r\n\r\nIn the multiple space case, if the CID is defined, there is no ambiguity.",
          "createdAt": "2021-10-17T02:28:23Z",
          "updatedAt": "2021-10-17T02:28:23Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> In the case of single number space, we use ACK, not ACK_MP. But in fact you do not need to draw the ACKs there, there is no special processing of ACKs required. Also, there is no need to wait for an idle timeout, which typically is 10 to 30 seconds. That's too large.\r\n\r\nACK works for me. I think we might also want to add a sentence in the Sec. of \"one packet number space\" explicitly specifying that \"for single PN, use ACK instead of ACK_MP\", and change some texts in the ACK_MP frame section that is related to zero-length CID (the current draft says \"if the endpoint receives 1-RTT packets with 0-length Connection ID, it SHOULD use Packet Number Space Identifier 0 in ACK_MP frames\". ).\r\n\r\n> \r\n> Do we really need to send \"abandon path\" in both directions? If I think about it, the real concern is that client will send a PATH_ABANDON message, but some time later, due to differences in delay, etc., the server receive data on the same four tuples. How does the server know whether it should create a new path or not?\r\n\r\nI think in single PN, sending \"abandon path\" in both directions is helpful. When the client sends \"PATH_ABANDON\", it promises not to send non-probing packets in the current activity cycle. It could send probing packets to reactivate the path a moment later if the client thinks the network environment has changed. After sending out \"PATH_ABANDON\", the client should still be able to receive packets from the server for a while on that path because there may be the server's inflight packets on that path. It was not until the client sees the server's \"PATH_ABANDON\", the client then knows that no more server's data is to be expected except for some out-of-order packets. So after receiving \"PATH_ABANDON\", the endpoint can start preparing to free memories and clear path stats allocated for that path. The time interval from seeing \"PATH_ABANDON\" to actually releasing relevant resources is going to be an important parameter, and yes, 10-30 seconds is too long. What would be a more appropriate number for this interval? \r\n\r\n> \r\n> In the single space case, the logical test may be to check the sequence numbers of the packet. If the sequence number of the new packet is greater than that of the path_abandon, then the client is reactivating a path that was abandoned previously. Maybe the client connected again to the same network, after some disconnected interval. The server can start sending on the reactivated path. If the packet number is lower than that of the path abandon, then the server should not reactivate the path.\r\n\r\nDoes it imply that we need to track the packet number of the PATH_ABANDON for a path that is closed? When a path is in a closed state, the server may reject any newly received packets unless it is a probing packet (back to our path initialization process). In this way, it should be OK to forget any info related to that path in the last activity cycle.\r\n\r\n> \r\n> In the multiple space case, if the CID is defined, there is no ambiguity.\r\n\r\n",
          "createdAt": "2021-10-17T04:46:07Z",
          "updatedAt": "2021-10-17T04:46:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In most similar situations, RFC 9000 uses a delay of 3xRTO.\r\n\r\nNote that in the \"simple\" case, the client can receive packets from the server on any tuple. There are no resource allocated per path for receiving packets. There will be local resource allocated for sending packets, congestion context for example. But not on for receiving: all packets can be decrypted and processed. If the client knows that it will not send, it can discard the resource allocated for sending without risking a side effect.",
          "createdAt": "2021-10-17T05:46:07Z",
          "updatedAt": "2021-10-17T05:46:07Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I changed the timeout to 3RTO. As the problem is similar to FIN-ACK&FIN-ACK when TCP closes, I kept the ACK in the graph (because the path_id_type=2 refers to the path where the packet is traveling, we want to make sure it is acked before we close the path.). Regarding the resource, I think if we keep a unified receive record, which is not per-path, yes, we can discard the sending resources. But if we have some path stats (e.g. how many packets received in total in this current activity cycle), we need to keep these data structures until we are sure that the peer is not going to send more packets on that path. Indeed, it depends on the implementation, but I feel it is generally helpful to have PATH_ABANDON sent in both directions. What do you think?\r\n\r\n~~~\r\n  Client                                                      Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=1, path_id=2]->\r\n                             (server tells client to abandon a path)\r\n                <-1-RTT[Y]: PATH_ABANDON[path_id_type=0, path_id=2],\r\n                                                           ACK[PN=X]\r\n  (client abandons the path that it is using\r\n  and waits for 3*RTO to close the path)\r\n  1-RTT[X+1]: DCID=S3 RETIRE_CONNECTION_ID[2],\r\n                                     ACK[PN=Y]->\r\n                                            (server closes the path)\r\n\r\n~~~\r\n{: #fig-example-path-close2 title=\"Example of closing a path when the server chooses to use zero-length CID\"}\r\n\r\n~~~\r\n  Client                                                     Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=2]->\r\n                            (server tells client to abandon a path)\r\n                          <-1-RTT[Y]: PATH_ABANDON[path_id_type=2],\r\n                                                          ACK[PN=X]\r\n  (client waits for 3*RTO to close the path)\r\n  1-RTT[X+1]: ACK[PN=Y]->\r\n                         (server waits for 3*RTO to close the path)\r\n\r\n~~~\r\n{: #fig-example-path-close3 title=\"Example of closing a path when both client and server choose to use zero-length CIDs.\"}",
          "createdAt": "2021-10-18T01:51:53Z",
          "updatedAt": "2021-10-18T01:51:53Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I submitted PR #28 . Let's first have sth that we can start modifying.",
          "createdAt": "2021-10-21T05:53:51Z",
          "updatedAt": "2021-10-21T05:53:51Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "addressed by PR #104",
          "createdAt": "2022-03-07T09:59:33Z",
          "updatedAt": "2022-03-07T09:59:33Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOGNtpaM49OM7s",
      "title": "idle timeout issues",
      "url": "https://github.com/quicwg/multipath/issues/2",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current draft says \"_Servers SHOULD stop sending traffic on paths through which non-probing packet was received in the last 3 path RTTs, but MAY ignore that rule if it would disqualify all available paths_\". First, I believe there is a typo, where the \"non-probing packet\" should be \"**no** non-probing packet\". Second, 3 RTT is too short for our applications and we prefer a longer timeout. Maybe we want to add a new parameter (e.g. max_path_idle_timeout) to allow the server and client to negotiate?",
      "createdAt": "2021-10-15T06:47:33Z",
      "updatedAt": "2021-10-21T14:43:08Z",
      "closedAt": "2021-10-21T14:43:08Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I fixed the missing no.\r\n\r\nI took this text from Christian's draft. So maybe he can comment. @huitema ?",
          "createdAt": "2021-10-15T07:48:32Z",
          "updatedAt": "2021-10-15T07:48:32Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would suggest to leave the path closing problem for further work and indicate that the next version of the draft will define how a path can be closed by one of the endpoints. ",
          "createdAt": "2021-10-15T12:19:41Z",
          "updatedAt": "2021-10-15T12:19:41Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are two issues, path closing and packet scheduling.\r\n\r\nFor path closing, the simplest solution is to use an idle timer, either the idle timer negotiated for the connection or a new parameter negotiated as part of multipath setup.\r\n\r\nFor packet scheduling, the first rule is to not send data on paths that do not work, e.g., lots of packet losses, or maybe absence of ACK. This is basically the same issue as determining whether a connection is broken, just applied to a path. But that is not entirely sufficient, because the server needs to also infer whether the client still wants to use that path.\r\n\r\nThe monitoring of non probing packets is just an heuristic. The server observes that if the client is not using the path, and deduces that it should not be using it itself. That's not a bad heuristic, but it requires the client to send some kinds of \"keep alive\" if it wants the server to continue using a path. We may debate how often that should happen. Maybe reuse the same timeout as for jettisoning paths.\r\n\r\nAnother solution may be for the client to tell something like \"please don't use that path anymore\", but that requires adding a new frame as part of the core multipath specification. In draft-liu, this was done with a specialization of the \"path status\", setting the status to \"Abandon\". Maybe we should just use a simplified for of the PATH_STATUS, leaving out the complexities of managing priorities for the advanced scheduling drafts:\r\n```\r\nABANDON_PATH Frame {\r\n  Type (i) = TBD,\r\n  Path_identifier (i),\r\n  Error Code (i),\r\n  Reason Phrase Length (i),\r\n  Reason Phrase (..),\r\n}\r\n```\r\n\r\n",
          "createdAt": "2021-10-15T16:03:51Z",
          "updatedAt": "2021-10-15T16:04:41Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I prefer the second approach that Christian proposed, i.e., sending explicit signals like \"abandon\". But there is an issue with path id type 0x02 in the current draft, which refers to the path over which the control frame is sent or received. The current draft says \" If both endpoints are using 0-length Connection IDs on that path, endpoints SHOULD only use type 0x02 for path identifier\", so in this case, if a path is broken, we cannot send an explicit \"abandon\" signal for that path thru other paths, and we have to rely on implicit signals like an idle timeout. That means we may still want to negotiate the idle timer?",
          "createdAt": "2021-10-15T19:23:21Z",
          "updatedAt": "2021-10-15T19:23:21Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The client can always force the issue by dropping all packets received on an old path. They will not be acknowledged, and the server will automatically deduce that the path does not work. Of course, that is ugly...",
          "createdAt": "2021-10-15T20:09:35Z",
          "updatedAt": "2021-10-15T20:09:35Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that the \"Abandon Path\" would be a replacement or a simplification of the \"Path Status\" frame in the current draft. In my code, I only use the \"Abandon\" variant of the Path Status. I wonder whether we need alternative statuses like \"standby\", and whether we should define priorities here, rather than in a separate draft for advanced scheduling.",
          "createdAt": "2021-10-15T20:20:18Z",
          "updatedAt": "2021-10-15T20:20:18Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I agree. We should put the alternative statuses and priority in a separate draft on advanced scheduling. ",
          "createdAt": "2021-10-15T22:35:38Z",
          "updatedAt": "2021-10-15T22:35:38Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I submitted PR #19  on this issue.",
          "createdAt": "2021-10-15T22:41:04Z",
          "updatedAt": "2021-10-15T22:44:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR was merged.",
          "createdAt": "2021-10-21T14:43:08Z",
          "updatedAt": "2021-10-21T14:43:08Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOGNtpaM49ONTu",
      "title": "Section 3.2. Path Initiation",
      "url": "https://github.com/quicwg/multipath/issues/3",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We need some description for how to init new paths in this section.",
      "createdAt": "2021-10-15T06:50:23Z",
      "updatedAt": "2021-10-15T12:04:19Z",
      "closedAt": "2021-10-15T12:04:19Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To me path validation and path initiation are very coupled together. In #7 I merged both sections together.",
          "createdAt": "2021-10-15T09:39:04Z",
          "updatedAt": "2021-10-15T09:39:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "That's probably fine. I was keeping this as a placeholder in case we need anything in addition but probably not.",
          "createdAt": "2021-10-15T10:15:20Z",
          "updatedAt": "2021-10-15T10:22:24Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's ok.",
          "createdAt": "2021-10-15T12:04:19Z",
          "updatedAt": "2021-10-15T12:04:19Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOGNtpaM49OYC9",
      "title": "One packet number space as mandatory to implement?",
      "url": "https://github.com/quicwg/multipath/issues/4",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I took the following text from draft-liu:\r\n\r\n`Note: Even if use of multiple packet number spaces is negotiated but a peer uses an zero length connection ID, then all packets sent to that peer MUST be numbered in a single number space (as specified in the previous section), because the packet level decryption implementation will only see one Connection ID sequence number (the default number 0).`\r\n\r\nThis basically makes the one packet number handling mandatory to implement as you also need it if multiple packet number spaces were negotiated but zero length CID is used.\r\n\r\nThe alternative would be to say that you can't used zero length CID if multiple packet number spaces are negotiated.\r\n\r\nAlso I'm currently proposing  enable_multipath=1 for multiple number space and enable_multipath=2 for one number space to be compatible with the draft-liu and the alibaba implementation. However if we think one packet number space is mandatory to implement, it would make more sense to have it the other way around and allow fallback to one packet number space, namely if the client ask for two packet number spaces but the server supports only one but would also lead to a successful negotiation.\r\n\r\nWhat do people think about this?",
      "createdAt": "2021-10-15T07:54:04Z",
      "updatedAt": "2021-10-25T08:48:34Z",
      "closedAt": "2021-10-25T08:48:34Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As long as inter-op is allowed, I think it might be better to keep both PN space choices optional (Mirja's proposal of using enable_multipath=1 or 2 works for me). The first thing is to allow people more freedom. If some implementors only want to use one option, they just need to implement one code branch.  Second, single packet number space requires the modification of loss detection algorithm, the way how rtt is sampled (the overall largest ack may not be the largest acked packet on a given path), and some delayed ACK strategies, which might take additional effort. People may also want to avoid round-robin scheduling in single PN as it creates a lot of holes in the ack range, so certain things regarding performance get coupled. Christian introduced many good practices and we are currently learning from it, so we probably need more experience on that.  ",
          "createdAt": "2021-10-15T10:11:07Z",
          "updatedAt": "2021-10-15T10:11:07Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Adding the option to negotiate is a very good solution at this point. It would be helpful to hear more people's implementation experience. To avoid failure for interop tests, I suggest that we could negotiate the transport parameter like this: use 2-bits in the value field for negotiating one or more PN spaces.\r\n\r\n- 0x0: don't support multi-path\r\n- 0x1: only support multiple PN spaces for multi-path\r\n- 0x2: only support one PN space for multi-path\r\n- 0x3: support both one PN space and multiple PN space \r\n\r\nThe client could send all these 4 values in the enable_multipath transport parameter which depends on what kind of modes it supports. If the server just support one mode(such as one PN space), it could return 0x2 so that the client knows how to do next. If the server support both, it could choose 0x1 or 0x2 as it prefers, and make sure that the server don't return 0x3 as it need to decide which mode to choose. In 0x2 mode, the endpoints must not use 0-length CID.\r\n\r\nThen for people who just want one PN space, it would be ok to just support 0x2 mode. For the other guys who don't use 0-length Connection ID and want to get less overhead for ack ranges, they could choose to use 0x1 mode. And for people who want to support both 0-length CID and multiple PN spaces, they could choose 0x3 and of course it will add more modification in the implementation.\r\nMaybe this could meet everyone's need for experiments. \r\n\r\n",
          "createdAt": "2021-10-15T13:35:08Z",
          "updatedAt": "2021-10-15T13:35:08Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema any views?",
          "createdAt": "2021-10-15T19:55:22Z",
          "updatedAt": "2021-10-15T19:55:22Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with Yanmei's proposal of 4 options 0, 1, 2 or 3, although I have a slight preference for \"the other way around\":\r\n\r\nClient Option | Definition | Allowed server responses\r\n---------------|-------------|-----------------------------\r\n0x0 | don't support multi-path | 0x0\r\n0x1 | only support one PN space for multi-path | 0x0 or 0x1\r\n0x2 | only support multiple PN spaces for multi-path | 0x0 or 0x2\r\n0x3 | support both one PN space and multiple PN space | 0x0, 0x1 or 0x2\r\n\r\nReceiving an unexpected value from the server should be a protocol violation. If the transport parameter is not present, the value defaults to zero.\r\n",
          "createdAt": "2021-10-15T20:05:29Z",
          "updatedAt": "2021-10-15T20:06:08Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agree with Christian's design for value definitions.\r\nSubmitted PR #20 for this issue.",
          "createdAt": "2021-10-16T10:59:39Z",
          "updatedAt": "2021-10-16T10:59:39Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As #20 got merged, I think this is now resolved.",
          "createdAt": "2021-10-18T09:30:20Z",
          "updatedAt": "2021-10-18T09:30:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually I think this is not fully resolved. The initial question was about use of multiple packet number spaces and zero length connection ID.\r\n\r\nDo we now say that if multiple packet number spaces are used, zero connection ID cannot be used? If yes, that means we need to remove the text I've cited in the initial issue description from the draft. And also add some text that \"zero-length CID MUST not be used with enable_multipath=2\".\r\n\r\nOr if we want to keep that option that basically means that you need to always implement also singe packet number handling even if use of multiple packet number spaces is negotiated, and then we should say that more explicitly in the negotiation section.\r\n\r\nTo me it's not fully clear which option you have agreed to now...?",
          "createdAt": "2021-10-18T12:16:56Z",
          "updatedAt": "2021-10-18T12:16:56Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I opened #43 to track the remaining point.",
          "createdAt": "2021-10-25T08:48:34Z",
          "updatedAt": "2021-10-25T08:48:34Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOGNtpaM49OZub",
      "title": "SHOULD vs MUST for check available CIDs",
      "url": "https://github.com/quicwg/multipath/issues/5",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I copied this sentence from draft-liu:\r\n\r\n`Before an endpoint adds a new path, it SHOULD check whether there is at least one unused available Connection ID for each side.`\r\n\r\nShouldn't this be a MUST instead of a SHOULD? ",
      "createdAt": "2021-10-15T08:01:32Z",
      "updatedAt": "2021-10-15T19:58:51Z",
      "closedAt": "2021-10-15T19:58:51Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We can describe it in a more accurate way:\r\n- Before an endpoint adds a new path, it MUST check whether there is at lease one unused available Connection ID for each side, unless the endpoints use zero-length Connection ID.\r\n",
          "createdAt": "2021-10-15T08:53:28Z",
          "updatedAt": "2021-10-15T08:53:28Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Submitted PR #6 for this issue.",
          "createdAt": "2021-10-15T09:00:00Z",
          "updatedAt": "2021-10-15T09:00:00Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOGNtpaM49Ou03",
      "title": "ACK_MP and single packet number space",
      "url": "https://github.com/quicwg/multipath/issues/8",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When negotiating the use of a single packet number space, it is not clear whether the use of ACK_MP frame is acceptable or not. Should we only stick to ACK frames and consider reception of ACK_MP frames to be MP_PROTOCOL_VIOLATION error? Or should we tolerate their reception if the packet number space identifier is 0?",
      "createdAt": "2021-10-15T09:46:01Z",
      "updatedAt": "2021-10-18T17:26:24Z",
      "closedAt": "2021-10-18T17:26:24Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah good point. I moved the text about ACK_MP this morning because I assumed that you would only implement this frame if you use multiple packet number spaces. If that's the case receiving an ACK_MP with enable_multipath=2 should be a PROTOCOL_VIOLATION and we should specify that.",
          "createdAt": "2021-10-15T10:18:47Z",
          "updatedAt": "2021-10-15T10:18:47Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOGNtpaM49OvMs",
      "title": "ACK_MP acknowledging unknown packet number spaces",
      "url": "https://github.com/quicwg/multipath/issues/9",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Should we trigger an connection closure with a MP_CONNECTION_ERROR in the case an endpoint receives an ACK_MP frame acknowledging packets on a non-existing packet number space ID?",
      "createdAt": "2021-10-15T09:47:58Z",
      "updatedAt": "2021-10-15T12:01:15Z",
      "closedAt": "2021-10-15T12:01:15Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes. I just submitted PR #11 for this issue.",
          "createdAt": "2021-10-15T10:14:52Z",
          "updatedAt": "2021-10-15T10:14:52Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR #11 merged.",
          "createdAt": "2021-10-15T12:01:15Z",
          "updatedAt": "2021-10-15T12:01:15Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOGNtpaM49Ov4l",
      "title": "States of paths",
      "url": "https://github.com/quicwg/multipath/issues/10",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "Given that paths are initiating/validating/active/closed, it looks like we will need at some point to specify some path state (finite state machine?) and what behavior is acceptable in each of them (e.g., we cannot send packets on a closed state,...).",
      "createdAt": "2021-10-15T09:51:35Z",
      "updatedAt": "2021-10-25T12:23:20Z",
      "closedAt": "2021-10-25T12:23:20Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can you create a PR?",
          "createdAt": "2021-10-15T19:54:40Z",
          "updatedAt": "2021-10-15T19:54:40Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOGNtpaM49PUmd",
      "title": "Nonce example error?",
      "url": "https://github.com/quicwg/multipath/issues/12",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The draft states that\r\n\r\n> For example, assuming the IV value is 6b26114b9cba2b63a9e8dd4f, the connection ID sequence number is 3, and the packet number is aead, the nonce will be set to 6b2611489cba2b63a9a873e2.\r\n\r\nShouldn't be the result 6b2611489cba2b63a9**e**873e2 instead of 6b2611489cba2b63a9**a**873e2?",
      "createdAt": "2021-10-15T13:09:13Z",
      "updatedAt": "2021-10-15T15:16:39Z",
      "closedAt": "2021-10-15T15:16:39Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I submitted PR #13 for this issue.",
          "createdAt": "2021-10-15T14:34:15Z",
          "updatedAt": "2021-10-15T14:34:15Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOGNtpaM49QnO1",
      "title": "add MP_CONNECTION_ERROR to IANA section",
      "url": "https://github.com/quicwg/multipath/issues/15",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "If we want an MP specific error type we need to also add this to the IANA section.",
      "createdAt": "2021-10-15T19:58:26Z",
      "updatedAt": "2021-10-18T07:32:20Z",
      "closedAt": "2021-10-18T07:32:20Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Submitted PR #21 for this issue.\r\nI just added MP_PROTOCOL_VIOLATION for connection close. If we have more specific error codes in the future, we can add them in the table.",
          "createdAt": "2021-10-16T11:48:17Z",
          "updatedAt": "2021-10-18T04:44:15Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOGNtpaM49RAU3",
      "title": "Timer computation issues not specific to single space",
      "url": "https://github.com/quicwg/multipath/issues/18",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "The text about computation of RTT was copied from the \"simple option\" draft to section 6.2.2. Computing Path RTT, but the issues around RTT computation are common to both single number space and multiple number spaces. Maybe move that text to a new section 6.5?",
      "createdAt": "2021-10-15T22:38:57Z",
      "updatedAt": "2021-10-25T10:16:55Z",
      "closedAt": "2021-10-25T10:16:55Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree. The text applies to both situations.",
          "createdAt": "2021-10-16T22:50:00Z",
          "updatedAt": "2021-10-16T22:50:00Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOGNtpaM49UY5P",
      "title": "Are we sure we really don't need stand-by?",
      "url": "https://github.com/quicwg/multipath/issues/22",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR",
        "design",
        "needs-discussion"
      ],
      "body": "I believe stand-by (or backup) has been useful in MPTCP. This is not really about scheduling because all it says is: I won't use this path actively(yet)  but please leave it open.",
      "createdAt": "2021-10-18T07:56:55Z",
      "updatedAt": "2022-07-11T12:19:39Z",
      "closedAt": "2022-07-11T12:19:39Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IMHO, this is a (simple) form of path prioritization. I'm not sure it should be part of the current. We could delegate this point to an \"advanced\" path management draft.",
          "createdAt": "2021-10-18T09:34:28Z",
          "updatedAt": "2021-10-18T09:34:28Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that this should not be in the core. Let's start by assuming that all established paths can be used. We will then be able to add mechanisms to indicate that some existing paths should not currently be used. In MPTCP we only had limit messages to do this. In QUIC, we will have more flexibility in the definition of frames to encode such information if needed.\r\n",
          "createdAt": "2021-10-19T09:33:04Z",
          "updatedAt": "2021-10-19T09:33:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, actually there might be two different signals here: One is \"please do not use this path as long as you have others\" but the other is \"please keep this path open even if I don't use it\". I agree we don't need the first one but I thought the second one might be useful because otherwise if no packets are received on a path the other end might assume the path to be closed after an idle time, no?",
          "createdAt": "2021-10-19T09:40:09Z",
          "updatedAt": "2021-10-19T09:40:09Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One problem is NAT timeout when we want to keep a path open but do not send any traffic. To solve this, we may want to send \"ping\" at a very low frequency to keep that path alive. Suppose if we don't have a stand-by state (which I think we should have eventually), but we do employ this ping mechanism to keep that path alive, does it solve Mirja's problem as now the other end won't close that path because it receives some \"ping\"s at a very low frequency?",
          "createdAt": "2021-10-19T20:57:48Z",
          "updatedAt": "2021-10-19T20:57:48Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I indeed think that we should have some mechanism (like sending a PING frame) to avoid some \"path idle timeout\".",
          "createdAt": "2021-10-20T07:54:55Z",
          "updatedAt": "2021-10-20T07:54:55Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we need any more text in the draft or can we just close this issue?",
          "createdAt": "2022-01-11T12:30:36Z",
          "updatedAt": "2022-01-11T12:30:36Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The current text in Section 3.2.3 (\"To avoid idle timeout of a path, endpoints can send ack-eliciting packets such as packets containing PING frames Section 19.2 of [QUIC-TRANSPORT] on that path to keep it alive. Sending periodic PING frames also helps prevent middlebox timeout, as discussed in Section 10.1.2 of [QUIC-TRANSPORT].\") is fine for me.",
          "createdAt": "2022-01-11T15:07:19Z",
          "updatedAt": "2022-01-11T15:07:19Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is still much more expensive than MPTCP's backup subflows since we send a PING frame every N rtts, with N being close to 3.\r\n",
          "createdAt": "2022-01-11T15:51:49Z",
          "updatedAt": "2022-01-11T15:51:49Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't see many QUIC applications relying on keep-alive. For example, when studying DNS over QUIC, we concluded that it was much easier to use resumption and 0-RTT than to try to keep the paths open through NAT. I also think the issue is asymmetric:\r\n\r\n* Servers have no good way to know that a path that has been idle for some time is still valid. The client might have moved, or the NAT binding might have changed. If servers send traffic on an idle path, there is a high risk that the traffic will be lost. The default should be, \"silent close on idle\".\r\n\r\n* Clients typically do not have such limitations, because their traffic will force a new NAT binding if one is missing.\r\n\r\nThere are mitigating strategies, such as only sending redundant traffic on suspect paths, but we probably don't need to discuss that here.",
          "createdAt": "2022-01-11T21:25:28Z",
          "updatedAt": "2022-01-11T21:25:28Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "QUIC applications rely less on keep-alive (as you have 0-RTT resumption), however, I think the situation is different for multipath. If you have multiple paths available, you might still decide to only send data on one path at a time, e.g. you want to have a hot stand-by, meaning you already open a new path but didn't decide to use it yet, or want to be able to switch back to an \"old\" path anytime.",
          "createdAt": "2022-01-12T09:23:52Z",
          "updatedAt": "2022-01-12T09:23:52Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we need further text here or can we close this issue?",
          "createdAt": "2022-03-03T13:39:36Z",
          "updatedAt": "2022-03-03T13:39:36Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually thinking about this further I still think we should have at least one signal  to tell the other end that a path should not be used.\r\n\r\nThis is the typical handover case: a client opens both a wifi and a cellular path, also sends keep-alive on the cellular path to make sure one can switch over quickly. However, when it requests data from the server, the server doesn't know which path to use or that it should actually not use one of path as it is more costly. Therefore I think we need a signal to tell the _other end_ that a path should not actively be used for sending data (as long as another path is still available).",
          "createdAt": "2022-03-05T14:34:30Z",
          "updatedAt": "2022-03-05T14:34:30Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak  I agree that having a signal for stand-by is beneficial. Actually, we did have the standy-by signal with the PATH_STATUS frame in draft-liu. The PATH_STATUS frame signals three status: (1) abandon, (2) stand-by, and (3) available. \r\n     PATH_STATUS Frame {\r\n       Type (i) = TBD-03 (experiments use 0xbaba03),\r\n       Path Identifier (..),\r\n       Path Status sequence number (i),\r\n       Path Status (i),\r\n       Path Priority (i),\r\n     }\r\nWhen the three drafts were merged, the PATH_STATUS frame was replaced by the current PATH_ABANDON frame, as at that time we wanted the first version to focus on the very basic features. I think we can put the stand-by status back if it proves to be a general requirement.",
          "createdAt": "2022-03-06T07:45:39Z",
          "updatedAt": "2022-03-06T07:45:39Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The stand-by status in draft-liu is used to explicitly inform the sender not to schedule packets on this path, but endpoints can keep the path context not to be removed. Once the endpoints need to use this path again, they can send PATH_STATUS(active) to update the status, and send packets on the path immediately without path validation and other preparation for this path.\r\n\r\nWe can discuss about whether if we need to add the mechanism into the working group version.",
          "createdAt": "2022-03-10T05:53:54Z",
          "updatedAt": "2022-03-10T05:53:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "At IETF-113 there was general support for this idea. Next step: write PR",
          "createdAt": "2022-03-23T14:38:59Z",
          "updatedAt": "2022-03-23T14:38:59Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The PATH_STATUS frame as described in PR#117 is a rather generic way to update path information. Actually not sure if we need this at this point. I was assuming that indicating a path to be a stand-by or back-up path is a rather static information. E.g. if your mobile link is more expensive, this is static and will not change over the life time of the path. As such another option would be to signal this information during path initiation, e.g. creating an MP_PATH_CHALLANGE frame that contains a flag.",
          "createdAt": "2022-04-06T10:07:53Z",
          "updatedAt": "2022-04-06T10:07:53Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is generally preferred to defined composable frames, rather than create a special purpose version of an existing frame. I would combine Status & Challenge in a single message rather than modifying challenge. But we have to understand what happens if a challenge is lost, repeated, etc.\r\n\r\nI am also not sure that the 'status' is \"once and forever\". I could see the status evolving over time, and alternating between standby and available. But we need to add a bit to the specification. In particular:\r\n\r\n* is there a default status when no status frame have been received on a path?\r\n* does the status change if the peer starts sending non-probing frames on the path?\r\n* can both client and server change the status of a path?\r\n* do frames affect both directions of a path?",
          "createdAt": "2022-04-07T00:47:04Z",
          "updatedAt": "2022-04-07T00:47:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "> is there a default status when no status frame have been received on a path?\r\n\r\nYes, available. However, I wouldn't really call this a default status, because this info is a signal to the other end in order to give a recommendation if that should be sent on this path or not, but the fine sending decision is a local decision. If this info is not available, the sender has to base its decision on other (local known) criteria. \r\n\r\n> does the status change if the peer starts sending non-probing frames on the path?\r\n\r\nNo.\r\n\r\n> can both client and server change the status of a path?\r\n\r\nYes and no. The status tells the other end if or if not it should send data on the path. So effectively it impacts only one direction of the path as the other direction is a local decision.\r\n\r\n> do frames affect both directions of a path?\r\n\r\nNo. As I just said. This is a recommendation for the sender, however, if the sender follows that recommendation is effectively also a local decision.\r\n\r\nAgain, I think we should at this point really just focus on the standby function and not make this too generic because that makes is more complicated.",
          "createdAt": "2022-04-07T08:33:19Z",
          "updatedAt": "2022-04-07T08:33:19Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak the current default status is \"standby until the client has sent non probing frames, available after that\" -- per RFC 9000. I would think that the client sending a status frame overrides that, since \"status\" is not \"probing\", but it is probably worth specifying.\r\n\r\nSimilarly, I do agree with the \"unilateral\" view of status that you are presenting, \"just tell the other end whether to send on that path of not.\" But it is worth specifying.",
          "createdAt": "2022-04-07T19:55:07Z",
          "updatedAt": "2022-04-07T19:55:07Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, if we agree that we want a separate PATH_STATUS frame then I think PR #117 is ready to merge. @huitema and @qdeconinck can you review and approve PR #117 ? Thanks!",
          "createdAt": "2022-07-06T13:58:11Z",
          "updatedAt": "2022-07-06T13:58:11Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOGNtpaM49WqUt",
      "title": "Take Hardware Offloads into Account",
      "url": "https://github.com/quicwg/multipath/issues/25",
      "state": "OPEN",
      "author": "nibanks",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "While discussing single packet space vs multi packet space designs, @martinduke brought up the topic of hardware offloading. The effect of any design changes on packet encryption/decryption should take HW offloads into account. As I understand it, single packet space would not modify the packet encryption/decryption logic, but the multi packet space design would because of the difference nonce length. Additionally, since multi-path would be a negotiated feature/extension, that would mean all connections that don't negotiate the feature would have the \"old\" model/logic, where as the connections that do would have the new encryption/decryption logic. IMO, this could significantly complicated HW offloads.",
      "createdAt": "2021-10-18T16:38:38Z",
      "updatedAt": "2022-11-11T14:17:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "A few disconnected points on this subject:\r\n- based on my (limited) engagement with hardware people, no one has cut any silicon for these workloads, so there is time to make changes\r\n- we don't know what the hardware APIs will look like, and if the multi-space design will conflict with them\r\n\r\non the other hand:\r\n- if there turned out to be a conflict, that would be very bad for the future of multipath\r\n- it is unclear if multipath, given its current status, likely status in the near future, and addressable market, would move the needle for vendors\r\n- creating the impression that the QUIC crypto API is not stable is bad for QUIC\r\n\r\nIt would be very good to engage with the right people in industry, do some thinking about what these APIs would likely resemble, and if possible come up with a crypto design that is consistent with that.",
          "createdAt": "2021-10-18T17:15:01Z",
          "updatedAt": "2021-10-18T17:15:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I would be hoping that any hardware offload would already be able to handle a different nonce length as that seem more future proof anyway. However, Martin probably has a good point that is makes sense to reach out and make this requirement explicit now.",
          "createdAt": "2021-10-18T17:38:49Z",
          "updatedAt": "2021-10-18T17:38:49Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "Based on recent changes about removing single packet number space, have there been changes on this topic? We'd love to get feedback on https://github.com/microsoft/quic-offloads with response to multi-path to make sure our HW offload design can support it.",
          "createdAt": "2022-11-11T14:17:22Z",
          "updatedAt": "2022-11-11T14:17:22Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOGNtpaM49W2VG",
      "title": "More text on packet number space options",
      "url": "https://github.com/quicwg/multipath/issues/26",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "Based on the discussed from the side meeting, we need to\r\n\r\n- Clarify that the goal is to only select one approach for the finally published solution in an RFC\r\n- Add some discussion about the pros and cons to the appendix",
      "createdAt": "2021-10-18T17:28:52Z",
      "updatedAt": "2021-10-25T11:11:36Z",
      "closedAt": "2021-10-25T11:11:36Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I think we should have these discussions in the current draft.",
          "createdAt": "2021-10-19T21:00:01Z",
          "updatedAt": "2021-10-19T21:00:01Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should we use a new code point for the transport parameter of the options? \r\nFor 2 reasons:\r\n- It's a new joint version\r\n- As we use a different value definition in our current implementation, it's hard to deploy the new version in a synchronised way, at least we could keep compatible if we use a new transport parameter.\r\n\r\nWhat do you think? Or maybe we should keep it unchanged until the WG is ready to adopt the draft?",
          "createdAt": "2021-10-22T06:07:07Z",
          "updatedAt": "2021-10-22T06:07:07Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it is fine to define a new value for the transport parameter, the 00 version of this draft is not yet out anyway.",
          "createdAt": "2021-10-22T07:07:03Z",
          "updatedAt": "2021-10-22T07:07:03Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, please use a new parameter.",
          "createdAt": "2021-10-23T05:36:24Z",
          "updatedAt": "2021-10-23T05:36:24Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created #49 to add one more sentence and a reference to the slides from the side meeting. I believe this is sufficient to address this issue for -00.",
          "createdAt": "2021-10-25T11:00:15Z",
          "updatedAt": "2021-10-25T11:00:15Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "I_kwDOGNtpaM49ZPRt",
      "title": "Multiple packet number spaces can be compatible with zero-length Connection IDs",
      "url": "https://github.com/quicwg/multipath/issues/27",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "design",
        "needs-discussion"
      ],
      "body": "Currently, the multiple packet number spaces proposal relies on the sequence number of the Connection ID when a non-zero connection ID is used. With non-zero-length Connection IDs at both ends, it is indeed possible that over a same path/5-tuple, the client reaches the server using a DCID with a sequence number that is different from the sequence number of the DCID used by the server to reach the client (e.g., Figure 2). In the current draft, we consider that if the connection ID is zero-length, the packet number space identifier is 0, and applying multiple packet number spaces is thus not possible.\r\n\r\nI believe we can do better than this. Consider the situation where the client uses a non-zero length DCID to reach the server while the server uses zero-length DCID. In this case, it is the client that initiates the usage of a path with path validation, associating a server-provided non-zero-length DCID to reach the server. Once the first client's packet reaches the server on the new path, the server can associate the client's 5-tuple to the sequence number of the used Destination Connection ID, making a valid Packet Number Space Identifier. The client can easily map incoming packets on the 5-tuple to the associated DCID sequence number.\r\n\r\nDoes this sound reasonable?",
      "createdAt": "2021-10-19T08:43:58Z",
      "updatedAt": "2022-07-07T09:40:29Z",
      "closedAt": "2022-07-07T09:40:29Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think there is room to find a solution here but as I understand it, currently the PN Space ID is independent on each side because the DID sequence number is as well. In order to realise an approach as you describe you need some kind of synchronisation on the used CID sequence numbers to avoid that the same number is used on both side. But such sync could be easy (e.g. use even and odd numbers) and maybe it would make sense...?",
          "createdAt": "2021-10-19T09:16:47Z",
          "updatedAt": "2021-10-19T09:16:47Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "When null-CID is used for the server->client direction, the client does not propose any CID nor use them. All the CID numbers are thus only provided by the server and there is no risk of confusion.",
          "createdAt": "2021-10-19T09:30:44Z",
          "updatedAt": "2021-10-19T09:30:44Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah right! Yes we should add that!",
          "createdAt": "2021-10-19T09:37:32Z",
          "updatedAt": "2021-10-19T09:37:32Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "I believe this design _may_ work, but I would be a bit sad that the client would have to support one mode of decryption when using a zero-length CID and another mode when it's not.\r\n\r\nAlso, I think there have been discussions of scenarios where the server may use zero-length CIDs too, maybe in the P2P scenarios. Things break down there, and it's not great to have a design where it breaks down in certain circumstances.",
          "createdAt": "2021-10-19T12:47:11Z",
          "updatedAt": "2021-10-19T12:47:11Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Ah right! Yes we should add that!\r\n\r\nIn the path identifier, we currently have three types. \r\n\r\n Path Identifier {\r\n    Identifier Type (i) = 0x00..0x02,\r\n    Path Identifier Content (i),\r\n  }\r\n\r\nWhen a client uses non-zero CID, but the server uses zero-length CID, type 0x02 should be used. What Olivier suggested was that we should also apply a similar strategy to the PN space identifier.\r\n ",
          "createdAt": "2021-10-19T20:30:04Z",
          "updatedAt": "2021-10-19T20:30:04Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The current proposal derives the nonce strictly from bytes in the packet. The decryption module only needs to know which CID belong to the connection and what is their CID sequence number. You could offload that. But if you want to use different encryption for different packets all with the same CID, you need some other context, such as addresses and port numbers. That will not work for the first packet received on a four tuple, or if in the case of NAT rebinding. Seems much more error prone.",
          "createdAt": "2021-10-20T02:28:46Z",
          "updatedAt": "2021-10-20T02:28:46Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also, let's be clear that receivers and senders always use different sequence numbers, even with tcp. I cannot see why this is a problem.",
          "createdAt": "2021-10-20T02:29:54Z",
          "updatedAt": "2021-10-20T02:29:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "In case of a NAT rebinding you should have a CID (from the client to server). However, you are right that this would mean that only the client can open new paths.",
          "createdAt": "2021-10-20T07:48:17Z",
          "updatedAt": "2021-10-20T07:48:17Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this issue @qdeconinck ?",
          "createdAt": "2022-07-06T14:01:09Z",
          "updatedAt": "2022-07-06T14:01:09Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given that #103 got merged, we can now close this.",
          "createdAt": "2022-07-07T09:40:29Z",
          "updatedAt": "2022-07-07T09:40:29Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOGNtpaM49nWKa",
      "title": "Use of client/server",
      "url": "https://github.com/quicwg/multipath/issues/31",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Due to the copying&pasting from different documents, we use sometimes client/server and sometimes endpoint/peer in the draft. If I understand everything correctly, both endpoint can open (start validation) and close paths, correct?\r\n\r\nThere I would propose to remove all instances of client/server from the draft (expect for the handshake negotiation part). I can do that but wanted to check first if that's the correct thing to do",
      "createdAt": "2021-10-22T15:50:38Z",
      "updatedAt": "2021-10-25T10:44:19Z",
      "closedAt": "2021-10-25T10:44:19Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No, that is not correct. Only the client can open new paths, per section 9 of RFC 9000:\r\n```\r\n   This document limits migration of connections to new client\r\n   addresses, except as described in Section 9.6.  Clients are\r\n   responsible for initiating all migrations.  Servers do not send non-\r\n   probing packets (see Section 9.1) toward a client address until they\r\n   see a non-probing packet from that address.  If a client receives\r\n   packets from an unknown server address, the client MUST discard these\r\n   packets.\r\n```",
          "createdAt": "2021-10-23T06:41:15Z",
          "updatedAt": "2021-10-23T06:41:15Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I know this text in RFC9000. I was wondering if we can release this restriction?\r\n\r\nFor migration all use cases assumped that the client would move (or be NATed). However for multiipath I think there are also use cases where the server side might have multiple paths (e.g. in the proxy case).\r\n\r\nSo could we remove this restriction just, or are there problem with that?",
          "createdAt": "2021-10-23T07:30:45Z",
          "updatedAt": "2021-10-23T07:30:45Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The restriction is due to general considerations about NAT traversal, server farms, etc. I think we agreed already that this kind of deviation from RFC 9000 belongs in a separate extension, much like unidirectional paths or discovery of alternate server addresses. It should not be negotiated as part of the \"multipath core\". I would rather see that as part of peer-to-peer extensions.",
          "createdAt": "2021-10-23T15:21:18Z",
          "updatedAt": "2021-10-23T15:21:18Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This restrictions makes sense for migration because you avoid the synchronisation problem what happen if both end try to migrate at the same time. However, this problem doesn't exist for multipath because if both end try to open a new path at the same time, you just open two paths. If there is no technical reason to keep this restriction, I don't still we should keep it artificially.",
          "createdAt": "2021-10-24T06:54:58Z",
          "updatedAt": "2021-10-24T06:54:58Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's not the only problem. Most clients are behind some kind of NAT or stateful firewall, which will only let a packet in if it saw a packet out from the same 5 tuple. In such scenarios, migration originating from the server will just fail. If you want to make them work, you have to get a cooperation between client and server. In the case of big cloud servers, the solution is something like the preferred address extension: the server tells the client that it can also be joined at an alternate address, and the client opens a path to that. In the case of peer to peer servers, the solution requires something like ICE. These are valuable things to do, but they should be described in an extension, not in the core document.",
          "createdAt": "2021-10-24T22:29:50Z",
          "updatedAt": "2021-10-24T22:30:39Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a problem for migration but if the server tries to open a path and it fails that just fine and not a problem. Signaling of alternative address to the client we already decided to leave to an extension. However, that still doesn't mean for me that we need to restrict the opening of new path to client.",
          "createdAt": "2021-10-25T08:39:28Z",
          "updatedAt": "2021-10-25T08:39:28Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "To address this point before the submission deadline, I think we should add something to the intro to clarify that new paths can only be opened by the client and maybe also say that this issue needs further discussion?\r\n\r\nI will anyway make a pass and check all use of the terms client/server but keep it where appropriate.\r\n\r\nRegarding path_abandon it seems okay to me that both ends can send it because it really just an indication that a certain path should not used anymore. I guess usually the client will send this, e g. due to a mobility event, but I don't see a reason to restrict this to the client only. I will propose some text to address issue #32 ",
          "createdAt": "2021-10-25T08:43:36Z",
          "updatedAt": "2021-10-25T08:43:36Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "In #32 I also changed one occasion of client/server. I think the other ones are fine (given the current restriction that paths can only be opened by the client). I will open a separate issue for this question but with the intention to solve it after submission of -00",
          "createdAt": "2021-10-25T10:44:19Z",
          "updatedAt": "2021-10-25T10:44:19Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOGNtpaM49nX22",
      "title": "Abandon needs clarification",
      "url": "https://github.com/quicwg/multipath/issues/32",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "The text says that both endpoint can send an abandon frame. However, if I understand the current text correctly it only says that the receiving peer of that frame can remove its state as the sender of the abandon frame indicated it will not send any more packets ion that path. However, the sender of the abandon frame can't remove its state until it also receives an abandon frame from the other end. That would mean a path can \"half-open\"... \r\n\r\nDo we need to say something that that the receiver of an abandon frame SHOULD also send an abandon frame in response? Or MAY? Or MUST?\r\n\r\nOr is the path considered completely closed as soon as an ACK for the packet containing the abandon frame is received? In this case we need to say that when an abandon frame is received, the receiver MUST not use that path anymore.\r\n\r\nI think we need to clarify that!\r\n\r\nPlease provide a PR or let me know what the intention was and I can write something!\r\n\r\n\r\n",
      "createdAt": "2021-10-22T15:58:37Z",
      "updatedAt": "2021-10-25T12:22:37Z",
      "closedAt": "2021-10-25T12:22:37Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For me, ABANDON_PATH means \"please stop sending on that path, I may soon stop listening\". The peer should definitely stop sending on that path. It may want to keep listening for a short time, because some packets may still be sent out of order. It may also want to keep some context to process acknowledgement of packets previously sent on that path. The general guidance is to to wait for something like 3xRTO before dropping path management resource.\r\n\r\nI don't think that we need symmetry, that both peers have to abandon the path before they can release resource. But we have to solve a potential path suicide problem. Suppose we have two paths, peer 1 abandons path #1, peer 2 abandon path #2. Now we have zero path, and the connection is closed -- unless the client promptly opens a new path #3. My original intention is that only the client ever sends an ABANDON_PATH, since only the client can initiate a new path, which dodges the path suicide issue. ",
          "createdAt": "2021-10-23T06:55:49Z",
          "updatedAt": "2021-10-23T06:55:49Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good questions! For me, the issue is that when an endpoint decides to close a path, it is probably due to that the path condition is getting worse, which also means that further communication on that path may fail. When we use non-zero CID, as we should have at least one path that is working (if no path is working, the connection will be closed), and we are not constraint to send PATH_ABANDON frame on the same path that we want to close, the sender should be able to receive the ACK of PATH_ABANDON. But when we use null CID, we use path_id_type 0x02, which refers to the path where the packet is coming from, and hence, we are constraint to send PATH_ABANDON on the same path we want to close. In such a case, it is likely that the ACK of PATH_ABANDON will not be received, resulting in the \"half-open\" problem. Therefore, we should say sth like \"when the sender moves into the \"ABANDON_SENT\" state, and after 3RTO, it should close the path even if it hasn't seen the PATH_ABANDON sent from its peer\". \r\n",
          "createdAt": "2021-10-23T07:05:08Z",
          "updatedAt": "2021-10-23T07:05:08Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also, regarding when a path is considered completely closed, the current intention is that a path is considered closed when both the sender-side and the receiver-side resources of that path are released. The sender-side resources can be readily released when PATH_ABANDON is acked (We may need to retransmit the path_abandon). The receiver-side resources are released when the RETIRE_CID frame is received. However, when zero-CID is used, it is possible that an endpoint is not going to receive any RETIRE_CID frames, so the receiver-side resources are released 3RTO after sending out the PATH_ABANDON.",
          "createdAt": "2021-10-23T07:20:13Z",
          "updatedAt": "2021-10-23T07:20:13Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created PR #46. I think this is the biggest issue we need to address and agree on before submission of -00. So please review @huitema @Yanmei-Liu @qdeconinck !",
          "createdAt": "2021-10-25T10:41:52Z",
          "updatedAt": "2021-10-25T10:41:52Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOGNtpaM49nYca",
      "title": "Basic Scheduling Guidance ",
      "url": "https://github.com/quicwg/multipath/issues/33",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "design"
      ],
      "body": "I have a sentence in the intro that this draft provide some basic scheduling guidance. I was think about something like: Data belonging to the same stream should be sent over the same path. If a new stream is opened, a packet is selected based on the current load (e.g. number of stream/max congestion window). Or something else?\r\n\r\nOr is the plan to really not say anything here?",
      "createdAt": "2021-10-22T16:01:19Z",
      "updatedAt": "2022-07-06T15:19:06Z",
      "closedAt": "2022-07-06T15:19:06Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How about we specify two basic modes according to steering and aggregation? For steering, we send data belonging to the same stream over the same path. For aggregation, we simply use round-robin to split data of the same stream over multiple paths. ",
          "createdAt": "2021-10-23T06:07:10Z",
          "updatedAt": "2021-10-23T06:07:10Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The same-stream same-path rule is actually counter-productive when sending a big file on a stream. I don't think it belongs in the \"basic scheduling guidance.\"",
          "createdAt": "2021-10-23T06:57:43Z",
          "updatedAt": "2021-10-23T06:57:43Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would suggest to leave scheduling outside of the first version of the draft and reference draft-bonaventure-iccrg-schedulers-01 that already contains generic discussion. I will resubmit this draft today (without changes) and we can update it to discuss multipath transport protocols in a generic draft. ",
          "createdAt": "2021-10-25T06:26:19Z",
          "updatedAt": "2021-10-25T06:26:19Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "There is already a reference to that draft. I don't think we need anything else for the -00 version but will leave this issue open for later eventually.",
          "createdAt": "2021-10-25T08:49:41Z",
          "updatedAt": "2021-10-25T08:49:41Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this issue or is there any more text we want to add to this draft?",
          "createdAt": "2022-01-11T12:28:55Z",
          "updatedAt": "2022-01-11T12:28:55Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm writing an overview section to briefly present multipath quic that could contain this information. I'll send a PR later this week.",
          "createdAt": "2022-01-11T15:57:03Z",
          "updatedAt": "2022-01-11T15:57:03Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@obonaventure I just commented on the PR. My suggestion is to move the scheduling text to a separate PR and merge it into the Packet Scheduling section that is already there later in the document, given there is now some redundancy anyway. Are you able to do that? Or should I give it a try to split up the PR?",
          "createdAt": "2022-03-03T17:03:20Z",
          "updatedAt": "2022-03-03T17:03:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Text from Olivier from older PR:\r\n\r\n```\r\nThe second algorithm that multipath QUIC applications will require is a packet scheduler (PS).\r\nThe PS is used when there are two or more paths that are active for a given multipath QUIC connection. In\r\nthis case, QUIC must select the path over which each frame will be sent. Many PS strategies\r\nare possible and the best one will depend on the application's requirements. The PS should\r\nhave access to (an abstraction of) the congestion control state of each path to be able to determine\r\nwhether a path has enough capacity to carry a new packet. The PS also needs to have access to the\r\npath's MTU as different paths do not necessarily have the same MTU. A simple PS is a round-robin\r\nscheduler that checks the congestion window of a path before sending a QUIC packet.\r\nAnother sample PS is an algorithm that selects the path whose congestion window is open and\r\nthat has the smallest round-trip-time. This is the PS used by the Linux implementation of Multipath\r\nTCP. Note that a multipath QUIC PS will probably treat control and data packets differently. For\r\nexample, a PS could favor low delay paths to send acknowledgments and higher bandwidth\r\nones for data packets. A companion draft\r\n{{I-D.bonaventure-iccrg-schedulers}} provides several general-purpose multipath\r\npacket schedulers. \r\n```",
          "createdAt": "2022-03-07T10:01:45Z",
          "updatedAt": "2022-03-07T10:01:45Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@qdeconinck also mention in the cal on March 7 that we need more guidance about scheduling of ACKs",
          "createdAt": "2022-03-07T10:02:17Z",
          "updatedAt": "2022-03-07T10:02:17Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I opened a new issue for the ACK guidance (#123) and am closing this one now.",
          "createdAt": "2022-07-06T15:19:06Z",
          "updatedAt": "2022-07-06T15:19:06Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOGNtpaM49ovzu",
      "title": "Text on number of CID and number of path should be common to single and multiple PN spaces",
      "url": "https://github.com/quicwg/multipath/issues/34",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We mention in the introduction that if a node uses non null CID, it must use different CID for different paths. This is true whether the peers negotiated single or multiple packet number spaces. The text about connection ID in the introduction of the multiple PN space section should be moved to a common section.",
      "createdAt": "2021-10-23T06:26:14Z",
      "updatedAt": "2021-10-25T00:13:50Z",
      "closedAt": "2021-10-25T00:13:50Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "In my editorial pass in #30 I already moved some of that text, so let me merge that first (after @Yanmei-Liu Yanmei and @qdeconinck Quentin have reviewer it).\r\n\r\nWhen that is merged and there is still something that needs to move, you could please indicate exactly which part you are talking about?",
          "createdAt": "2021-10-23T07:42:38Z",
          "updatedAt": "2021-10-23T07:42:38Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Edited text looks good, let's avoid one more last minute edit.",
          "createdAt": "2021-10-25T00:13:50Z",
          "updatedAt": "2021-10-25T00:13:50Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOGNtpaM49owAN",
      "title": "Path identifier type 2 unclear",
      "url": "https://github.com/quicwg/multipath/issues/35",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the \"path abandon\" frame, the path identifier is defined as:\r\n~~~\r\n  Path Identifier {\r\n    Identifier Type (i) = 0x00..0x02,\r\n    Path Identifier Content (i),\r\n  }\r\n~~~\r\nBut in the identifier type 2, the \"path identifier content\" is empty. We should fix that.",
      "createdAt": "2021-10-23T06:31:26Z",
      "updatedAt": "2021-10-25T08:24:40Z",
      "closedAt": "2021-10-25T08:24:40Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Submitted PR #37 for this issue.",
          "createdAt": "2021-10-24T18:35:11Z",
          "updatedAt": "2021-10-24T18:35:11Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "I_kwDOGNtpaM49qcY6",
      "title": "More editorial issues",
      "url": "https://github.com/quicwg/multipath/issues/39",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When I try to produce the draft, I get a number of warnings:\r\n```\r\nPS C:\\Users\\huite\\GitHub\\draft-lmbdhk-quic-multipath> kramdown-rfc2629 --v3 .\\draft-lmbdhk-quic-multipath.md > draft.xml\r\n\r\n*** Input contains HT (\"tab\") characters. Undefined behavior will ensue.\r\n*** overwriting RFC2119\r\n*** overwriting QUIC-TLS\r\nPS C:\\Users\\huite\\GitHub\\draft-lmbdhk-quic-multipath> xml2rfc --text draft.xml\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(12): Warning: Setting consensus=\"true\" for IETF STD document (this is not the schema default, but is the only value permitted for this type of document)\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(935): Warning: Unused reference: There seems to be no reference to [QUIC-Invariants] in the document\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(553): Warning: Artwork too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(553): Warning: Figure too wide, reducing indentation from 3 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(675): Warning: Artwork too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(675): Warning: Figure too wide, reducing indentation from 3 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(665): Warning: Section too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(574): Warning: Section too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(72): Warning: Middle too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(675): Warning: Too long line found (L940), 8 characters longer than 72 characters:\r\n    Type (i) = TBD-00..TBD-01 (experiments use 0xbaba00..0xbaba01 or 0x42..x43),\r\n Created file draft.txt\r\n ```\r\n\r\n\r\n",
      "createdAt": "2021-10-24T23:04:11Z",
      "updatedAt": "2021-10-25T08:26:39Z",
      "closedAt": "2021-10-25T08:26:39Z",
      "comments": []
    },
    {
      "number": 40,
      "id": "I_kwDOGNtpaM49qdFt",
      "title": "Should pick just one experimental value for ACK MP",
      "url": "https://github.com/quicwg/multipath/issues/40",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "The current text on the defintion of ACK MP says:\r\n```\r\n  ACK_MP frame is formatted as shown in Figure 6.\r\n\r\n  ACK_MP Frame {\r\n    Type (i) = TBD-00..TBD-01 (experiments use 0xbaba00..0xbaba01 or 0x42..x43),\r\n    Packet Number Space Identifier (i),\r\n    Largest Acknowledged (i),\r\n    ACK Delay (i),\r\n    ACK Range Count (i),\r\n    First ACK Range (i),\r\n    ACK Range (..) ...,\r\n    [ECN Counts (..)],\r\n  }\r\n```\r\nThe figure is too wide, and I am fixing that with issue #39, but really we should pick just one set of identifiers, not 2. I understand that draft-liu and draft-deconinck were using these two values, but we should pick one of them, or a third one.",
      "createdAt": "2021-10-24T23:16:48Z",
      "updatedAt": "2021-10-25T10:44:18Z",
      "closedAt": "2021-10-25T10:44:18Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I submitted PR #42 to fix this issue.",
          "createdAt": "2021-10-25T07:08:32Z",
          "updatedAt": "2021-10-25T07:08:32Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR #42 merged.",
          "createdAt": "2021-10-25T10:44:18Z",
          "updatedAt": "2021-10-25T10:44:18Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOGNtpaM49rpeL",
      "title": "Clarify in intro that multiple packet number spaces require use if CID in both directions (for now) ",
      "url": "https://github.com/quicwg/multipath/issues/43",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "I opened issue to make sure we don forget to address this and will close #4 instead.",
      "createdAt": "2021-10-25T08:48:08Z",
      "updatedAt": "2021-10-25T11:21:41Z",
      "closedAt": "2021-10-25T11:21:41Z",
      "comments": []
    },
    {
      "number": 47,
      "id": "I_kwDOGNtpaM49sIct",
      "title": "Should servers be allowed to open new paths?",
      "url": "https://github.com/quicwg/multipath/issues/47",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "needs-discussion"
      ],
      "body": "In RFC9000 path migration is restricted to clients only, mainly because of problems with NATs which a) is the main use case to have migrations (address change at the client only) and b) could anyway cause failure for mitigation attempts from the server.\r\n\r\nHowever, with multipath, failure of opening a new path is less critical as the old path(s) is not abandon at the same time. Therefore we should further discussion if that restriction is still technical useful or if it can be released easily.\r\n\r\nThis issue was initially discussed as part of issue #31 ",
      "createdAt": "2021-10-25T10:49:06Z",
      "updatedAt": "2022-03-23T14:41:57Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think there might be also a security concern. Suppose a victim's address is advertised and the server attempts to open a new path with that address.",
          "createdAt": "2021-10-26T07:43:33Z",
          "updatedAt": "2021-10-26T07:43:33Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we want the server to be able to create a new path, we need to define a new frame that allows the client to advertise the addresses and port numbers that it listens to. This is not difficult and could allow an IPv4 server to advertise its IPv6 address, but my understanding was that such frames were outside the scope of the current draft and should be part of another draft. We can extract material from draft-deconinck-quic-multipath about address advertisement and propose another that in another draft if you think that this could be useful.",
          "createdAt": "2022-01-11T16:28:40Z",
          "updatedAt": "2022-01-11T16:28:40Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think we already agreed that address advertisement should be a separate draft. However, even if the server knows already another address of the client (e.g. by using some advertisement on the higher layer), currently the server is not allowed to open a new path. This restriction made sense for the use cases for migration and made life easier. However as long as you can still use the old path in the multipath case while waiting for path probing to success, I don't see a real risk in letting the server also open new paths.",
          "createdAt": "2022-01-11T18:31:16Z",
          "updatedAt": "2022-01-11T18:31:16Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would rather move that discussion to a separate draft, and keep the initial multipath draft aligned with RFC 9000.",
          "createdAt": "2022-01-11T21:40:31Z",
          "updatedAt": "2022-01-11T21:40:31Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think that this is necessarily something for a separate draft. If there is no good reason to keep this restriction, we should remove it. If there are good reasons we should at least document them. What are the reasons?",
          "createdAt": "2022-01-12T09:12:31Z",
          "updatedAt": "2022-01-12T09:12:31Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should discuss this at the next meeting!",
          "createdAt": "2022-03-03T17:04:58Z",
          "updatedAt": "2022-03-03T17:04:58Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "NONE",
          "body": "I agree with @huitema that this should be a separate draft, where server-initiated paths can be handled holistically. The multipath shouldn't be the place that concept gets introduced.",
          "createdAt": "2022-03-22T10:13:27Z",
          "updatedAt": "2022-03-22T10:13:27Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "At IETF-113 there were concerns about the implications of this change. While some people were interested in this to support additional use cases, there was also quite some feedback to rather leave that for another extension (maybe together with address discovery mechanism). In any case, more analysis of the implication is needed (e.g. review discussion about this restriction for RFC9000). Leaving this open for now for further discussion.",
          "createdAt": "2022-03-23T14:41:56Z",
          "updatedAt": "2022-03-23T14:41:56Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOGNtpaM49sg7X",
      "title": "Sending non-probe packets before path validation complete",
      "url": "https://github.com/quicwg/multipath/issues/50",
      "state": "OPEN",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "Yanmei-Liu"
      ],
      "labels": [
        "design",
        "needs-discussion"
      ],
      "body": "As we have 0-RTT transmission in QUIC-TRANSPORT, and path validation brings at lease one round-trip-time delay for data to be sent on the new path, can we add some mechanism to provide anti-amplification limitation and support this scenario?",
      "createdAt": "2021-10-25T12:31:26Z",
      "updatedAt": "2022-11-06T15:36:05Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@Yanmei-Liu do you have a proposal?",
          "createdAt": "2022-03-03T17:08:30Z",
          "updatedAt": "2022-03-03T17:08:30Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Feedback from IETF-113: This proposal needs a more clear use case. If you have a use case, please describe it here!",
          "createdAt": "2022-03-23T14:42:59Z",
          "updatedAt": "2022-03-23T14:42:59Z"
        },
        {
          "author": "ekinnear",
          "authorAssociation": "NONE",
          "body": "In most cases where it would matter, it seems like we can get path validation out of the way ahead of time, before we need a new path. \r\n\r\nIf you're trying to bring it up as part of 0-RTT/immediately, the amplification limit means that you potentially cannot send a full initial window of data, but you can still get started on slow start/getting that path up and running at the same time as you do path validation.\r\n\r\nAlso, shouldn't the packet sizing requirements help push the congestion window larger even if you're not yet using the path for non-probing packets and are just using padding? This is the same mechanism as how you can pre-warm a path for migration without needing to drop back to zero when you switch to the new path.",
          "createdAt": "2022-11-06T15:36:05Z",
          "updatedAt": "2022-11-06T15:36:05Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "I_kwDOGNtpaM49v64i",
      "title": "Mechanisms to avoid path timeout",
      "url": "https://github.com/quicwg/multipath/issues/51",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "For -01",
        "has PR"
      ],
      "body": "The current draft says that \"Servers SHOULD stop sending traffic on paths through where no non-probing packet was received in the last 3 path RTTs\". However, it is possible that only a few data was generated in the past few RTTs due to app-limit conditions, and as a result, only one path was used. So I think, in section 3.2.3, we should suggest the use of some keep-alive mechanisms such as sending ping frames on a particular path if one is interested in keeping that path alive. Let me know what you think?",
      "createdAt": "2021-10-26T08:06:33Z",
      "updatedAt": "2021-11-05T06:30:22Z",
      "closedAt": "2021-11-05T06:30:22Z",
      "comments": [
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "I fully agree this is an issue to be solved (#68).\r\n\r\nHowever, I think that before trying to find measures at the client side to take into account that server behavior, the text should provide a motivation for such restriction, especially that in typical scenarios the data is flying from the servers and that MP_ACK may be over any path \r\n\r\n```\r\n   ACK_MP frame Section 10.2 can be returned via either a different\r\n   path, or the same path identified by the Path Identifier, based on\r\n   different strategies of sending ACK_MP frames. \r\n```\r\n(BTW, s/ACK_MP frame Section 10.2/ACK_MP frame (Section 10.2)\r\n\r\nI'm afraid the use of keepalives may not work in scenarios where the external addresses are not local to the client (and thus has no control on the paths that will be used), e.g.,\r\n\r\n~~~~~\r\n                +----+\r\n                 | @1   \\\r\n  C---------R          ======S\r\n                 | @2    /\r\n                +-----+\r\n~~~~~\r\n\r\n* C/S negotiate multipathing by default.\r\n* R distributes the load based on a local policy.   \r\n* S/C uses PATH_CHALLENGE and PATH_RESPONSE to validate the paths.\r\n* C does not control the path that will be used by R when forwarding packets. \r\n\r\n\r\n\r\n",
          "createdAt": "2021-10-27T07:42:54Z",
          "updatedAt": "2021-10-27T07:47:30Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Med, I am not sure that I understand the scenario that you are describing. There is a router R balancing the load over two paths, and using some NAT like functionality to rewrite the client source address, and presumably the client's port number. This is not supported by either RFC 9000 or by our multipath draft.\r\n\r\nThe server will likely treat arrival from @1 and @2 as NAT rebinding, and the connection will end up using a single path. \r\n\r\n\r\n",
          "createdAt": "2021-10-27T15:47:12Z",
          "updatedAt": "2021-10-27T15:47:12Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "R is multi-homed with PA (Provider Assigned) mode . In such mode, R uses the appropriate source IP address when forwarding packets over a given network attachment. \r\n\r\nWith RFC9000, and depending on the distribution logic used by R (per packet, per flow, round robin, maximize bw usage, RTT-based optimization, ...), there will be a path oscillation for this connection as the server will keep proceeding with path migrations each time it sees a new address (@1, @2, @1, and so on). \r\n\r\nNow, if both the client and server negotiates multipath, we don't have anymore this oscillation and the connection will use more resources. However, prematurely closing the connection nullifies the benefits of using multipath.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-10-28T05:32:14Z",
          "updatedAt": "2021-10-28T05:32:14Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, we will still have oscillation even if the endpoints negotiate multipath. There is not difference of behavior with RFC 9000 here, this scenario will be processed as NAT rebinding.\r\n\r\nThis is not a supported scenario. QUIC is an end to end protocol. Intermediate routers cannot really tell whether the endpoints are supporting multipath, and should not depend on that. For that scenario to work, the alternate addresses @1 and @2 should be somehow managed by the client, and the client should be able to steer traffic towards one or the other.\r\n",
          "createdAt": "2021-10-28T06:17:55Z",
          "updatedAt": "2021-10-28T06:17:55Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "> This is not a supported scenario. QUIC is an end to end protocol. Intermediate routers cannot really tell whether the endpoints are supporting multipath, and should not depend on that.\r\n\r\nSure, the connection is end-to-end. The intermediate routers **do not * interfere with the connection. However, an endpoint can still discover the availability of multiple paths (there are plenty mechanisms out there to discover the external IP addresses).\r\n\r\nEven without a discovery mechanism, many service offerings already allow controlling how flows are bound to external links (including bonding). Think about SDWAN, for example. These policies are configured on the CE router. \r\n\r\nIf this scenario is not supported in this version of the protocol, there should be an applicability section where the target deployments are called out. Some text may be considered to discuss concretely when the client can negotiate multipath activation based on that applicability. \r\n\r\nBack to the initial issue, I think that more motivation is needed to justify withdrawing a path too prematurely. \r\n\r\n\r\n",
          "createdAt": "2021-10-28T06:51:26Z",
          "updatedAt": "2021-10-28T06:51:26Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The middlebox design that you describe closely resembles address spoofing attacks against QUIC that we discussed and tried to mitigate during the design, so it is no surprise that QUIC does not really support it. It would also break TCP connections, which means it is probably not deployed yet. My advice would be to not try deploy that.",
          "createdAt": "2021-10-28T12:41:42Z",
          "updatedAt": "2021-10-28T12:42:08Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "It is deployed in (MP)TCP, but requires another proxy to glue the two connections and hide them to the sever. \r\n\r\nIn QUIC, we can have a much more cleaner design as the router does not have to interfere with the connection  + we avoid the second proxy. \r\n\r\nThat's said, I'm not pushing to have this included. We just need to be clear about the applicability scope.  \r\n",
          "createdAt": "2021-10-28T12:50:10Z",
          "updatedAt": "2021-10-28T12:50:10Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "By default, the applicability scope is the same as QUIC version 1.",
          "createdAt": "2021-10-28T12:55:05Z",
          "updatedAt": "2021-10-28T12:55:05Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "By default, the applicability scope is the same as QUIC version 1.",
          "createdAt": "2021-10-28T12:55:12Z",
          "updatedAt": "2021-10-28T12:55:12Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "> By default, the applicability scope is the same as QUIC version 1.\r\n\r\nMaybe, but I think having an architecture figure to illustrate the basic multipath case that is covered would be helpful. \r\n\r\nBTW, there is nothing in the current design that prevents multipath QUIC to be established over the scenario we discussed. I admit this is a side effect, not a desired goal. \r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-10-28T13:18:47Z",
          "updatedAt": "2021-10-28T13:18:47Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's get back to the problem Yunfei mentioned, I just submitted PR #74 for it.\r\n\r\nBy the way, do we need a transport parameter to negotiate max path idle timeout? Like the connection max_idle_timeout in RFC9000, to prevent one of the endpoints end up the path too early...",
          "createdAt": "2021-11-03T09:48:59Z",
          "updatedAt": "2021-11-03T09:48:59Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Why would you have different max_idle_timeout for different paths?",
          "createdAt": "2021-11-03T09:54:22Z",
          "updatedAt": "2021-11-03T09:54:22Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Why would you have different max_idle_timeout for different paths?\r\n\r\nThe max_idle_timeout defined in RFC9000 is used to close whole connection, but not the path. In order to close an idle path more precisely, one might need sth like max_path_idle_timeout. I think we want all paths to have the same max_path_idle_timeout values, which is used to control when a path should be closed when no non-probing packets was received on that path. Another approach is to use PING frame to keep a path alive. ",
          "createdAt": "2021-11-04T08:19:04Z",
          "updatedAt": "2021-11-04T08:19:04Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOGNtpaM49wPGz",
      "title": "this approach requires the use of a connection ID",
      "url": "https://github.com/quicwg/multipath/issues/53",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "`While separate packet number spaces allow for more efficient ACK encoding, especially when paths have highly different latencies, this approach requires the use of a connection ID`\r\n\r\nNot sure to understand why the last part of the sentence is an issue. The use of zero-length connection IDs is problematic anyway in setups with NATs, for example. ",
      "createdAt": "2021-10-26T09:25:47Z",
      "updatedAt": "2021-11-04T15:39:42Z",
      "closedAt": "2021-11-04T15:39:42Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that in many deployments you want at least one CID from the client to server. Multiple packet numbers as currently defined however requires CIDs in both direction; there is separate issue #27 to discuss that.\r\n\r\nThe next sentence also further explains that there might be other deployments though, e.g. in constraint networks, that might also benefit from saving the bits of the CID.\r\n\r\nThis one sentence is of course only a very brief summary of the pros and cons of the different approach and more discussion is needed in the group. So I don't expect to have this part in the draft like this when we finally publish it as RFC.\r\n\r\nIs there anything in the issue that we need to address now? Or can we close this issue?",
          "createdAt": "2021-10-26T10:22:53Z",
          "updatedAt": "2021-10-26T10:22:53Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "Thanks, Mirja.\r\n\r\nThat's what I expected, but I do still think more elaboration is needed for this text to be useful. \r\n\r\nI would suggest to make this modification and leave the discussion of pros/cons to be adequately documented in Section 7:\r\n\r\nOLD:\r\n   This proposal supports the negotiation of either the use of one\r\n   packet number space for all paths or the use of separate packet\r\n   number spaces per path.  While separate packet number spaces allow\r\n   for more efficient ACK encoding, especially when paths have highly\r\n   different latencies, this approach requires the use of a connection\r\n   ID.  Therefore use of a single number space can be beneficial in\r\n   highly constrained networks that do not benefit from exposing the\r\n   connection ID in the header.  While both approaches are supported by\r\n   the specification in this version of the document, the intention for\r\n   the final publication of a multipath extension for QUIC is to choose\r\n   one option in order to avoid incompatibility.  More evaluation and\r\n   implementation experience is needed to select one approach before\r\n   final publication.  Some discussion about pros and cons can be found\r\n   here: https://github.com/mirjak/draft-lmbdhk-quic-\r\n   multipath/blob/master/presentations/PacketNumberSpace_s.pdf\r\n\r\nNEW:\r\n   This proposal supports the negotiation of either the use of one\r\n   packet number space for all paths or the use of separate packet\r\n   number spaces per path.  While both approaches are supported by\r\n   the specification in this version of the document, the intention for\r\n   the final publication of a multipath extension for QUIC is to choose\r\n   one option in order to avoid incompatibility.  More evaluation and\r\n   implementation experience is needed to select one approach before\r\n   final publication.  Some discussion about pros and cons can be found\r\n   here: https://github.com/mirjak/draft-lmbdhk-quic-\r\n   multipath/blob/master/presentations/PacketNumberSpace_s.pdf",
          "createdAt": "2021-10-26T11:12:02Z",
          "updatedAt": "2021-10-26T11:12:02Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You are suggesting to strike out the sentences that try to summarize the differences, _\"While separate packet number spaces allow for more efficient ACK encoding, especially when paths have highly different latencies, this approach requires the use of a connectionID. Therefore use of a single number space can be beneficial in highly constrained networks that do not benefit from exposing the connection ID in the header.\"_\r\n\r\nI think that's a good idea. The sentences are a short summary of the arguments presented in the powerpoint, which are not limited to \"_highly constrained networks_\". For example, the Chrome browser, by default, uses NULL CID. I may be placing words in the mouth of Google developers, but I believe their goal is to reduce the overhead of the QUIC header compared to TCP/TLS. This is related to a general quest for performance, not to network constraints.",
          "createdAt": "2021-10-26T19:04:27Z",
          "updatedAt": "2021-10-26T19:04:27Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "I_kwDOGNtpaM49xL55",
      "title": "Path Initiation",
      "url": "https://github.com/quicwg/multipath/issues/56",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "> When the multipath option is negotiated, clients that want to use an additional path MUST first initiate the Address Validation procedure with PATH_CHALLENGE and PATH_RESPONSE frames described in Section 8 of {{QUIC-TRANSPORT}}.\r\n\r\nThere are two cases: \r\n* the client uses a distinct source IP address and/or port number: in such case, Address validation does not make sense. \r\n* the client uses a distinct destination IP address and/or port number: I guess this is what is covered in the excerpt. If that's the case, this assumes that the client has discovered a distinct destination IP address/port number (either by some means or that the server has used these address/port).\r\n\r\nI think some elaboration is needed. ",
      "createdAt": "2021-10-26T13:30:36Z",
      "updatedAt": "2021-11-05T06:33:12Z",
      "closedAt": "2021-11-05T06:33:12Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is deliberately left out of the document. What we have now is a simple reference to RFC 9000 -- paths are established in exactly the same way, adding more details would just create confusion. The consensus is that we may very well want to have extensions there, more ways to find addresses, etc., and that those should be detailed in a companion RFC.",
          "createdAt": "2021-10-26T16:00:46Z",
          "updatedAt": "2021-10-26T16:00:46Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see a difference for those two cases. In both cases you need to validate the path and make sure both directions are reachable and that the client address is not spoofed which could otherwise be used as an attack against the spoofed address. This is what path validation does.\r\n\r\nAlso, address discovery is not considered as part of the core functionality, as Christian mentions and as the intro says, but the assumption is that if a client has an out-of band way to learn a new server IP address, it can open a new path to that address.\r\n",
          "createdAt": "2021-10-26T16:31:36Z",
          "updatedAt": "2021-10-26T16:31:36Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On the other hand, in these days of geographic distribution, server farms and load balancers, \"an out-of band way to learn a new server IP address\" has to be somewhat more sophisticated than looking up a list of addresses in the DNS... But yes, if the client tries a new server address and gets it right, there is no reason the core multipath would not work.",
          "createdAt": "2021-10-26T16:37:19Z",
          "updatedAt": "2021-10-26T16:37:19Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually \"out-of-band\" was probably the wrong. The server could tell the client about a new IP address on the application layer...",
          "createdAt": "2021-10-26T16:53:47Z",
          "updatedAt": "2021-10-26T16:53:47Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "> \r\n> \r\n> This is deliberately left out of the document. What we have now is a simple reference to RFC 9000 -- paths are established in exactly the same way, adding more details would just create confusion. The consensus is that we may very well want to have extensions there, more ways to find addresses, etc., and that those should be detailed in a companion RFC.\r\n\r\nThanks for the clarification. The case I'm concerned about is not the second case in my initial comment, but the first one. A client may have the knowlegde of the local addresses. I don't see how path validation from the client side applies for this case.  ",
          "createdAt": "2021-10-27T05:36:46Z",
          "updatedAt": "2021-10-27T05:36:46Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Thanks for the clarification. The case I'm concerned about is not the second case in my initial comment, but the first one. A client may have the knowlegde of the local addresses. I don't see how path validation from the client side applies for this case.\r\n\r\nIn the first case, path validation from the server side check the reachability of the client new address. Endpoints do path validation in both directions when initializing new path, as the same in section 8.2 of RFC 9000. You can find the whole work flow in the first figure of Section Example.\r\n",
          "createdAt": "2021-11-03T08:19:19Z",
          "updatedAt": "2021-11-03T08:19:19Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "I_kwDOGNtpaM49x6I8",
      "title": "Use structured references to section of other documents",
      "url": "https://github.com/quicwg/multipath/issues/58",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has PR"
      ],
      "body": "The draft is using old style references, such as \"section 9 of {{RFC9000}}\". Version 3 of XML2RFC defines a structure way to do that, such as: `<xref section=\"9\" sectionFormat=\"of\" target=\"RFC9000\"/>`, which can be expressed in recent versions of Markdown as `{{Section 9 of RFC9000}}`. The new style references don't change the text version much, but in the HTML rendering they generate direct references to the target section, which is nice for the readers.",
      "createdAt": "2021-10-26T16:10:41Z",
      "updatedAt": "2021-10-29T15:00:05Z",
      "closedAt": "2021-10-29T15:00:05Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, that's my fault because of my local build system. Will fix this for the next revision...",
          "createdAt": "2021-10-26T16:32:34Z",
          "updatedAt": "2021-10-26T16:32:34Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOGNtpaM49x7Kp",
      "title": "Inconsistent use of multi-path and multipath",
      "url": "https://github.com/quicwg/multipath/issues/59",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has PR"
      ],
      "body": "@boucadair flagged in his PRs that there are many places using hyphenated \"multi-path\" and many using \"multipath\". We need to fix that.",
      "createdAt": "2021-10-26T16:14:58Z",
      "updatedAt": "2021-11-04T05:55:53Z",
      "closedAt": "2021-11-04T05:55:53Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is due to the merge of the different drafts. I thought I fixed most of them, but I guess I could have done a search :-) Will do",
          "createdAt": "2021-10-26T16:33:46Z",
          "updatedAt": "2021-10-26T16:33:46Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOGNtpaM49x7nO",
      "title": "Lines in markdown text are too long",
      "url": "https://github.com/quicwg/multipath/issues/60",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "There are many isntances in the markdown source where a whole paragraph is entered in a single line of text. This makes the reviewing harder, and messes up the \"what changed\" view when reviewing PRs.",
      "createdAt": "2021-10-26T16:16:49Z",
      "updatedAt": "2021-11-02T12:32:11Z",
      "closedAt": "2021-11-02T12:32:11Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just to be on the same page, how should we format the text? I see two possible ways.\r\n\r\n- Hard-constraint the number of characters per line to a given limit (e.g., 80)\r\n- Make one sentence = one line\r\n\r\nI have a slight preference for option 2, but I can of course live with the other or a mix of both.",
          "createdAt": "2021-10-27T06:21:52Z",
          "updatedAt": "2021-10-27T06:21:52Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would prefer something like 72 characters, because the last 8 positions are used for numbering the cards in your deck. ",
          "createdAt": "2021-10-27T06:55:57Z",
          "updatedAt": "2021-10-27T06:55:57Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "I_kwDOGNtpaM49zfQV",
      "title": "Mixed use of ACK_MP and MP_ACK",
      "url": "https://github.com/quicwg/multipath/issues/61",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the current draft, we are having two names of multi-path ACK. I think we should stick to just one.",
      "createdAt": "2021-10-27T02:30:42Z",
      "updatedAt": "2021-10-31T14:51:54Z",
      "closedAt": "2021-10-31T14:51:54Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have a slight preference for ACK_MP, on the model of ACK_ECN.",
          "createdAt": "2021-10-27T04:43:28Z",
          "updatedAt": "2021-10-27T04:43:28Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I submitted PR #62 to fix this.",
          "createdAt": "2021-10-27T05:00:33Z",
          "updatedAt": "2021-10-27T05:00:33Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "I would be consistent in how the I-D identifies MP additions vs. RFC9000. \r\n\r\nGiven that the document uses MP_CONNECTION_ERROR and MP_PROTOCOL_VIOLATION, I have a preference for MP_ACK.",
          "createdAt": "2021-10-28T05:36:56Z",
          "updatedAt": "2021-10-28T05:36:56Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "I_kwDOGNtpaM49z2LI",
      "title": "Add \"Path\" to the terminology section",
      "url": "https://github.com/quicwg/multipath/issues/63",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "Consider adding this entry to the terminology section:\r\n\r\n`- Path: refers to the 4-tuple {source IP address, source port number, destination IP address, destination port number}. A path refers to \"network path\" used in {{QUIC-TRANSPORT}}.`\r\n\r\nThis also clarifies the link with \"network path\" in RFC9000.",
      "createdAt": "2021-10-27T05:47:43Z",
      "updatedAt": "2022-01-12T09:19:43Z",
      "closedAt": "2022-01-12T09:19:42Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-01-12T09:19:42Z",
          "updatedAt": "2022-01-12T09:19:42Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "I_kwDOGNtpaM49z3Ha",
      "title": "Mention the exact section whenever RFC9000 is cited",
      "url": "https://github.com/quicwg/multipath/issues/64",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "RFC9000 is cited massively in the draft. It would be helpful to indicate to the reader where to look by indicating the section. \r\n\r\nSome change examples are provided below: \r\n```\r\n\r\nOLD:\r\n`We assume that the reader is familiar with the terminology used in {{QUIC-TRANSPORT}}.`\r\n\r\nNEW:\r\n`We assume that the reader is familiar with the terminology used in {{QUIC-TRANSPORT}} (Section 1.2, in particular).`\r\n```\r\n\r\n```\r\nOLD:\r\n`RTT measurements and PMTU discovery should be per-path (following {{QUIC-TRANSPORT}})`\r\n\r\nNEW:\r\n`RTT measurements and PMTU discovery should `be` per-path (Section 14 of {{QUIC-TRANSPORT}})`\r\n```\r\n\r\nand so on.",
      "createdAt": "2021-10-27T05:55:15Z",
      "updatedAt": "2021-10-29T15:00:05Z",
      "closedAt": "2021-10-29T15:00:05Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Side comment -- please see issue #58 about the use of XML2RFC v3 syntax for links.\r\n\r\nWe can do some of that, but not necessarily everywhere. We do expect that readers are familiar with QUIC V1. If we want to say \"we are just in line with QUIC V1\", then a global reference to RFC 9000 should suffice. If we want to say \"please read this text in QUIC V1, we don't want to replicate here\", then yes, we should refer to the specific section.",
          "createdAt": "2021-10-27T06:22:55Z",
          "updatedAt": "2021-10-27T06:22:55Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "Thanks, Christian. That's the intent. ",
          "createdAt": "2021-10-28T05:37:46Z",
          "updatedAt": "2021-10-28T05:37:46Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "I_kwDOGNtpaM49z3aH",
      "title": "QUIC version 1 (very minor)",
      "url": "https://github.com/quicwg/multipath/issues/65",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "In order to be consistent with RFC9000, use \"QUIC version 1\" instead of \"QUIC v1\" through the document. \r\n\r\n\r\n\r\n",
      "createdAt": "2021-10-27T05:57:32Z",
      "updatedAt": "2021-10-28T13:16:17Z",
      "closedAt": "2021-10-28T13:16:17Z",
      "comments": []
    },
    {
      "number": 66,
      "id": "I_kwDOGNtpaM49z6Xt",
      "title": "Handshake Negotiation",
      "url": "https://github.com/quicwg/multipath/issues/66",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "* Lack of the reference to Section 7.4/Section 7.4.2 of 9000 where the general handling of (new) transport parameters is discussed. \r\n\r\n* When the new transport parameter is not present, this does not necessarily mean multipath is not supported as it can be supported, but disabled (for this connection as a function of local policy). I would update this text\r\n\r\n```\r\nOLD: \r\nIf the peer does not carry the enable_multipath transport parameter, which means the peer does not\r\nsupport multipath\r\n```\r\n",
      "createdAt": "2021-10-27T06:16:00Z",
      "updatedAt": "2021-10-28T07:06:45Z",
      "closedAt": "2021-10-28T07:06:45Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The absence of the parameter does indeed indicate that the peer will not support multipath for this connection. But yes, the current text does not read too well. I think we should simplify and just say the same as QUIc V1, i.e. \"Transport parameters have a default value of 0 if the transport parameter is absent\". So something like:\r\n```\r\nIf the transport parameter is absent, the value 0 is assumed, i.e., no support for multipath.\r\nEndpoint MUST fallback to {{QUIC-TRANSPORT}} with single path and MUST NOT use\r\nany frame or mechanism defined in this document.\r\n```\r\n\r\n\r\n",
          "createdAt": "2021-10-27T06:34:01Z",
          "updatedAt": "2021-10-27T06:34:01Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The negotiation only refers to \"support for this connection\". We cannot make any statement about whether the same server might negotiate the feature in another connection attempt. There is no practical difference between \"not supported\" and \"supported, but disabled\". It could very well be for example that some server in a farm support the feature and some don't.",
          "createdAt": "2021-10-27T06:54:05Z",
          "updatedAt": "2021-10-27T06:54:05Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@boucadair, please review PR #67 ",
          "createdAt": "2021-10-27T06:57:23Z",
          "updatedAt": "2021-10-27T06:57:23Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "I_kwDOGNtpaM490ErH",
      "title": "Servers stop using a path",
      "url": "https://github.com/quicwg/multipath/issues/68",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I wonder whether this behavior would nullify the activation of multipath in some cases (e.g., backup purposes or when MP_ACKs are not sent over the same path).  \r\n\r\n```\r\n Servers\r\n   SHOULD stop sending traffic on paths through where no non-probing\r\n   packet was received in the last 3 path RTTs, but MAY ignore that rule\r\n   if it would disqualify all available paths.\r\n```\r\n\r\nThe implication on the client should be discussed, especially that the I-D says: \r\n\r\n```\r\n   ACK_MP frame Section 10.2 can be returned via either a different\r\n   path, or the same path identified by the Path Identifier, based on\r\n   different strategies of sending ACK_MP frames.\r\n```\r\n(BTW, s/ACK_MP frame Section 10.2/ACK_MP frame (Section 10.2) ",
      "createdAt": "2021-10-27T07:16:46Z",
      "updatedAt": "2021-10-27T07:22:52Z",
      "closedAt": "2021-10-27T07:22:52Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think there is already issue #51 that discusses this. The idea would be to periodically trigger a PING frame when the path is \"unused\".",
          "createdAt": "2021-10-27T07:19:37Z",
          "updatedAt": "2021-10-27T07:19:37Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "Thanks @qdeconinck. Will move my comments there. ",
          "createdAt": "2021-10-27T07:22:52Z",
          "updatedAt": "2021-10-27T07:22:52Z"
        }
      ]
    },
    {
      "number": 75,
      "id": "I_kwDOGNtpaM4-WSyw",
      "title": "Handshake negotiation: what does \"Allowed server responses\" mean",
      "url": "https://github.com/quicwg/multipath/issues/75",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "In Section 2 you define a transport parameter and set of values. These are presented in a table with a column header \"Allowed server responses\", what does that mean? One way to read this is that it implies servers would tailor their Transport Parameters to the value sent by the client but that's conflicting with our philosophy that TPs are unilateral declarations, not active negotiation.\r\n\r\nSo the question for me is, is this just a wording issue or a design one?",
      "createdAt": "2021-11-05T16:29:58Z",
      "updatedAt": "2021-11-06T08:30:49Z",
      "closedAt": "2021-11-06T08:30:49Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this mainly means that server are not allow to send 0x3. However, if the client sends 0x3, the server's reply will impact the client behaviour for 1-RTT packets. Is that a negotiation? However, keep in mind that the intention is not to publish this as it.",
          "createdAt": "2021-11-05T16:34:37Z",
          "updatedAt": "2021-11-05T16:34:37Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "unilateral negotiation is ok by me. If that's the intent then maybe just rewording of the table to be clariy it is a matrix of combinations is ok, and state somewhere that server 0x3 is illegal.\r\n\r\n> keep in mind that the intention is not to publish this as it.\r\n\r\ndo you mean not to adopt the draft with this type of TP, or the final RFC? I think better clarity is needed for implementation and experiementation as we try and answer the PN question",
          "createdAt": "2021-11-05T16:53:48Z",
          "updatedAt": "2021-11-05T16:53:48Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@LPardue that's my fault. I wrote that table based on my implementation, in which the server response does depend on the client proposal. We should replace it by a matrix showing what is expected if the client proposes 0-1-2-3 and the server 0-1-2-3. The only problematic case is \"3 and 3\", and we should simply state what happens there.",
          "createdAt": "2021-11-05T17:01:47Z",
          "updatedAt": "2021-11-05T17:01:47Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@LPardue please review PR #76",
          "createdAt": "2021-11-05T17:47:41Z",
          "updatedAt": "2021-11-05T17:47:41Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "@huitema thanks for the clarification, the new text makes the intent much more clear IMO.",
          "createdAt": "2021-11-05T18:03:45Z",
          "updatedAt": "2021-11-05T18:03:45Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Just to clarify, we are not intending to have this in the final *RFC*. We would like to have it adopted as it to enable more experimentation.",
          "createdAt": "2021-11-05T19:38:39Z",
          "updatedAt": "2021-11-05T19:38:39Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "thanks @mirjak that also works for me!",
          "createdAt": "2021-11-05T19:51:43Z",
          "updatedAt": "2021-11-05T19:51:43Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "I_kwDOGNtpaM4-X7jr",
      "title": "Do we need ack frequency control per path?",
      "url": "https://github.com/quicwg/multipath/issues/77",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "separate draft"
      ],
      "body": "In our testing, one thing worth noticing is that for different sim cards, the uplink/downlink ratio can be quite different. For example, with a China Mobile 4G card, we measured a downlink at 35Mbps and an uplink at 3Mbps, while with a China Telecom 4G card, we measured a downlink at 45Mbps and an uplink at 23Mbps at the same time in the same spot. \r\n\r\nIf we want to measure RTT more precisely, we let ACK return from the same path. However, because some sim cards are more asymmetrical than the others, it introduced a question, do we want ack frequency control per path?\r\n\r\nIn the QUIC ack-frequency draft, one of the motivations is to handle link asymmetry such that the link throughput won't be constraint by ack packets in the reverse direction. My understanding is that some 5G IoT cards can be more asymmetrical, so do we want to add a mechanism to address this issue? What do you think?",
      "createdAt": "2021-11-06T08:27:09Z",
      "updatedAt": "2022-07-06T15:20:50Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is likely rather a separate extension. There are actually two questions here: 1) the per-path ack frequency and 2) guidance on which path to use for acks. ",
          "createdAt": "2022-01-11T12:22:45Z",
          "updatedAt": "2022-01-11T18:44:31Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that 1) should be an extension of the draft-ietf-quic-ack-frequency. 2) probably deserves some further discussion in the current draft (maybe track this in #33?).",
          "createdAt": "2022-01-11T15:17:13Z",
          "updatedAt": "2022-01-11T15:17:13Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Might be best to open a new separate issue on guidance for sending acks.",
          "createdAt": "2022-01-11T18:45:01Z",
          "updatedAt": "2022-01-11T18:45:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "opened issue #123  now for ACK guidance. ",
          "createdAt": "2022-07-06T15:20:50Z",
          "updatedAt": "2022-07-06T15:20:50Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "I_kwDOGNtpaM4-nJlM",
      "title": "[single packet number space] talk about ack delay measurement",
      "url": "https://github.com/quicwg/multipath/issues/79",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "To estimate path delay accurately, loss recovery of QUIC utilizes the ACK Delay field of ACK frame (see [RFC 9002; section 5.3.2](https://quicwg.org/base-drafts/rfc9002.html#section-5.3-2)).\r\n\r\nHowever, when single packet number space is being used, it is difficult for the sender to obtain ACK Delay for all the paths being used, because ACK Delay is reported only for the packet carrying the largest packet number. It is the only the ACK delay of the path with shortest path-delay that can be reported.\r\n\r\nI think it might be a good idea to acknowledge this shortcoming in the documentation, so that we do not miss the downside when we compare the approaches (or when we try to address the shortcomings of the single packet number space approach).",
      "createdAt": "2021-11-11T00:25:58Z",
      "updatedAt": "2022-01-19T11:20:53Z",
      "closedAt": "2022-01-19T11:20:53Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that this issue should be addressed in the current draft. Regarding the problem itself, I think using the one-way timestamp can solve this problem for single PN.",
          "createdAt": "2021-11-11T07:50:54Z",
          "updatedAt": "2021-11-11T07:50:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this is discussed in section 5: https://mirjak.github.io/draft-lmbdhk-quic-multipath/draft-lmbdhk-quic-multipath.html#name-computing-path-rtt\r\n\r\nCan you propose a PR if you think more text is useful?!",
          "createdAt": "2022-01-11T12:36:13Z",
          "updatedAt": "2022-01-11T12:36:22Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think Section 5 should relate to both packet number space designs, while this issue is specific to one. I summarised the discussion in #85.",
          "createdAt": "2022-01-11T15:53:59Z",
          "updatedAt": "2022-01-11T15:53:59Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "We move section 5 from the single packet number section into an own section, as we agreed that it is applicable to both cases as we don't require ack to be send on the same path and the packet was received.\r\n\r\nI also don't understand the point about being only able to measure the shortest path with a single PN space. It kind of randomly depends on with packet you ack as discussed in section 5.\r\n\r\nIf we want to add some additional consideration we should probably add them to section 5.",
          "createdAt": "2022-01-11T18:36:43Z",
          "updatedAt": "2022-01-11T18:36:43Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, there is an issue with single space here. Suppose that the sender sends packets 1 and later 3 on path long delay path A, packets 2 and later 4 on short delay path B. The receiver will get the packets in the order 2, 1, 4, 2. The ACK will be:\r\n\r\n* ACK, highest = 2. Ack delay = time ACK sent minus time 2 received.\r\n* ACK, highest = 2, also ACK 1. Ack delay = time ACK sent minus time 2 received.\r\n* ACK, highest = 4, also ACK 2 and 1. Ack delay = time ACK sent minus time 4 received.\r\n* ACK, highest = 4, also ACK 3, 2 and 1. Ack delay = time ACK sent minus time 4 received.\r\n\r\nThe RTT of path B will be evaluated precisely, with the help of the ACK delay. The RTT of path A will be evaluated less precisely. When the ACK of 2 and 1 is received, the sender cannot use the ACK delay to narrow the estimate of the RTT of path A. Same for packet 4.",
          "createdAt": "2022-01-11T21:35:47Z",
          "updatedAt": "2022-01-11T21:35:47Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "I_kwDOGNtpaM4_iJx8",
      "title": "Stream scheduling",
      "url": "https://github.com/quicwg/multipath/issues/81",
      "state": "CLOSED",
      "author": "markusa",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "separate draft"
      ],
      "body": "As RFC9000 provides the handling of streams, I wonder if a MP-QUIC has to consider this as well, at least in a section similar to the exisiting \"Packet scheduling\" one?\r\n\r\nTo become more precise, assuming within one MP-QUIC connection the availability of different streams with different demands. Maybe one stream is \"best effort\", while another is latency critical and expects in-order devilery. In a multipath scenario using a DSL and a cellular access, there might be the wish to send the latency critical stream through DSL prioritized over other streams, while the \"best effort\" stream then keeps access to the remaining DSL capacity + the cellular capacity.",
      "createdAt": "2021-11-29T11:20:16Z",
      "updatedAt": "2022-01-20T08:01:34Z",
      "closedAt": "2022-01-20T08:01:33Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We discussed stream scheduling in the sec.7.3 of the previous draft https://datatracker.ietf.org/doc/html/draft-liu-multipath-quic-04. I agree, in practice, what you mention is important, and in our implementation, we use stream group that consists of streams of different policies. The reason we did not discuss the issue in the new draft was that we were trying to focus on the most fundamental issues of multi-path. I think the scheduling part are considered as more advanced features of multi-path, which may be addressed in an extension draft.",
          "createdAt": "2021-11-30T09:11:12Z",
          "updatedAt": "2021-11-30T09:11:12Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, detailed scheduling algorithms are out-of scope for this document. However, I think it could be useful that add a sentence to the packet scheduling section saying that stream-aware scheduling is likely beneficial. ",
          "createdAt": "2021-11-30T10:45:07Z",
          "updatedAt": "2021-11-30T10:45:07Z"
        },
        {
          "author": "markusa",
          "authorAssociation": "NONE",
          "body": "@mirjak I wonder in generell how you want to perform path and stream scheduling without having indications about path/stream priorities and availability which can be used then from the stream/path scheduling process, also at the far-end?\r\nLook for example at MPTCP RFC8684 MP_PRIO as well as the backup bit, or compare it to the enhanced definition for MP_PRIO in MP-DCCP https://datatracker.ietf.org/doc/html/draft-ietf-tsvwg-multipath-dccp-02#section-3.2.10.",
          "createdAt": "2021-11-30T14:06:56Z",
          "updatedAt": "2021-11-30T14:06:56Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Without any additional knowledge it's a sender side decision which path to use. If you want to provide any additional input from the receiver side, this should be a separate extension.",
          "createdAt": "2021-11-30T14:44:17Z",
          "updatedAt": "2021-11-30T14:44:17Z"
        },
        {
          "author": "markusa",
          "authorAssociation": "NONE",
          "body": "Shouldn't be the exchange of path/stream prios be a fundamental part of a MP protocol?\r\nI wonder if delegating too much, especially fundamental things, into follow-up extensions will cause confusion and complexity.",
          "createdAt": "2021-12-02T10:24:12Z",
          "updatedAt": "2021-12-02T10:24:12Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Different applications use streams in different ways, and that can lead to very different solutions. For example, you may have a mental model of an application use one stream for video, another for audio, and another for data, but there are applications that use one separate stream for each video frame, leading to very different ways of doing scheduling. Or, we see what Ali Baba has done for video download, using redundant transmission on multiple paths to minimize buffering of videos. That's very interesting, but is very different from simply scheduling streams on specific paths. \r\n\r\nWe are barely scratching the surface of what can be possible. Scheduling decisions depend on applications, and applications are not blocked. Information about priorities, expected completion time and the like can be carried in application protocols. Nothing stops developers of QUIC stack from providing applications with scheduling control APIs. Delaying standardization of scheduling will not stop deployments. It seems prudent to not standardize too soon.\r\n",
          "createdAt": "2021-12-02T17:41:21Z",
          "updatedAt": "2021-12-02T17:41:21Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We can adapt https://datatracker.ietf.org/doc/draft-bonaventure-iccrg-schedulers/ and submit it to the QUIC WG to discuss those issues in a separate draft.",
          "createdAt": "2022-01-11T15:55:38Z",
          "updatedAt": "2022-01-11T15:55:38Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that this belongs in a separate draft.",
          "createdAt": "2022-01-11T21:37:37Z",
          "updatedAt": "2022-01-11T21:37:37Z"
        },
        {
          "author": "markusa",
          "authorAssociation": "NONE",
          "body": "@obonaventure happy to help here, if I can.",
          "createdAt": "2022-01-20T08:01:33Z",
          "updatedAt": "2022-01-20T08:01:33Z"
        }
      ]
    },
    {
      "number": 86,
      "id": "I_kwDOGNtpaM5Bhtou",
      "title": "Stream-level and flow-level controls",
      "url": "https://github.com/quicwg/multipath/issues/86",
      "state": "OPEN",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "separate draft"
      ],
      "body": "QUIC defines different ways that enable a host to control the amount of data that the other host can transmit at the connection level (MAX_DATA) and at the stream level (MAX_STREAMS and MAX_STREAMS_DATA).\r\n\r\nThe MAX_STREAMS and MAX_STREAMS_DATA relate to the connection and should not be affected by the fact that it uses multiple paths.\r\n\r\nFor MAX_DATA, the situation is a bit different. There are deployments and applications that would like to restrict the amount of data or bandwidth that is sent on a given path. A typical example is a smartphone that does not want to use too much data on cellular but has no restriction on WiFi. As in MPTCP, we need a connection-level MAX_DATA that limits the amount of data which can be in flight. In MPTCP, this corresponds to the receive window and the same window is advertised over all subflows. We could not do better than this within the IETF. \r\n\r\nIn MPQUIC, there is an opportunity to send a per-path MAX_DATA to restrict the utilization of a path or define other control frames to specify the maximum allowed bandwidth per path. \r\n\r\nWe might discuss whether we should include this functionality in version 1 or leave it to another draft.\r\n\r\n",
      "createdAt": "2022-01-11T16:10:36Z",
      "updatedAt": "2022-01-12T10:35:30Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it is useful to restrict the amount of data on a particular interface. But I am not sure if the best way is per-path MAX_DATA. For example, a path on a 4G interface can be teared down and setup multiple times during the lifetime of a connection. I guess the real purpose here is to put a limit on the total amount of data sent an interface, rather than a path with a particular path ID ? It seems difficult to calculate a per-path quota in advance, since we don't know how many times we are going to abandon and re-establish a path on that interface.",
          "createdAt": "2022-01-11T23:56:27Z",
          "updatedAt": "2022-01-11T23:56:27Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "MAX DATA is not at all equivalent to the flow control in TCP. For example, it only applies to the amount of bytes sent in stream frames, would not apply for example to video sent in Datagram frames, let alone ACKs and other control frames. It counts only the new stream bytes, which means a packet sent multiple times would only be counted once.\r\n\r\nWe know that we will need complementary drafts. The per path control seems like something for one of these drafts, maybe some form of advance scheduling.",
          "createdAt": "2022-01-12T01:00:39Z",
          "updatedAt": "2022-01-12T01:00:39Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To me, it seems that additional mechanisms are required to implement the scenario where you want to limit the number of total bytes (not unique ones) over a given path, and in particular [DATAGRAM frames are not subject to flow control](https://www.ietf.org/archive/id/draft-ietf-quic-datagram-07.html#name-flow-control). As this looks like a form of path prioritisation, maybe should we delegate this in a separate draft?",
          "createdAt": "2022-01-12T08:24:54Z",
          "updatedAt": "2022-01-12T08:24:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think this is related to scheduling and probably also prioritisation and QoS signalling, which should go into a separate draft.",
          "createdAt": "2022-01-12T09:16:47Z",
          "updatedAt": "2022-01-12T09:16:47Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed with your responses. I would suggest to add a sentence in the current draft indicating something like.\r\n\r\nWhen used with multipath QUIC, the stream and flow level control mechanisms defined in RFC9000 apply to the entire connection. This document does not specify how restriction or prioritization can be applied to specific paths.",
          "createdAt": "2022-01-12T10:35:30Z",
          "updatedAt": "2022-01-12T10:35:30Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "I_kwDOGNtpaM5BmOFi",
      "title": "ECN support and single/multiple packet number spaces",
      "url": "https://github.com/quicwg/multipath/issues/87",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has PR",
        "design",
        "needs-discussion"
      ],
      "body": "With a packet number space per path, the ACK_MP frame provides the per path ECN feedback that enables a sender to detect congestion using ECN on a specific path. The per-path congestion control can adjust the congestion window based on the received feedback.\r\n\r\nWith a single packet number space shared among the different paths, the ECN fields of the ACK frame provide ECN information that is common to all paths. This makes it impossible for a sender to determine which path is affected by congestion when it receives an ACK frame with positive ECN counters. A per-path congestion control cannot easily react to such an ambiguous ECN feedback.",
      "createdAt": "2022-01-12T16:24:11Z",
      "updatedAt": "2022-07-07T15:56:08Z",
      "closedAt": "2022-07-07T15:56:08Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a very point and should also be consider in the discussion on one vs. multiple PNSs. I will try to make a text proposal for the draft to explain the problem. I think for the single number space approach this means that you cannot use ECN or you need to specify a new ECN ACK frame. I guess that could be a separate draft or in this draft but maybe we just leave this open for now as long as we didn't decide for one or the other approach.",
          "createdAt": "2022-03-03T17:12:50Z",
          "updatedAt": "2022-03-03T17:12:50Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Briefly discussed at IETF-113. One comment that we should support ECN.",
          "createdAt": "2022-03-23T14:44:40Z",
          "updatedAt": "2022-03-23T14:44:40Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "ECN text is included in PR #103 now.",
          "createdAt": "2022-07-06T15:22:05Z",
          "updatedAt": "2022-07-06T15:22:05Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "#103 was merged.",
          "createdAt": "2022-07-07T15:56:08Z",
          "updatedAt": "2022-07-07T15:56:08Z"
        }
      ]
    },
    {
      "number": 89,
      "id": "I_kwDOGNtpaM5Bmf8M",
      "title": " Congestion Control, RTT measurements and PMTU discovery should be per-path ",
      "url": "https://github.com/quicwg/multipath/issues/89",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "The sentence above is part of the introduction, but the should is misleading for congestion control at least (we have a MUST for per-path congestion control later).\r\n\r\nI would suggest to split the above sentence in two parts:\r\n-  Congestion Control must be performed per-path \r\n-  Path MTU should be performed per path\r\n\r\nWe should probably list somewhere in the document the state that must/should be maintained on a per-path basis and the state that is related to the connection. This could clarify some of the mechanisms.\r\n\r\nConcerning PathMTU, I would suggest to stay with a should and not a must since an implementation could simply track the minimum MTU among the different paths without maintaining per-path MTU. Such an implementation would work and if the MTUs do not differ significantly, it would probably be simpler than an implementation than maintains per-path MTU and needs to adjust the packets based on the path where each packet is sent.\r\n\r\nConcerning RTT, we discuss the problem of measuring the RTT later with the packet number spaces discussion. Furthermore, some congestion control schemes need an accurate per-path RTT while others do not strictly require rtt estimations. ",
      "createdAt": "2022-01-12T17:33:01Z",
      "updatedAt": "2022-03-07T07:54:53Z",
      "closedAt": "2022-03-07T07:54:53Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@obonaventure this \"should\" in the intro was not meant to be normative. However, I anyway created PR #98 to clarify. \r\n\r\nHowever, I didn't address your point about having a list of all state. Do we really need that? If so, where does that below? A new section somewhere? Can you provide such a list or create a PR? Or should we open a new separate issue for that?",
          "createdAt": "2022-03-03T18:41:27Z",
          "updatedAt": "2022-03-03T18:41:27Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that specifying PMTUD per path is a good idea. We do have a slight ambiguity, because the draft uses the overlapping notions of \"path\" and \"number space\", with the number space tied to the DCID of packets. The DCID may change over time for privacy reasons, or because the server wants to retire old CIDs tied to a previous configuration of the load balancer. In these cases, there is no need to restart PMTUD or reset congestion control.",
          "createdAt": "2022-03-03T19:27:37Z",
          "updatedAt": "2022-03-03T19:27:37Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "I_kwDOGNtpaM5Byrf2",
      "title": "A path can be active even if it does not carry packets in both directions since ACKs can be returned on another path",
      "url": "https://github.com/quicwg/multipath/issues/90",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "In 3.2.3, we have the following paragraph:\r\n\r\n     When more than one path is available, servers shall monitor the arrival of non-probing packets on the available paths. Servers   \r\n     SHOULD stop sending traffic on paths through where no non-probing packet was received in the last 3 path RTTs, but MAY\r\n     ignore that rule if it would disqualify all available paths. To avoid idle timeout of a path, endpoints can send ack-eliciting packets\r\n     such as packets containing PING frames Section 19.2 of [QUIC-TRANSPORT] on that path to keep it alive. Sending periodic\r\n     PING frames also helps prevent middlebox timeout, as discussed in Section 10.1.2 of [QUIC-TRANSPORT].\r\n\r\nThis paragraph implicitly indicates that we consider a path to be active if we send and receive packets on this path. This definition works well for MPTCP where each data packet triggers an ACK on the same path. In MPQUIC, a server could have two paths that it uses to send data. However, the client might decide to always send the ACKs on only one path (e.g. the lowest delay one). In this case, the two paths are clearly active, but the server could consider the higher delay path to be inactive since it does not receive packets over this path. It could send PING frames to trigger data packets, but then it would need to send one PING every 3 RTT, which seams excessive. \r\n\r\nI would suggest to rewrite the text as follows (I removed Server, because I think the recommendation should be generic):\r\n\r\n     When more than one path is available, hosts shall monitor both the arrival of non-probing packets and the acknowledgements \r\n     for the packets sent over each path. Hosts SHOULD stop sending traffic on paths whether either: (a) no non-probing packet\r\n     was received in the last 3 path RTT or (b) no non-probing packet sent over this path was acknowledged during the last 3 path \r\n     RTT, but MAY ignore that rule if it would disqualify all available paths. To avoid idle timeout of a path, endpoints can send \r\n     ack-eliciting packets such as packets containing PING frames Section 19.2 of [QUIC-TRANSPORT] on that path to keep \r\n     it alive. Sending periodic PING frames also helps prevent middlebox timeout, as discussed in Section 10.1.2 of [QUIC-TRANSPORT].\r\n",
      "createdAt": "2022-01-14T15:37:35Z",
      "updatedAt": "2022-03-07T04:40:22Z",
      "closedAt": "2022-03-07T04:40:22Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The word \"either\" means that STOP sending becomes true If either (a) is true or (b) is true. If I understand correctly, the actual meaning is to use the word \"both\" here, instead. So stop sending if both (a) no non-probing packets received and (b) no packets was acknowledged.",
          "createdAt": "2022-01-20T09:07:58Z",
          "updatedAt": "2022-01-20T09:07:58Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think this is a good clarification and yes \"either\" might be confusing here. ",
          "createdAt": "2022-01-20T10:59:03Z",
          "updatedAt": "2022-01-20T10:59:03Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I commented on the PR. I don't like the idea that receivers would have to stop acknowledging packets in order to signal preference to not use a path. We need to think that a little more.",
          "createdAt": "2022-02-02T19:39:38Z",
          "updatedAt": "2022-02-02T19:39:38Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So we have a choice:\r\n\r\n* either say that nodes should regularly send non-probing packets over the path that they want to keep using,\r\n* or if we don't want that, accept the idea that acks on other paths show continuity, and require \"abandon path\" to terminate a path that is otherwise working, acknowledges packets, etc..",
          "createdAt": "2022-02-02T19:51:40Z",
          "updatedAt": "2022-02-02T19:51:40Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think the second option is what we are aiming for with the new text. Stopping ack'ing packets to stop someone sending on a path is wrong and is something you should never do. If you receive a packet successfully you should ack it (also because that would otherwise confuse congestion control). But we have the abandon frame exactly for that case.\r\n\r\nHowever, it also seems wrong to me to require sending acks on the same path taen the data is received. So if you decide to always only send ack on one path and all payload data flows into one direction only over multiple paths, the current text would require you to send potentially unnecessary ping packets over each non-ack'ing paths or you would end up closing those paths which also is wrong as everything seems to work fine.\r\n\r\nSo the question is really is, do we want to require pings in this scenario (payload traffic over multiple paths but acks only on one path) in order to ensure that all paths are usable bidirectionally? I think that's unnecessary overhead and believe Olivier's proposed addition is the correct thing to do.",
          "createdAt": "2022-02-03T09:59:01Z",
          "updatedAt": "2022-02-03T09:59:01Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can look at what I implemented in picoquic:\r\n\r\n* If there is no traffic in either direction for the idle period, the path is automatically abandoned. If traffic is sent and acked, or traffic is received, the path is not considered idle. This is pretty much what Olivier proposed.\r\n* If there is a \"timer loss\", and if there is an alternate, the path is put in a low priority list. The node will send ping and try get an ack. If no ack is received after N trials, the path is abandoned.\r\n* If \"abandon path\" frame is received, the path is abandoned.",
          "createdAt": "2022-02-03T19:02:24Z",
          "updatedAt": "2022-02-03T19:02:24Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I marked this issue as editorial as we have an editorial PR for it. However, I open a new issue for the per path idle timeout discussion (#95).\r\n\r\nDo we need another issue to clarify path closure or sending of keep-alive traffic? However this might be covered in other parts of the draft already...? ",
          "createdAt": "2022-02-09T09:28:13Z",
          "updatedAt": "2022-02-09T09:28:13Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "I_kwDOGNtpaM5B-kw_",
      "title": "Existing transport parameters",
      "url": "https://github.com/quicwg/multipath/issues/91",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "RFC9000 defines a list of transport parameters.\r\n\r\n0x01 | max_idle_timeout | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x02 | stateless_reset_token | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x03 | max_udp_payload_size | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x04 | initial_max_data | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x05 | initial_max_stream_data_bidi_local | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x06 | initial_max_stream_data_bidi_remote | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x07 | initial_max_stream_data_uni | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x08 | initial_max_streams_bidi | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x09 | initial_max_streams_uni | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0a | ack_delay_exponent | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0b | max_ack_delay | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0c | disable_active_migration | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0d | preferred_address | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0e | active_connection_id_limit | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0f | initial_source_connection_id | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x10 | retry_source_connection_id | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG]\r\n\r\n\r\nThese transport parameters apply to all the paths that compose a Multipath QUIC connection. We should probably confirm this in the mpquic draft to avoid any misinterpretation (e.g. for max_idle_timeout or ack delays). There are two transport parameters that could warrant some discussion:\r\n\r\n- disable_active_migration : This transport parameter is incompatible with enable_multipath. An endpoint that receives both this transport parameter and a non zero enable_multipath parameter MUST treat this as a connection error of type\r\nMP_CONNECTION_ERROR and close the connection.\r\n- preferred_address: RFC9000, section 9.2.1 contains the following:\r\n\r\n   Once the handshake is confirmed, the client SHOULD select one of the two addresses provided by the server and initiate path    \r\n  validation (see Section 8.2). A client constructs packets using any previously unused active connection ID, taken from either the \r\n  preferred_address transport parameter or a NEW_CONNECTION_ID frame.\r\n\r\n  As soon as path validation succeeds, the client SHOULD begin sending all future packets to the new server address using the \r\n  new connection ID and discontinue use of the old server address. If path validation fails, the client MUST continue sending all \r\n  future packets to the server's original IP address.\r\n\r\nFor multipath, do we want to be stronger than SHOULD select one ? Can a client create news paths towards the initial address or only to one of the preferred addresses ? Should the client use both addresses (IPv4 and IPv6) if non-empty ?",
      "createdAt": "2022-01-18T13:39:57Z",
      "updatedAt": "2022-03-07T04:25:25Z",
      "closedAt": "2022-03-07T04:25:25Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good point about \"disable_active_migration\". I would read it as also disabling multipath.\r\n\r\nWe do not need to say that \"transport parameters apply to all the paths that compose a Multipath QUIC connection\". We are already inheriting that property from compatibility with path migration in RFC 9000. Multipath support is an extension to QUIC v1, not a new protocol, so we do not need to specify all the defaults. Same goes for the preferred address -- meaning does not change just because the nodes negotiate multipath.\r\n\r\nI would avoid debating \"which server addresses the client can try\" in the base multipath document. If we want the server to signal plausible addresses to the client, let's have a specific document for that.\r\n",
          "createdAt": "2022-01-18T19:43:42Z",
          "updatedAt": "2022-01-18T19:43:42Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I would maybe add a sentence that this draft does not change the meaning of preferred_address and if that address could also be used for multipath is out of scope for this extension.",
          "createdAt": "2022-02-02T12:27:32Z",
          "updatedAt": "2022-02-02T12:27:32Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding disable_active_migration: this cannot be a connection error, as you can also send preferred address and after migration to the preferred address you can still use migration or multipath (if negotiated). I think the definition in RFC9000 is still valid; it means you can't send any packets from another address than the one used in the handshake. Which effectively means disabling multipath as well as Christian noted (if not moved to another preferred address). I guess we could explicitly note that this draft does not change the definition of disable_active_migration. \r\n\r\nFor your reference this is what RFC9000 says:\r\n```\r\ndisable_active_migration (0x0c):\r\nThe disable active migration transport parameter is included if the endpoint does not support active \r\nconnection migration (Section 9) on the address being used during the handshake. An endpoint\r\nthat receives this transport parameter MUST NOT use a new local address when sending to the\r\naddress that the peer used during the handshake. This transport parameter does not prohibit\r\nconnection migration after a client has acted on a preferred_address transport parameter.\r\nThis parameter is a zero-length value.\r\n```",
          "createdAt": "2022-02-02T12:36:23Z",
          "updatedAt": "2022-02-02T12:36:53Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created a PR in #99. Is this sufficient to address this issue or do we need to say more? @obonaventure ?",
          "createdAt": "2022-03-03T19:08:11Z",
          "updatedAt": "2022-03-03T19:08:11Z"
        }
      ]
    },
    {
      "number": 92,
      "id": "I_kwDOGNtpaM5CGxjx",
      "title": "Inband priority exchange for stream/path scheduler",
      "url": "https://github.com/quicwg/multipath/issues/92",
      "state": "OPEN",
      "author": "markusa",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "separate draft"
      ],
      "body": "### Problem\r\nScheduling and re-ordering mechanism are usually out of scope of a multi-path standard and is up to implementers and/or separate IETF work. However, there might be the wish to align between sender and receiver the priority and usage of paths. Multi-path protocols like [MPTCP](https://datatracker.ietf.org/doc/html/rfc8684.html#section-2.5) and [MP-DCCP](https://datatracker.ietf.org/doc/html/draft-ietf-tsvwg-multipath-dccp-02#section-3.2.10), see this in scope and define therefore a `MP_PRIO` option.\r\n**So far, MP-QUIC does not define anything in this direction.**\r\nBeyond path scheduling MP-QUIC also offers stream multiplexing, where it can be useful to have a prioritization indication for stream schedulers at both ends. Per https://datatracker.ietf.org/doc/html/rfc9000#section-2.3, stream prioritization is so far not not part of QUIC v1.\r\n\r\n### Request\r\n**Define a prioritization exchange for paths and streams within the MP-QUIC draft.** \r\n\r\n### Benefit\r\nThis facilitates scenarios where both sides should apply the same path/stream prioritization (e.g. trigger a handover or respect cost) or the information about the sender prioritization is useful for e.g. re-ordering mechanisms on receiver side. While this can be applied in end-to-end scenarios it will be in particular useful for Hybrid Access and 3GPP ATSSS.\r\n\r\n\r\nBtw. that was the original question I intended to ask in #81 , but probably misleading :grinning:",
      "createdAt": "2022-01-20T09:38:09Z",
      "updatedAt": "2022-01-20T10:59:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This might be a bit related to issue #22. I believe we already decided that a more advanced priority scheme will not be part of the base draft, however, you can make a proposal for an additional extension to provide such a scheme in a separate draft.",
          "createdAt": "2022-01-20T10:52:30Z",
          "updatedAt": "2022-01-20T10:52:30Z"
        },
        {
          "author": "markusa",
          "authorAssociation": "NONE",
          "body": "I see that there was a consensus at least from the few people who engaged in the #22 discussion. In respect to the 3GPP ATSSS Rel. 18 development, where MP-QUIC was adopted (beside MP-DCCP) for the Study Phase, it's probably not useful to have too much defined outside the basic MP-QUIC draft?!",
          "createdAt": "2022-01-20T10:59:31Z",
          "updatedAt": "2022-01-20T10:59:31Z"
        }
      ]
    },
    {
      "number": 95,
      "id": "I_kwDOGNtpaM5DQA8q",
      "title": "Do we need a transport parameter to negotiate max path idle timeout?",
      "url": "https://github.com/quicwg/multipath/issues/95",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "yfmascgy"
      ],
      "labels": [
        "has PR",
        "design",
        "needs-discussion"
      ],
      "body": "This was discussed in issue #51 and PR #94.",
      "createdAt": "2022-02-09T09:25:51Z",
      "updatedAt": "2022-10-21T10:23:00Z",
      "closedAt": "2022-10-21T10:23:00Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Regarding the max_idle_timeout, RFC9000 says \"To avoid excessively small idle timeout periods, endpoints MUST increase the idle timeout period to be at least three times the current Probe Timeout (PTO).\" As in multi-path QUIC, the PTO is per-path, when max_idle_timeout is used to close a connection, it makes sense to set max_idle_timeout = 3*max(PTO_1, PTO_2). But when it comes to close a path, I am not sure if the timeout for path1 should also depend on the PTO of path 2?",
          "createdAt": "2022-03-03T23:30:44Z",
          "updatedAt": "2022-03-03T23:30:44Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think there are two idle timeouts: the \"connection idle timeout\" and the \"path idle timeout\".\r\n\r\nFor the \"connection idle timeout\", I agree that it should be at least 3*PTO_max. Triggering this timeout closes the connection.\r\n\r\nFor the \"path idle timeout\", this might be a way to have a stronger guarantee to stop using paths (closing them) after some inactivity than the text proposed in #94. Still, if we define such a mechanism, we need to know whether all paths should have the same path timeout value or not (in the latter case, a transport parameter might not be the best way).",
          "createdAt": "2022-03-04T12:59:47Z",
          "updatedAt": "2022-03-04T12:59:47Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would avoid having a different timer for a path than for a connection. That would make the protocol more complex without a lot of benefits. If a host wants to use a shorter timeout per path than the connection timeout, it can simply define it and use a PATH_ABANDON frame to indicate that the path is abandoned. \r\n\r\nHowever, we need to be clearer in 3.2.3 to indicate that a path can be considered valid if either packets are received on that path or packets sent on that path are acknowledged (possibly on another path)",
          "createdAt": "2022-03-04T17:32:34Z",
          "updatedAt": "2022-03-04T17:32:34Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Presented at IETF-113 but no time for discussion.",
          "createdAt": "2022-03-23T14:45:16Z",
          "updatedAt": "2022-03-23T14:45:16Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have submitted PR #124 to resolve this issue according to the above discussions.",
          "createdAt": "2022-07-07T09:01:47Z",
          "updatedAt": "2022-07-07T09:02:28Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "PR was merged but forgot to close issue...",
          "createdAt": "2022-10-21T10:23:00Z",
          "updatedAt": "2022-10-21T10:23:00Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "I_kwDOGNtpaM5FBv52",
      "title": "Choosing between a single packet number space vs. multiple packet number spaces",
      "url": "https://github.com/quicwg/multipath/issues/96",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "needs-discussion"
      ],
      "body": "This draft initially originates from a merging effort of previous Multipath proposals. While many points were found to be common between them, there remains one design point that still requires consensus: the number of packet number spaces that a Multipath QUIC connection should support (i.e., one for the whole connection vs. one per path).\r\n\r\nThe current draft enables experimentation with both variants, but in the final version we will certainly need to choose between one of the versions.",
      "createdAt": "2022-03-03T07:57:04Z",
      "updatedAt": "2022-07-07T09:19:17Z",
      "closedAt": "2022-07-07T09:19:17Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The main issues mentioned so far:\r\n\r\n* Efficiency. One number space per path should be more efficient, because implementations can directly reuse the loss-recovery logic specified for QUIC\r\n* ACK size. Single space leads to lots of out of order delivery, which causes ACK sizes to grow\r\n* Simplicity of code. Single space can be implemented without adding mane new code paths to uni-path QUIC\r\n* Shorter header. Single space works well with NULL length CID\r\n\r\nThe picoquic implementation shows that \"efficiency\" and \"ack size\" issues of single space implementations can be mitigated. However, that required significant improvements in the code:\r\n\r\n* to obtain good loss efficiency, picoquic remembers not just the path on which a packet was sent, but also the order of the packet on this path, i.e. a \"virtual sequence number\". The loss detection logic then operates on that virtual sequence number.\r\n\r\n* to contain ACK size, picoquic implements a prioritization logic to select the most important ranges in an ACK, avoid acking the same range more than 3 or 4 times, and keep knowledge of already acknowledged ranges so range coalescing works.\r\n\r\nI think these improvements are good in general, and I will keep them in the implementations whether we go for single space or not. The virtual sequence number is for example useful if the CID changes for reasons not related to path changes in multiple number space variants. It is also useful in unipath variants to avoid interference between sequence numbers used in probes and the RACK logic. The ACK size improvements do reduce the size of ACKs in presence of out of order delivery, e.g., if the network is doing some kind of internal load balancing. On the other hand, the improvements are somewhat complex, would need to be described in separate drafts, and pretty much contradicts the \"simplicity of code\" argument.\r\n\r\nSo we are left with the \"Null length CID\" issue. I see for cases:\r\n\r\nClient CID | Sender CID | Support | Priority\r\n-----------|------------|-----------|------------\r\nlong | long | Supported in both variants | Used by many implementations\r\nNULL | long | Requires special support in multiple spaces case, but could work | Preferred configuration of many big deployments\r\nlong | NULL | Requires special support in multiple spaces case, but could work | Rarely used, server load balancing does not work\r\nNULL | NULL | Does not work for multiple spaces | Only mentioned in some P2P deployments\r\n\r\nThe point here is that it is somewhat hard to deploy a large server with NULL CID and use server load balancing. This configuration is mostly favored by planned P2P deployments.",
          "createdAt": "2022-03-03T16:18:21Z",
          "updatedAt": "2022-03-03T16:18:21Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The big debate is for the configuration with NULL CID on client, long CID on server. The packets from server to client do not carry a CID, and only the last bytes of the sequence number. The client will need some logic to infer the full sequence number before decrypting the packet. The client could maybe use the incoming 5 tuple as part of the logic, but it is not obvious. It is much simpler to assume a direct map from destination CID to number space. That means, if a peer uses a NULL CID, all packets sent to that peer are in the same number space.",
          "createdAt": "2022-03-03T16:46:31Z",
          "updatedAt": "2022-03-03T16:46:31Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Revised table:\r\n\r\nClient CID | Sender CID | What\r\n-- | -- | -- \r\nlong | long | Multiple number space\r\nNULL | long | Multiple number spaces on client side (one per CID), single space on server side\r\nlong | NULL | Multiple number spaces on server side (one per CID), single space on client side\r\nNULL | NULL | single number space on each side\r\n\r\nIf a node advertises both NULL CID and multipath support, they SHOULD have logic to contain the size of ACK.\r\nIf a node engages in multipath with a NULL CID peer, they SHOULD have special logic to make loss recovery work well.\r\n",
          "createdAt": "2022-03-03T16:53:20Z",
          "updatedAt": "2022-03-03T16:53:52Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the above points to a possible \"unified solution\":\r\n\r\n* if multipath negotiated, tie number spaces to destination CID, use default (N=0) if NULL CID.\r\n* use multipath ack; in multipath ACK, identify number space by sequence number of DCID in received packets. Default that number to zero if received with NULL CID.\r\n* in ABANDON path, identify path either by DCID of received packets, SCID of sent packet, or \"this path\" (sending path) if CID is NULL.",
          "createdAt": "2022-03-03T18:36:52Z",
          "updatedAt": "2022-03-03T18:36:52Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like the proposal of the \"unified solution\". I think the elegance lies in the fact that it allows us to automatically cover all four cases listed above. The previous dilemma for me was that on one hand we have some use cases where we need to support more than two paths and separate PN makes the job easier, but on the other hand, I think we should not ignore the NULL CID use cases as it is also important. Now, with this proposal, a big part of the problem is solved. The rest of challenge is to make sure single PN remains efficient in terms of ACK and loss recovery. On that part, we plan to do an A/B test and would love to share the results when we get them.\r\n\r\nThere is one more problem as pointed in issue #25 , when we want to take hardware offloads into account. In such a case, we may still need single PN for long server CID.  However, if hardware supports nonce modification, this problem can be addressed with the proposed \"unified solution\".",
          "createdAt": "2022-03-03T22:48:16Z",
          "updatedAt": "2022-03-03T22:48:16Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If the APi does not support 96 bit sequence numbers, it should always be possible to create an encryption context per number space, using Key=current key and ID = current-ID + CID sequence number. Of course, that forces creation of multiple context, and that makes key rotation a bit harder to manage. But still, that should be possible.",
          "createdAt": "2022-03-03T23:26:23Z",
          "updatedAt": "2022-03-03T23:26:23Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the summary @huitema. I think one point is missing in your list which is related to issue #87. Use of a single packet number space might not support ECN.\r\n\r\nRegarding the unified solution: I think what you actually say is that we would specify both solutions and everybody would need to implement both logics. At least regarding the \"simplicity of code\" argument, that would be the worst choice.\r\n\r\nIf we can make the multiple packet number spaces solution work with one-sided CIDs, I'm tending toward such an approach. Use of multiple packet number spaces avoids ambiguity/needed \"smartness\" in ACK handling and packet scheduling which, as you say above, can make the implementation more complex and, moreover,  wrong decisions may have large impact on efficient (both local processing and on-the-wire). I don't think we want to leave these things to each implementation individually.",
          "createdAt": "2022-03-04T12:32:57Z",
          "updatedAt": "2022-03-04T12:32:57Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The summary Christian made above about design comparison sounds indeed quite accurate. Besides ECN, my other concern about single packet number is that it require cleverness from the receiver side if you want to be performant in some scenarios. At the sender-side, you need to consider a path-relative packet number threshold instead of an absolute one to avoid spurious losses.\r\n\r\nJust a point I think we did not mentioned yet is that there can be some interactions between Multipath out-of-order number delivery and incoming packet number duplicate detection. This requires maintaining some state at the receiver side, as described by https://www.rfc-editor.org/rfc/rfc9000.html#section-12.3-12. With single packet number space, the receiver should take extra care when updating the \"minimum packet number below which all packets are immediately dropped\". Otherwise, in presence of paths with very different latencies, the receiver might end up discarding packets from a (slower) path.\r\n\r\nI'm also preferring the multiple packet number spaces solution for the above reasons. I'm not against thinking for a \"unified\" solution (the proposal sounds interesting), but I wonder how much complexity this would add compared to requiring end hosts to use one-byte CIDs.",
          "createdAt": "2022-03-04T13:57:38Z",
          "updatedAt": "2022-03-04T13:57:38Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the issue is not really so much \"single vs multiple number space\" as \"support for multipath and NULL CID\". As noted by Mirja, there is an implementation cost there. My take is:\r\n\r\n* If a node uses NULL CID and proposes support of multipath, then that node MUST implement code to deal with size of acknowledgements.\r\n* If a node sees a peer using NULL CID and supporting multipath, then that node MUST either use only one path at a time or implement code to deal with impact on loss detection due to out of order arrivals, and impact on congestion control including ambiguity of ECN signals.\r\n\r\nThen add sections on what it means to deal with the side of acknowledgements, out of order arrivals, and congestion control.\r\n\r\nI think this approach ends up with the correct compromises:\r\n\r\n* It keeps the main case simple. Nodes that rely on multipath just use long CID and one number space per CID.\r\n* Nodes that use long CID never have to implement the ACK length minimization algorithms.\r\n* Nodes that see a peer using NULL CID have a variety of implementation choices, e.g., sending on just one path at a time, sending on mostly one path at a time in \"make or break\" transitions, or implementing sophisticated algorithms.\r\n\r\nIf we do that, we can get rid of the single vs multiple space discussion, and end up with a single solution addressing all use cases.",
          "createdAt": "2022-03-04T18:26:35Z",
          "updatedAt": "2022-03-04T18:26:35Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looking at all the discussions here and in other issues such as ECN, I think that we should try to write two different versions of section 7:\r\n- one covering all the aspects of single packet number space (RTT estimation, retransmissions, ECN, handling of CIDs, ...)\r\n- one covering all the aspects of multiple packet number space (RTT estimation, retransmissions, ECN, handling of CIDs, ...)\r\n\r\nThere would be some overlap between these two sections and also some differences that would become clear as we specify them. At the end of this writing, we'll know whether it is possible to support/unify both or we need to recommend a single one. The other parts of the document are almost independent of that and can evolve in parallel with these two sections.\r\n\r\nHowever, I don't think that such a change would be possible by Monday",
          "createdAt": "2022-03-04T18:27:24Z",
          "updatedAt": "2022-03-04T18:27:24Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we should rush changes before we have agreed on the final vision.",
          "createdAt": "2022-03-04T18:33:56Z",
          "updatedAt": "2022-03-04T18:33:56Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "It might be helpful to have these options as PRs (without merging) them, so people can understand all details of each approach.",
          "createdAt": "2022-03-04T20:05:30Z",
          "updatedAt": "2022-03-04T20:05:30Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @huitema that supporting multi-path with null CIDs is a more fundamental issue than the efficiency comparison between single PN and separate PN, as it would ultimately impact the application scope of multipath QUIC. But indeed, we might want to implement proposed solution first and then decide if we want to adopt such a unified approach.",
          "createdAt": "2022-03-04T20:25:07Z",
          "updatedAt": "2022-03-04T20:25:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since @mirjak prodded me, we now have a PR for the \"unified\" proposal.",
          "createdAt": "2022-03-04T22:50:29Z",
          "updatedAt": "2022-03-04T22:50:29Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I totally agree with Christian that the issue is about \"support for multipath and NULL CID\", and the solution that Christian suggested looks really great!  It both takes advantage of multiple spaces, and support NULL CID users without affect the efficiency of ACK arrangements.\r\n\r\nBesides, the solution is more convenient for implementations, because If both endpoints uses non-zero length cids, endpoints only need to support multiple spaces, and if one of the endpoints use NULL CID, it could use single pn space in one direction and could support NULL CID and multipath at the same time. ",
          "createdAt": "2022-03-07T06:21:20Z",
          "updatedAt": "2022-03-07T06:21:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Very high level summary of IETF-113 discussion seems that there is interest and likely support for the unified solution (review minutes for further details).",
          "createdAt": "2022-03-23T14:47:10Z",
          "updatedAt": "2022-03-23T14:47:10Z"
        }
      ]
    },
    {
      "number": 101,
      "id": "I_kwDOGNtpaM5FIz8p",
      "title": "Server MUST validate paths before using them",
      "url": "https://github.com/quicwg/multipath/issues/101",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "In section 3.1, we wrote \r\n\r\nWhen the multipath option is negotiated, clients that want to use an additional path MUST first initiate the Address Validation procedure with PATH_CHALLENGE and PATH_RESPONSE frames described in [Section 8](https://rfc-editor.org/rfc/rfc9000#section-8) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)]. After receiving packets from the client on the new paths, the servers MAY in turn attempt to validate these paths using the same mechanisms.[\u00b6](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-3.1-1)\r\n\r\nWith multipath, we cannot simply write that the server MAY validate the new path. There is a risk of a malicious client that operates as follows:\r\n- client creates path from its own address, A. Path is validate by server\r\n- client starts long download from server\r\n- client creates a second path to server using a spoofed address, B \r\n- client starts address validation for B but does not care about the response from the server\r\n- client stops acknowledging packets over the first path to force the server to move packets to the second one and then opportunistically acknowledges packets that should have been sent by the server over that second packet (SPNS would probably make such an attack simpler than MPNS)\r\n\r\nWe probably need to start working on the security considerations section of the draft.\r\n",
      "createdAt": "2022-03-04T18:40:31Z",
      "updatedAt": "2022-07-06T15:50:14Z",
      "closedAt": "2022-07-06T15:50:14Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is already covered in the QUIC threat model. The server is supposed to validate new paths by sending a \"path challenge\" on that path, then waiting for a challenge response. If the client spoofs a path, it will never receive the challenge, and thus the server will never receive the response and will not validate the path. See section 8.2 of RFC 9000, path validation. Security section 21.1.3. Connection Migration states that \"Path validation ([Section 8.2](https://www.rfc-editor.org/rfc/rfc9000.html#migrate-validate)) establishes that a peer is both willing and able to receive packets sent on a particular path.\"",
          "createdAt": "2022-03-04T19:39:30Z",
          "updatedAt": "2022-03-04T19:39:30Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So yes, the current text should be \"the servers MUST in turn attempt to validate these paths using the same mechanisms, as specified in {{ Section 8.2 of RFC9000 }}.\"",
          "createdAt": "2022-03-04T19:41:26Z",
          "updatedAt": "2022-03-04T19:41:26Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "No, this should not be a MUST. It is true that the path MUST be validated before it can be used. However, just because the serve receives a new packet on a path, that doesn't automatically mean that the server has to start path validation. It could e.g. also decide to simply withdraw that packet.  ",
          "createdAt": "2022-03-04T20:21:43Z",
          "updatedAt": "2022-03-04T20:21:43Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually, this is also not right.\r\n\r\nThis is what RFC9000 says (section 9):\r\n\r\n`An endpoint MUST perform path validation ([Section 8.2](https://www.rfc-editor.org/rfc/rfc9000#migrate-validate)) if it detects any change to a peer's address, unless it has previously validated that address.`\r\n\r\nSo I guess we should maybe not use normative language here but refer to section 9 in RFC9000 instead...?",
          "createdAt": "2022-03-04T20:28:22Z",
          "updatedAt": "2022-03-04T20:29:59Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just submitted PR #110 for this issue.",
          "createdAt": "2022-03-10T03:44:52Z",
          "updatedAt": "2022-03-10T03:44:52Z"
        }
      ]
    },
    {
      "number": 107,
      "id": "I_kwDOGNtpaM5FNRGW",
      "title": "Clarify path closure based on discussion in issue #90",
      "url": "https://github.com/quicwg/multipath/issues/107",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "We should review the current text and make sure we cover everything clearly. Maybe add some more text to the intro part of 3.2 ",
      "createdAt": "2022-03-07T09:10:49Z",
      "updatedAt": "2022-07-08T11:10:15Z",
      "closedAt": "2022-07-08T11:10:15Z",
      "comments": []
    },
    {
      "number": 111,
      "id": "I_kwDOGNtpaM5Fcuy7",
      "title": "Loss Recovery and Congestion Control Pseudocode for multipath",
      "url": "https://github.com/quicwg/multipath/issues/111",
      "state": "OPEN",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Do we need some pseudocode like [RFC 9002 Appendix-A](https://datatracker.ietf.org/doc/html/rfc9002#appendix-A) and [Appendix-B](https://datatracker.ietf.org/doc/html/rfc9002#appendix-B) to describe the loss recovery and congestion control processes which are different in multiple paths?  Besides, some of the functions are different in multiple and single packet number space. \r\nThis might be helpful when people try to understand and implement the mechanisms.\r\n\r\n",
      "createdAt": "2022-03-10T12:27:12Z",
      "updatedAt": "2022-07-06T15:34:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Depending on how the discussions evolve about the packet number space designs, if we end up having some single packet number space at some point, it would be interesting to show the adapted loss recovery algorithm. In particular, in DetectAndRemoveLostPackets, the packet threshold must be relative to the packet sent over a path (and not be based on the absolute connection-wide number, as any multipath reordering would cause spurious retransmissions).\r\n\r\nHowever, I'm not sure to understand why we should provide alternative algorithms for congestion control. To me, we can just state that these are applied per-path and not connection-wide and this should be sufficient.",
          "createdAt": "2022-03-16T08:13:37Z",
          "updatedAt": "2022-03-16T08:13:37Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we want to provide a Reno like pseudocode, it should be a coupled congestion control scheme that shows how different paths would be coupled. Not sure that someone would deploy such as congestion control...",
          "createdAt": "2022-03-19T10:59:50Z",
          "updatedAt": "2022-03-19T10:59:50Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussing some kind of coupled congestion control (or shared bottleneck detection) is out of scope of this doc in my opinion.",
          "createdAt": "2022-07-06T15:34:46Z",
          "updatedAt": "2022-07-06T15:34:46Z"
        }
      ]
    },
    {
      "number": 112,
      "id": "I_kwDOGNtpaM5Ft7tx",
      "title": "Modifications for Path State Figure in Section 4.2",
      "url": "https://github.com/quicwg/multipath/issues/112",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In Section 4.3 [Path States](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-path-states) we wrote:\r\n```\r\n       o\r\n       | PATH_CHALLENGE sent/received on new path\r\n       v\r\n +------------+    Path validation abandoned\r\n | Validating |----------------------------------+\r\n +------------+                                  |\r\n       |                                         |\r\n       | PATH_RESPONSE received                  |\r\n       |                                         |\r\n       v        Associated CID have been retired |\r\n +------------+        Path's idle timeout       |\r\n |   Active   |----------------------------------+\r\n +------------+                                  |\r\n       |                                         |\r\n       | PATH_ABANDONED sent/received            |\r\n       v                                         |\r\n +------------+                                  |\r\n |   Closing  |                                  |\r\n +------------+                                  |\r\n       |                                         |\r\n       | Associated CID have been retired        |\r\n       | Path's idle timeout                     |\r\n       v                                         |\r\n +------------+                                  |\r\n |   Closed   |<---------------------------------+\r\n +------------+\r\n\r\n```\r\n\r\nThere are 2 problems in this figure:\r\n1. \"Associated CID have been retired\" should not cause the path turn into closed state, because in Section [4.2.2. ](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-4.2.2)[Effect of RETIRE_CONNECTION_ID Frame](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-effect-of-retire_connection) :\r\n\r\n> Receiving a RETIRE_CONNECTION_ID frame causes the endpoint to discard the resources associated with that connection ID. If the connection ID was used by the peer to identify a path from the peer to this endpoint, the resources include the list of received packets used to send acknowledgements. The peer MAY decide to keep sending data using the same IP addresses and UDP ports previously associated with the connection ID, but MUST use a different connection ID when doing so.\r\n\r\n  So retiring associated CID only cause the resources belonging to the corresponding packet number space to be released, but not the whole path to be closed. In CID migration cases, endpoints just want to retire the old CID and use a new one, as path is defined as \"refers to the 4-tuple\"  in the current draft, this operation will not cause the whole path context (including congestion control states, RTT measurements, etc.) to be removed.\r\n\r\n2. Path closing is triggered by PATH_ABANDONED frame, and does not have dependency on CID retiring (Although path closing would trigger the retirement of CID resource). So when path_state transmit from \"Closing\" to \"Closed\", the proper condition might be \"Acknowledgement of PATH_ABANDONED frame received\" or \"Path's draining timeout for at least 3 times the current PTO interval\".\r\n",
      "createdAt": "2022-03-15T13:22:25Z",
      "updatedAt": "2022-07-08T08:27:37Z",
      "closedAt": "2022-07-08T08:27:37Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "First, regarding the transitioning from a \"closing\" state to a \"closed\" state, there will be a problem if we use the receipt of the ACK of a PATH_ABANDON as a condition for the transitioning due to possible out-of-order delivery. Suppose a client uses DCID S2 to on its first path to send three pkts with the packet number 100, 101, and 102, where PATH_ABANDON frame is sent in packet 102. However, due to the out-of-order delivery, it is possible that 102 is acked first, while packet 100 and 101 are still in flight. Therefore, at this point, we cannot mark the first path as \"closed\" since it is also possible that the acks of those two packets will later return from the first path. Due to the above reasons, in the initial design, we say that the path should be closed after CIDs are retired. As shown in the path-closing figure (Fig.3) in the draft, after the client makes sure that the packets (100, 101) sent before PATH_ABANDON on path 1 are also acknowledged, it then decides that the CID S2 is no longer needed, and thus sending out the RETIRE_CONNECTION_ID frame.\r\n\r\nSecond, regarding the transitioning from an \"active\" state to a \"closed\" state, yes, it is possible that we want to retire the old CID and use a new one, and I think the current figure is a bit confusing.  The purpose of this transitioning is to handle exceptions and it basically says that when there are no available CIDs to use for communication on a particular path, we should close it. I think we can simply keep the \"path's timeout\" as the condition because when there are no available CIDs, the path timeout will be triggered anyway.",
          "createdAt": "2022-03-16T00:31:17Z",
          "updatedAt": "2022-03-16T00:31:17Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that the transitioning from \"Active\" to \"Closed\" should not be directly done if we retire the associated CID. We could instead have an intermediate \"Idle\" state in which as long as you have no associated CID, keep relevant recovery/RTT/... contexts.\r\n\r\nIn general, I think it could be worthwhile to make a clearer distinction between the acknowledgment/packet number context and the recovery one. For instance, if for any reason a host changes the DCID used over a given path, it should still keeps track of packets sent with the previous DCID (and thus possibly sent with a different packet number space).\r\n\r\nFor the \"Closing\" to \"Closed\" transition, I tend to agree with Yunfei and I would not directly rely on the acknowledgment of the PATH_ABANDON frame to close my path. But as a sender, I can react to the acknowledgment of my PATH_ABANDON frame and send the RETIRE_CONNECTION_ID frame. On the other hand, relying on 3*PTO to transition from \"Closing\" to \"Closed\" is probably more relevant than using the path's idle timeout.",
          "createdAt": "2022-03-16T08:00:27Z",
          "updatedAt": "2022-03-16T08:00:27Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've just submitted PR #116 for this issue, containing the suggestions from Yunfei and Quentin.\r\n\r\nThe core points for this modification:\r\n- Retiring CIDs would not trigger path closure.\r\n- If a path is idle timeout, endpoints should send PATH_ABANDON frame before closing the path, so the path state transition would be \"Active\" -> \"Closing\" -> \"Closed\" in this situation\r\n- If a path is detected blackhole or can't be used for some reason such as the whole network environment failed, endpoints can close the path immediately, because sending PATH_ABANDON frame on this path seem to be useless. \r\n",
          "createdAt": "2022-03-21T09:31:51Z",
          "updatedAt": "2022-03-21T09:31:51Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@Yanmei-Liu your PR (#116) says \r\n\r\n> Note that if a path became idle timeout, endpoints SHOULD send PATH_ABANDONED frame before closing the path.\r\n\r\nWhile you wrote in your comment above that it might be useless to send PATH_ABANDONED. Am I missing something?",
          "createdAt": "2022-07-06T15:38:19Z",
          "updatedAt": "2022-07-06T15:38:19Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOGNtpaM5F_PiC",
      "title": "PTO calculation in single PN",
      "url": "https://github.com/quicwg/multipath/issues/114",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A PTO is calculated with a path's RTT measurement, which implies that we should calculate PTO per-path. However, in RFC9002, it says \"As with loss detection, the PTO is per packet number space. That is, a PTO value is computed per packet number space.\" The question is that in the single PN case, we send packets in single packet number space over multiple paths, if we stick to what RFC9002 says, we end up with one PTO for multiple paths. ",
      "createdAt": "2022-03-19T08:09:47Z",
      "updatedAt": "2022-07-07T15:56:41Z",
      "closedAt": "2022-07-07T15:56:41Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The point in RFC9000 is that you have to reset PTO if you use a new packet number space. However, in PR #103 we say:\r\n\r\n> Loss detection as specified in {{QUIC-RECOVERY}} uses algorithms\r\n>  based on timers and on sequence numbers. When packets are sent over\r\n>  multiple paths, loss detection must be adapted to allow for different RTTs\r\n>  on different paths.\r\n\r\nI think that is correct. Is that sufficient or do you think we need to say more @yfmascgy ?",
          "createdAt": "2022-07-06T15:59:37Z",
          "updatedAt": "2022-07-06T15:59:37Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for pointing this out. I think the current text should suffice:)",
          "createdAt": "2022-07-07T01:13:56Z",
          "updatedAt": "2022-07-07T01:13:56Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "I_kwDOGNtpaM5F_P81",
      "title": "Path idle timeout for Path State Figure in Section 4.2",
      "url": "https://github.com/quicwg/multipath/issues/115",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "For the transition from a \"closing\" state to a \"closed\" state In the path state figure in section 4.2, I find the phrase \"path idle timeout\" a bit confusing, because right now this value is supposed to be equal to max_idle_timeout, but shouldn't a transition from a \"closing\" state to a \"closed\" state be much quicker than that from an \"active\" state to a \"closed\" state since the first transition is just what we expect to happen?",
      "createdAt": "2022-03-19T08:20:41Z",
      "updatedAt": "2022-07-08T09:58:08Z",
      "closedAt": "2022-07-08T09:58:08Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is now fixed by #116.",
          "createdAt": "2022-07-08T09:58:08Z",
          "updatedAt": "2022-07-08T09:58:08Z"
        }
      ]
    },
    {
      "number": 118,
      "id": "I_kwDOGNtpaM5HPPt_",
      "title": "Handle stateless reset",
      "url": "https://github.com/quicwg/multipath/issues/118",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "Should the spec say something about stateless reset?\r\n\r\nSuppose a node is sending on two paths with two different DCID and two corresponding stateless reset secrets, and receives a stateless reset packet that matches the reset secret on the first path. Should it:\r\n\r\n1) Abandon that path and continue the connection with the other path?\r\n2) Abandon the connection?",
      "createdAt": "2022-04-06T20:57:39Z",
      "updatedAt": "2022-07-08T11:10:15Z",
      "closedAt": "2022-07-08T11:10:15Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's a good point. RFC9000 states that stateless resets should be used in last resort when the endpoint does not have access to the connection state. If hosts have still access to the connection state and want to abandon a specific path, I would expect them to rely on PATH_ABANDON frame (or on path idle timeout). So when receiving a stateless reset, I would abandon the connection.\r\n\r\nDepending on the number of impacts on existing RFC9000 mechanisms, it may be useful to write a section (or at least, a paragraph) clarifying these points.",
          "createdAt": "2022-04-07T09:04:10Z",
          "updatedAt": "2022-04-07T09:04:36Z"
        }
      ]
    },
    {
      "number": 119,
      "id": "I_kwDOGNtpaM5LYjYp",
      "title": "grammar error",
      "url": "https://github.com/quicwg/multipath/issues/119",
      "state": "CLOSED",
      "author": "Kulsk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "from https://github.com/quicwg/multipath/blob/main/draft-ietf-quic-multipath.md#packet-protection-for-quic-multipath-multipath-aead\r\n\r\nThe path ID for 1-RTT packets is the sequence number of of {{QUIC-TRANSPORT}}\r\nmaybe it should be\r\nThe path ID for 1-RTT packets is the sequence number of Connection ID of {{QUIC-TRANSPORT}}",
      "createdAt": "2022-06-08T13:10:43Z",
      "updatedAt": "2022-07-05T11:38:19Z",
      "closedAt": "2022-07-05T11:38:19Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks Wu! I fixed this grammar error in PR #121 .",
          "createdAt": "2022-06-13T07:37:50Z",
          "updatedAt": "2022-06-13T07:37:50Z"
        }
      ]
    },
    {
      "number": 120,
      "id": "I_kwDOGNtpaM5Lh9lX",
      "title": "active_connection_id_limit",
      "url": "https://github.com/quicwg/multipath/issues/120",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [],
      "body": "Is there any reason why a new parameter isn't defined to negotiate max_paths rather than reusing this existing parameter? \r\n\r\nThat design is much more cleaner. For example, the max paths wouldn't be ignored even when zero-length CIDs are in use. \r\n\r\nUnless I'm mistaken, the current design have to comply with the following from RFC9000:\r\n\r\n>If an endpoint issues a zero-length connection ID... and therefore ignores the active_connection_id_limit value received from its peer.\r\n\r\n\r\nBTW, how the following MUST will be honored for the zero-length CID case: \r\n\r\n```\r\nBefore an\r\n   endpoint adds a new path by initiating path validation, it MUST check\r\n   whether at least one unused Connection ID is available for each side.\r\n```\r\n\r\n",
      "createdAt": "2022-06-10T07:54:07Z",
      "updatedAt": "2022-07-11T12:23:05Z",
      "closedAt": "2022-07-11T12:23:05Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From RFC9000 (Section 9.5), an endhost cannot (voluntary) reuse a given CID on different addresses. Since CIDs are the path identifiers, this already restricts the number of concurrent paths. Given that paths must be symmetrical, this should restrict the number of concurrent paths to the minimum advertised value of `active_connection_id_limit`. Note that the actual limit can be lower than this, as you depend on your peer to have your CIDs.\r\n\r\nFor the `max_paths` parameter, this is something we considered in early multipath drafts (such as draft-deconinck-quic-multipath-02). Such value would only be meaningful when it is lower than the advertised `active_connection_id_limit`. And even in such case, it is difficult to enforce that limit. If you provide 8 CIDs to your peer and request `max_paths` to be 2, how would you do that? Especially when handling transient situations (i.e., stop using a path on a network A to use another on network B), the receiver might notice 3 paths being in concurrent use (especially if network B is faster than network A), even if the sender behaves nicely.\r\n\r\nOn the other hand, if one host definitely wants to limit the number of concurrent paths, it can simply as most `max_paths` active CIDs.\r\n\r\nFor the zero-length CIDs, I think there are two parts. If we consider one-sided zero-length CIDs while the other direction uses non-zero-length CIDs, the maximum number of paths is constrained by the `active_connection_id_limit` value of the non-zero-length CID side. If we now consider both sides using zero-length CIDs, then I would keep the minimum of both `active_connection_id_limit` values? RFC9000 states that the host can ignore because it will not send NEW_CONNECTION_ID frames, but we can extend this meaning in the draft. In any case, it might be better to clarify this, and we will likely perform a strong editorial pass on the whole text once we get an agreement on #103.",
          "createdAt": "2022-06-10T15:38:50Z",
          "updatedAt": "2022-06-10T15:38:50Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @qdeconinck. Having two limits instead of just one just introduces complexity with little benefit. Yes, the case of two endpoints both using zero-length CIDs may be under specified. But the deployments of that scenarios are going to be very limited. If the server is part of a frame and uses zero-length CID, the client is identified by its IP address and port. The load balancer will struggle to match the new IP and port of a new path with the original values used in connection establishment. I don't see how that could work. So we are pretty much left to peer to peer scenarios, in which the server is a single computer. Even there, the matching of the new IP and port with the original client requires a combination of guesswork and maybe trial decryption. If developers are ready to do that, they can probably invent a way to manage the path number...",
          "createdAt": "2022-06-10T19:18:46Z",
          "updatedAt": "2022-06-10T19:18:46Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> From RFC9000 (Section 9.5), an endhost cannot (voluntary) reuse a given CID on different addresses. Since CIDs are the path identifiers, this already restricts the number of concurrent paths. Given that paths must be symmetrical, this should restrict the number of concurrent paths to the minimum advertised value of `active_connection_id_limit`.\r\n\r\nI'm not sure to get why you say that CIDs are \"path identifiers\".  Also, please note that an \"address\" in 9000 is defined as follows:\r\n\r\n```\r\nAddress:\r\n\r\n    When used without qualification, the tuple of IP version, IP address, and UDP port number that represents one end of a network path\r\n\r\nConnection ID:\r\n\r\n    An identifier that is used to identify a QUIC connection at an endpoint. Each endpoint selects one or more connection IDs for its peer to include in packets sent towards the endpoint. This value is opaque to the peer.\r\n```",
          "createdAt": "2022-06-16T06:39:49Z",
          "updatedAt": "2022-06-16T06:39:49Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Note that the actual limit can be lower than this, as you depend on your peer to have your CIDs.\r\n\r\nSure, this reasoning is still valid independent of whether active_connection_id_limit or a new transport metric is defined. ",
          "createdAt": "2022-06-16T06:41:08Z",
          "updatedAt": "2022-06-16T06:41:08Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Especially when handling transient situations (i.e., stop using a path on a network A to use another on network B), the receiver might notice 3 paths being in concurrent use (especially if network B is faster than network A), even if the sender behaves nicely.\r\n\r\nThis same case can be considered when more than active_connection_id_limit are used (including in transient situations you mentioned). What concerns me with active_connection_id_limit is that the connection must be closed as per: \r\n\r\n` if the number of active connection IDs exceeds the value advertised in its active_connection_id_limit transport parameter, an endpoint MUST close the connection with an error of type CONNECTION_ID_LIMIT_ERROR.`\r\n\r\nwhile, with a dedicated path_max, new paths can be just discarded while maintaining the connection alive. ",
          "createdAt": "2022-06-16T06:45:30Z",
          "updatedAt": "2022-06-16T06:45:30Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> On the other hand, if one host definitely wants to limit the number of concurrent paths, it can simply as most `max_paths` active CIDs.\r\n\r\nAgree. This is only possible when dedicated parameters are defined. ",
          "createdAt": "2022-06-16T06:46:21Z",
          "updatedAt": "2022-06-16T06:46:21Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> RFC9000 states that the host can ignore because it will not send NEW_CONNECTION_ID frames, but we can extend this meaning in the draft. In any case, it might be better to clarify this\r\n\r\nNoted.",
          "createdAt": "2022-06-16T06:47:37Z",
          "updatedAt": "2022-06-16T06:47:37Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Having two limits instead of just one just introduces complexity with little benefit\r\n\r\nI'm not sure to see complexities out there. Using connection IDs to infer per path specifics is not a clean design, btw. \r\n",
          "createdAt": "2022-06-16T06:50:51Z",
          "updatedAt": "2022-06-16T06:50:51Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Relying to previous comments:\r\n\r\n1) the `active_connection_id_limit` limits the number of CID that a peer MAY advertise at the same time. A peer MAY advertise \"at most\" this limit.\r\n\r\n2) there is no guarantee that a peer will advertise \"at least\" the `active_connection_id_limit`. For example, a node could decide to never advertise more than 3 CID, even if its peer's limit is 9.\r\n\r\n3) if a node reuses a non-zero-length CID on a different path mimics, the peer is most likely to treat that as a \"NAT rebinding\" event. There will be an exchange of probes, after which the peer will retain either the old or the new path. Thus, there can never be more active paths than the `active_connection_id_limit`.\r\n\r\n4) Since a new path requires a new connection ID in each direction, the maximum number of paths cannot be higher than the lowest of the two `active_connection_id_limit` advertised by both peers.\r\n\r\nI think the issue boils down to \"how does a node refuse to establish a new path\". Imagine a node with a hard limit to maximum two simultaneous paths per connection, but advertising 3 CIDs. With RFC 9000 the only option would be to ignore incoming challenges for new paths. The peer will see timeouts, and repeat the challenges a number of time before giving up. If the peer knew that the local node supports at most two paths, it might not bother sending new challenges in the first place, saving some time. But there are synchronization issues.\r\n\r\nThe peer may or may not know how many paths are currently active. For example, one of the current paths may have been abandoned, and the peer does not know that yet. So if we create a \"max path\" mechanism, we also need some kind of synchronization mechanism. Or, we could add a soft-error mechanism of some kind, something like a \"CHALLENGE_REFUSED\" frame, maybe carrying an error reason. But we would have to work out the complexity, etc.\r\n\r\nLooks like something we could do later, maybe an extension on top of the basic multipath.\r\n\r\n",
          "createdAt": "2022-06-16T22:52:17Z",
          "updatedAt": "2022-06-16T22:52:17Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Relying to previous comments:\r\n> \r\n>     1. the `active_connection_id_limit` limits the number of CID that a peer MAY advertise at the same time. A peer MAY advertise \"at most\" this limit.\r\n> \r\n>     2. there is no guarantee that a peer will advertise \"at least\" the `active_connection_id_limit`. For example, a node could decide to never advertise more than 3 CID, even if its peer's limit is 9.\r\n> \r\n>     3. if a node reuses a non-zero-length CID on a different path mimics, the peer is most likely to treat that as a \"NAT rebinding\" event. There will be an exchange of probes, after which the peer will retain either the old or the new path. Thus, there can never be more active paths than the `active_connection_id_limit`.\r\n> \r\n>     4. Since a new path requires a new connection ID in each direction, the maximum number of paths cannot be higher than the lowest of the two `active_connection_id_limit` advertised by both peers.\r\n\r\nFully Agree, Christian. ",
          "createdAt": "2022-06-17T05:51:02Z",
          "updatedAt": "2022-06-17T05:51:02Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I think the issue boils down to \"how does a node refuse to establish a new path\".\r\n\r\nThat's it! \r\n\r\nI'd like the mechanism to not lead to closing the connection when such new paths are being added but a limit is fired. ",
          "createdAt": "2022-06-17T05:53:38Z",
          "updatedAt": "2022-06-17T05:56:12Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's not add additionally frame(s) now, but do we want to add some text about \"how to refuse a new path\"?",
          "createdAt": "2022-07-06T15:44:15Z",
          "updatedAt": "2022-07-06T15:44:15Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, there is a pretty straightforward way to \"refuse a new path\" -- just send back an \"abandon path\" frame.",
          "createdAt": "2022-07-08T03:37:03Z",
          "updatedAt": "2022-07-08T03:37:03Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "True. I think we should add some explicit text that you should send an abandon frame (on an existing path) to refuse a new path and not reply to oath challenge. ",
          "createdAt": "2022-07-08T08:59:30Z",
          "updatedAt": "2022-07-08T08:59:30Z"
        }
      ]
    },
    {
      "number": 122,
      "id": "I_kwDOGNtpaM5NJ_JY",
      "title": "Handling incoming ACK_MP frames with a retired DCID sequence number",
      "url": "https://github.com/quicwg/multipath/issues/122",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "has PR"
      ],
      "body": "It might be possible to be in a state where a sender retires a DCID that was used by still in-flight packets. Hence, it is possible for the sender to receive a ACK_MP frame referencing the retired DCID. Depending on the situation:\r\n\r\n- The sender can keep a way to track the sent packet with the retired DCID sequence number, allowing proper acknowledgement of the packets.\r\n- The sender drops all the state related to the DCID, hence marking the in-flight packets as being lost and ignoring ACK_MP frames having a retired DCID sequence number.\r\n\r\nWhile this should not affect interoperability, it might be worthwhile to add a sentence or two to mention the possible performance issue in such situation.",
      "createdAt": "2022-07-05T15:37:04Z",
      "updatedAt": "2022-07-08T11:40:00Z",
      "closedAt": "2022-07-08T11:40:00Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "We could add some text to [4.2.2. ](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-4.2.2)[Effect of RETIRE_CONNECTION_ID Frame](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-effect-of-retire_connection). Can you propose a PR @qdeconinck ?",
          "createdAt": "2022-07-06T15:46:36Z",
          "updatedAt": "2022-07-06T15:46:36Z"
        }
      ]
    },
    {
      "number": 123,
      "id": "I_kwDOGNtpaM5NP0ww",
      "title": "Guidance on scheduling of packets containing ACK frames",
      "url": "https://github.com/quicwg/multipath/issues/123",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "This issue came up during the discussion of issue #33. We say that ACK or ACK_MP frames can be send over any path, however, maybe we should discuss some guidance and trade-offs. E.g. sending on the same path as the packets received also for RTT measurements; using the shortest delay path might have some performance benefits...?",
      "createdAt": "2022-07-06T15:18:26Z",
      "updatedAt": "2022-07-11T12:30:48Z",
      "closedAt": "2022-07-11T12:30:48Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree. We should add some guidance here. We did some experiment regarding this issue. Our finding is returning ACK on the shortest path is helpful. But the improvement is only more significant when the path rtt ratio is larger than 4:1.",
          "createdAt": "2022-07-07T01:28:05Z",
          "updatedAt": "2022-07-07T01:28:05Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "I_kwDOGNtpaM5NT8tF",
      "title": "Add more explanation on ACK delay and zero-length CID",
      "url": "https://github.com/quicwg/multipath/issues/125",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "yfmascgy"
      ],
      "labels": [],
      "body": "Comment by @yfmascgy (on PR #103):\r\nI think we expand this section a bit as we found getting the delay right was non-trivial. QUIC time-stamp would work for sure. But if one decides not to use QUIC timestamp, we probably want to explain what is needed to be done here.",
      "createdAt": "2022-07-07T09:13:52Z",
      "updatedAt": "2022-11-02T08:50:46Z",
      "closedAt": "2022-11-02T08:50:46Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have submitted PR #131 for this one.",
          "createdAt": "2022-07-08T09:50:40Z",
          "updatedAt": "2022-07-08T09:50:40Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing as #125 got merged.",
          "createdAt": "2022-11-02T08:50:46Z",
          "updatedAt": "2022-11-02T08:50:46Z"
        }
      ]
    },
    {
      "number": 128,
      "id": "I_kwDOGNtpaM5NVBa7",
      "title": "Receiving old packet number space identifier in ACK_MP",
      "url": "https://github.com/quicwg/multipath/issues/128",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "This is somewhat related to #122.\r\n\r\nSection 12.2 states that\r\n```\r\nIf an endpoint receives a ACK_MP frame with a non-existing packet number\r\nspace ID, it MUST treat this as a connection error of type\r\nMP_PROTOCOL_VIOLATION and close the connection.\r\n```\r\nThe notion of \"non-existing\" packet number space ID is somewhat blurry and maybe too aggressive. If for some reason an ACK_MP frame referencing an old, retired DCID sequence number arrives at the endhost, probably we just want to ignore it? And we could instead consider ACK_MP related to a packet number space ID larger than the greatest advertised one being MP_PROTOCOL_VIOLATION?",
      "createdAt": "2022-07-07T12:33:31Z",
      "updatedAt": "2022-07-11T12:57:37Z",
      "closedAt": "2022-07-11T12:57:37Z",
      "comments": []
    },
    {
      "number": 132,
      "id": "I_kwDOGNtpaM5NafCg",
      "title": "Can we be more specific about RTT computation? The word \"statistical\" is a bit broad.",
      "url": "https://github.com/quicwg/multipath/issues/132",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The current draft says \"If timestamps are not available, implementations could estimate one way delays using statistical techniques\". I find the word \"statistical\" a bit too broad. Can we elaborate what is the exact statistical method recommended to use? Moreover, \"statistical\" also implies variation and randomness, what happens for applications that do not expect such randomness?",
      "createdAt": "2022-07-08T09:59:55Z",
      "updatedAt": "2022-11-03T09:01:31Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I could elaborate, but I am afraid that this is going into lots of details very quickly.\r\n\r\n\r\nEach RTT measurement of the tuple (send path, return path) provides an evaluation of (one-way-delay(send_path, send_time) + one_way_delay(return_path, return_time)). At that point, we have to infer what is the most likely value of the one way delays that produced this result.\r\n\r\nWhatever the number of paths and number of measurements, the system ends up with fewer equations than variables. For example, even in the single path scenario, a delay of 60 ms can be explained equally well by a delay of 30 ms in each direction, a delay of 40 ms on the send path and 20 ms or the return path, or any combination of delays that sums to 60ms. We can extract bounds, such as \"the delay on segment X is not negative\", but that leaves out a wide range of estimations. This is generally handled by making simple assumptions, such as assuming delays on a given path are symmetric -- until we learn something more.\r\n\r\nEven with that symmetry hypothesis, we have to make hypotheses about the probability function for each path. Solutions like Kalman filter assume a Gaussian distribution of delays, which simplifies computations. The classic computation of smoothed RTT and RTT average in the TCP code implicitly assumes a Gaussian distribution of delays, and further simplifies the computations so they can be performed in real time. For a simple implementation, using the same kind of simplifications as seen in TCP, we can use the following algorithm:\r\n\r\n1) Maintain estimates of average delay and delay variation for each segment.\r\n2) When a measurement is received and delay and variation are already initialized for both segments, allocate a sample based on previous knowledge:\r\n         * delta = rtt_sample - average(send_segment) - average(return_segment)\r\n         * range = variation(send_segment) + variation(return_segment)\r\n         * sample(send_segment) = average(send_segment) + delta* variation(send_segment)/range\r\n         * sample(return_segment) = average(return_segment) + delta* variation(return_segment)/range\r\nthen update average and variation for each segment using the same formulas used for TCP.\r\n\r\n3) When delay and variation are not estimated for either segment, split the difference:\r\n        * sample(send_segment) = rtt_sample /2\r\n        * sample(return_segment) = rtt_sample /2.\r\nthen initialize average and deviation for each segment based on the sample for that segment.\r\n\r\n4) When delay and variation are only estimated for return segment, initialize the send segment:\r\n        * sample(return_segment) = min(average(return_segment), rtt_sample)\r\n        * sample(send_segment) = rtt_sample - sample(return_segment),\r\nthen initialize average and deviation for the send segment, but do not update estimates for the receive segment.\r\n\r\n5) When delay and variation are only estimated for send segment, initialize the return segment:\r\n        * sample(send_segment) = min(average(send_segment), rtt_sample)\r\n        * sample(return_segment) = rtt_sample - sample(send_segment) \r\nthen initialize average and deviation for the receive segment, but do not update estimates for the send segment.\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2022-07-08T19:32:55Z",
          "updatedAt": "2022-07-08T19:32:55Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess the previous text could be copied in an annex.",
          "createdAt": "2022-07-08T19:33:53Z",
          "updatedAt": "2022-07-08T19:33:53Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I could elaborate, but I am afraid that this is going into lots of details very quickly.\r\n> \r\n> Each RTT measurement of the tuple (send path, return path) provides an evaluation of (one-way-delay(send_path, send_time) + one_way_delay(return_path, return_time)). At that point, we have to infer what is the most likely value of the one way delays that produced this result.\r\n> \r\n> Whatever the number of paths and number of measurements, the system ends up with fewer equations than variables. For example, even in the single path scenario, a delay of 60 ms can be explained equally well by a delay of 30 ms in each direction, a delay of 40 ms on the send path and 20 ms or the return path, or any combination of delays that sums to 60ms. We can extract bounds, such as \"the delay on segment X is not negative\", but that leaves out a wide range of estimations. This is generally handled by making simple assumptions, such as assuming delays on a given path are symmetric -- until we learn something more.\r\n> \r\n> Even with that symmetry hypothesis, we have to make hypotheses about the probability function for each path. Solutions like Kalman filter assume a Gaussian distribution of delays, which simplifies computations. The classic computation of smoothed RTT and RTT average in the TCP code implicitly assumes a Gaussian distribution of delays, and further simplifies the computations so they can be performed in real time. For a simple implementation, using the same kind of simplifications as seen in TCP, we can use the following algorithm:\r\n> \r\n> 1. Maintain estimates of average delay and delay variation for each segment.\r\n> 2. When a measurement is received and delay and variation are already initialized for both segments, allocate a sample based on previous knowledge:\r\n>    * delta = rtt_sample - average(send_segment) - average(return_segment)\r\n>    * range = variation(send_segment) + variation(return_segment)\r\n>    * sample(send_segment) = average(send_segment) + delta* variation(send_segment)/range\r\n>    * sample(return_segment) = average(return_segment) + delta* variation(return_segment)/range\r\n>    then update average and variation for each segment using the same formulas used for TCP.\r\n> 3. When delay and variation are not estimated for either segment, split the difference:\r\n>    * sample(send_segment) = rtt_sample /2\r\n>    * sample(return_segment) = rtt_sample /2.\r\n>    then initialize average and deviation for each segment based on the sample for that segment.\r\n> 4. When delay and variation are only estimated for return segment, initialize the send segment:\r\n>    * sample(return_segment) = min(average(return_segment), rtt_sample)\r\n>    * sample(send_segment) = rtt_sample - sample(return_segment),\r\n>    then initialize average and deviation for the send segment, but do not update estimates for the receive segment.\r\n> 5. When delay and variation are only estimated for send segment, initialize the return segment:\r\n>    * sample(send_segment) = min(average(send_segment), rtt_sample)\r\n>    * sample(return_segment) = rtt_sample - sample(send_segment)\r\n>    then initialize average and deviation for the receive segment, but do not update estimates for the send segment.\r\n\r\nHi Christian, thank for the explanation. However, there is still sth that is not quite clear to me. You mentioned Kalman filter. My understanding is that your state vector is the one-way-delay for each path in each direction. For example, if I have N paths, then I could write down s=[OWD_inbound_1, ...., OWD_inbound_N, OWD_outbound_1,... OWD_outbound_N]. For the process equation, we can write s_(k+1) = s_k + w_k, where w_k is the process noise/disturbance. The difficult part in the problem is that in the observation equation H is a random matrix, which means in each measurement y, y could be the combination of two one-way delays that the combination could change each time. So to me,  at the first glance, the problem is a bit different from the Kalman's formulation whose observation is y = H*s + v, where v is the noise term and H is fixed. I think this is not that relevant, but I am really curious to learn the technique. ",
          "createdAt": "2022-07-11T05:15:41Z",
          "updatedAt": "2022-07-11T05:18:04Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In a Kalman filter, if you have multiple observations, you use a different matrix H for each observation. But you maintain a single evaluation vector, correlation matrix, etc. Each observation operates on a projection of the whole state. \r\n\r\nBut then, I do not suggest that we try implementing a full Kalman filter. That would be a bit too CPU intensive. Also, the Kalman filter is trying for a min-square estimate, which works well for Gaussian variables but is only an approximation for the kind of probability distributions that we are likely to encounter. Implementing a more precise Kalman filter would be more precisely wrong...",
          "createdAt": "2022-07-11T05:47:36Z",
          "updatedAt": "2022-07-11T05:47:36Z"
        }
      ]
    },
    {
      "number": 136,
      "id": "I_kwDOGNtpaM5Q4FWW",
      "title": "Multipath-specific error codes: undefined MP_CONNECTION_ERROR",
      "url": "https://github.com/quicwg/multipath/issues/136",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In section 3, we have\r\n\r\n```\r\nIf endpoint receives an unexpected value for the transport parameter \"enable_multipath\", it\r\nMUST treat this as a connection error of type MP_CONNECTION_ERROR and close the connection.\r\n```\r\n\r\nHowever, the `MP_CONNECTION_ERROR` error code does not exist (anymore), and I'm not sure we need such a specific error code anyway. Why not raising a `TRANSPORT_PARAMETER_ERROR` in such case?",
      "createdAt": "2022-08-31T06:52:05Z",
      "updatedAt": "2022-09-23T09:27:20Z",
      "closedAt": "2022-09-23T09:27:20Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's reasonable to use TRANSPORT_PARAMETER_ERROR.\r\nSubmitted PR #141 for this issue.",
          "createdAt": "2022-09-21T10:01:49Z",
          "updatedAt": "2022-09-21T10:01:49Z"
        }
      ]
    },
    {
      "number": 137,
      "id": "I_kwDOGNtpaM5Q_rQX",
      "title": "How should a receiver process a PATH_ABANDON having an unknown Path Identifier?",
      "url": "https://github.com/quicwg/multipath/issues/137",
      "state": "OPEN",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "When using Identifier Types 0 or 1, the current text does not discuss how we should handle related path Identifier that the receiver cannot map to a path.\r\n\r\nWhen using Identifier Type 1, the Path Identifier corresponds to the sequence number of the Destination CID used by the sender to send packets on the related path, hence a sequence number of a source Connection ID of the receiver. When using Identifier Type 0, the Path Identifier corresponds to the sequence number of the Source CID of the sender, hence the sequence number of the Destination CID used by the receiver to send packets on the related path.\r\n\r\nWhile there are obvious values that could be considered as bad and may lead to, e.g., a MP_PROTOCOL_VIOLATION (e.g., a sequence number larger than any sequence number advertised), I don't think we should be as radical with regular values as they might have been retired meanwhile (also possible to face this with packet reordering). The worst edge cases I see are the followings.\r\n\r\nWith type 1, the sender might send a PATH_ABANDON with the seq of the CID in one packet, and then the RETIRE_CID retiring that CID in a subsequent one, but the RETIRE_CID reaches the receiver before the PATH_ABANDON one. If the receiver drops state upon RETIRE_CID reception, it won't be able to map the PATH_ABANDON to the path.\r\n\r\nWith type 0, the sender might send a PATH_ABANDON with the seq of the CID, but before it reaches the peer, the peer sends a RETIRE_CID retiring that CID. If the receiver drops the CID state upon RETIRE_CID sending, it won't be able to map the PATH_ABANDON to the path.\r\n\r\nHandling these edge cases with connection closure is clearly too strong. Still, ignoring or even acknowledging these PATH_ABANDON may have bad consequences. Silently dropping packets (i.e., not acknowledge the packet having PATH_ABANDON) will make the peer retransmit the frame (hoping it updates its path identifier) but could cause the loss/non-acknowledgment of accompanying frames (e.g., STREAM ones), and processing packet content without acknowledging it sounds odd. Acknowledging PATH_ABANDON that cannot be mapped to a path would make some desynchronisation about the status of the path between the peers (the sender now assumes the path is closed, but the receiver not).\r\n\r\nTo address the type 1 issue, we could write some text stating that a sender cannot retire a DCID if a PATH_ABANDON containing the related sequence number is still in flight. But for the type 0, the fix is not obvious (I don't think we could have the same solution as in #135)...",
      "createdAt": "2022-09-01T13:39:57Z",
      "updatedAt": "2023-02-26T19:17:05Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One solution is to put the retired cid into a cid_history_list and keep it for a while before its final deletion. In doing so, one can still find the cid-to-path mapping if the PATH_STATUS frame uses a retired cid. In this case, as long as the path that the peer wants to retire has no ambiguity, the current path close process can still work. If the receiver can no longer find the cid in both the active list and the history list, then it should treat this as a connection error of MP_PROTOCOL_VIOLATION and close the connection.",
          "createdAt": "2022-10-22T08:47:25Z",
          "updatedAt": "2022-10-22T08:48:35Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Another solution would to to not change the path ID (see issue #169). In this case all unknown path IDs could be handled as a connection error. Or is it anyway better to just ignore those frames (e.g. if completely outdated packet arrives and the path was already closed)?",
          "createdAt": "2023-02-21T15:30:39Z",
          "updatedAt": "2023-02-21T15:30:39Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the simplest solution is to just ignore Path Abandon that refer to abandoned connection ID sequence numbers. The problem is self correcting. If the connection ID is not used anymore, it is either because the path was actually abandoned (no problem), or because packets on the same 5-tuple are now sent with a different CID. In that case, the peer will see these packets arriving on the path that it wants to abandon, and can simply send a new Path Abandon.",
          "createdAt": "2023-02-26T19:17:05Z",
          "updatedAt": "2023-02-26T19:17:05Z"
        }
      ]
    },
    {
      "number": 138,
      "id": "I_kwDOGNtpaM5RDg5G",
      "title": "PATH_STATUS frame not registered in the IANA \"QUIC Frames Types\"",
      "url": "https://github.com/quicwg/multipath/issues/138",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Minor editorial issue, we just need to add the entry in the IANA Considerations section.",
      "createdAt": "2022-09-02T08:30:03Z",
      "updatedAt": "2022-10-21T08:55:57Z",
      "closedAt": "2022-10-21T08:55:57Z",
      "comments": []
    },
    {
      "number": 139,
      "id": "I_kwDOGNtpaM5RLIxi",
      "title": "Multipath transport parameter should negotiate which version of the draft we are using",
      "url": "https://github.com/quicwg/multipath/issues/139",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Now that we are starting seeing several multipath implementations and interoperability works between them, it could be useful to keep in mind to negotiate different transport parameter values when raising new draft versions, especially if we are going to add new frames and/or change their type ids.",
      "createdAt": "2022-09-05T12:31:41Z",
      "updatedAt": "2023-01-23T17:52:38Z",
      "closedAt": "2023-01-23T17:52:38Z",
      "comments": [
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You would change the transport parameter so that one bit includes the multipath support and the other bits a version number or add another transport parameter which is informal and provides the draft version ?",
          "createdAt": "2022-10-18T11:25:33Z",
          "updatedAt": "2022-10-18T11:25:33Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think as long as people don't start deploying it, I would prefer to only have one number and not separate draft numbers.",
          "createdAt": "2022-10-18T12:08:36Z",
          "updatedAt": "2022-10-18T12:08:36Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "I think that ship might have already sailed. Best to pick a versioning approach now and just roll with it: I see no benefit in delaying",
          "createdAt": "2022-10-18T12:11:47Z",
          "updatedAt": "2022-10-18T12:11:47Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My initial idea was to update the TP value used. Currently, it is `0xbabf`, but the next one could be `0xbac0`, `0xbac1`,... for instance (or larger values to be sure there will be no clash with other potential extensions).\r\n\r\nI think there are already first interoperability efforts between implementations. Given that previous versions had breaking changes, I think we should update that value when these occur. Since the latest published version, I don't think such changes are present (yet), but we should keep that in mind.",
          "createdAt": "2022-10-18T13:24:21Z",
          "updatedAt": "2022-10-18T13:25:09Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "+1 Quentin ",
          "createdAt": "2022-10-18T13:42:31Z",
          "updatedAt": "2022-10-18T13:42:31Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 Quentin. One parameter per version is much cleaner.",
          "createdAt": "2022-10-18T17:13:00Z",
          "updatedAt": "2022-10-18T17:13:00Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, but I don't think the next revision will need a new value as I believe we so far only merged clarification, right? Or do you already want a new value because the old one is already not compatible with even older version?\r\n\r\nShould we add a sentence that non compatible version in future will use a new value? Or is there no need to explicitly say that in the draft and make sure we do it next time?",
          "createdAt": "2022-10-21T10:25:44Z",
          "updatedAt": "2022-10-21T10:25:44Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For this version, if until the draft cut-off we do not merge anything breaking and only included clarification/editorial changes, I would be ok. But starting from the next version, I would expect different TP values.\r\n\r\nI don't actually expect any additional text, but that was rather an issue I raised when we kept the same TP value while PATH_STATUS was present in one version but not the other. Of course, we can add some text in a \"to be removed before being an RFC\" section to specify this, but this is not required for me.",
          "createdAt": "2022-10-21T16:04:08Z",
          "updatedAt": "2022-10-21T16:04:08Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #149 was merged with a new value. Will close this issue now.",
          "createdAt": "2023-01-23T17:52:38Z",
          "updatedAt": "2023-01-23T17:52:38Z"
        }
      ]
    },
    {
      "number": 140,
      "id": "I_kwDOGNtpaM5SRbCw",
      "title": "Undefined error code \"MP_CONNECTION_ERROR\"",
      "url": "https://github.com/quicwg/multipath/issues/140",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In section 3, we wrote \r\n```\r\nIf endpoint receives an unexpected value for the transport parameter\r\n   \"enable_multipath\", it MUST treat this as a connection error of type\r\n   MP_CONNECTION_ERROR and close the connection.\r\n```\r\nBut in section 13, we don't have this error code definition. ",
      "createdAt": "2022-09-21T04:29:27Z",
      "updatedAt": "2022-09-21T08:55:23Z",
      "closedAt": "2022-09-21T08:55:23Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds like a duplicate of #136 ? :)",
          "createdAt": "2022-09-21T07:44:14Z",
          "updatedAt": "2022-09-21T07:44:14Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yep, let's discuss in #136. ",
          "createdAt": "2022-09-21T08:55:23Z",
          "updatedAt": "2022-09-21T08:55:23Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "I_kwDOGNtpaM5Snbl2",
      "title": "enable_multipath only has 0 and 1 as possible value",
      "url": "https://github.com/quicwg/multipath/issues/142",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Current text says that\r\n\r\n```\r\nEndpoints use 2-bits in the value field for negotiating one or more PN spaces,\r\navailable option values are listed in Table 1.\r\n```",
      "createdAt": "2022-09-26T13:17:10Z",
      "updatedAt": "2022-10-21T10:21:22Z",
      "closedAt": "2022-10-21T10:21:22Z",
      "comments": []
    },
    {
      "number": 144,
      "id": "I_kwDOGNtpaM5Tu0YM",
      "title": "How to specify over which path to send PING frames?",
      "url": "https://github.com/quicwg/multipath/issues/144",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently we don't mention PING frames in the draft, however, I guess there are use cases where an app wants to send a ping over one specific or both paths. We should probably say something about handling of PING frames if multiple path are available.",
      "createdAt": "2022-10-11T14:49:34Z",
      "updatedAt": "2022-10-24T12:45:31Z",
      "closedAt": "2022-10-24T12:45:31Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We already have the path challenge frame, which provides a way to test continuity of a specific path. I think it is better to leave ping \"connection wide\", parallel to data frames.",
          "createdAt": "2022-10-11T17:33:08Z",
          "updatedAt": "2022-10-11T17:33:08Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "That okay as well but we still would need more guidance how to send ping frames when multiple path are available. E.g. try one and if it fails, try the next. or just send a ping on each path...?",
          "createdAt": "2022-10-11T18:32:22Z",
          "updatedAt": "2022-10-11T18:32:22Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It depends whether you want to test continuity on the forward path, the connection, or the return path.\r\n\r\nThe forward path test is used form example when doing PMTUD or probe time-out. In that case, the Ping frame is sent on the path that the implementation wants to test, and the corresponding ACK will indicate that the packet sent on the specified path has been received. This is exactly as expected, and I don't think it requires clarification.\r\n\r\nThe connection test is used for example in keep-alive mechanisms. There are many possibilities, because this is only used when the connection is almost idle. Should such connections try to keep many paths alive or just one? I suppose different applications will have different constraints. In any case, once they have decided that, sending Ping frames on the selected path or paths is straightforward.\r\n\r\nThe return path is different. I don't think it can be tested using Ping, because there is no way to force ACK frames to use a specific return path. If an application want to do that, they have to use Path Challenge.",
          "createdAt": "2022-10-11T19:46:28Z",
          "updatedAt": "2022-10-11T19:46:28Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I tend to agree with Christian. How the application wants to send PING frames on available paths to probe forward path looks more like an API issue than a specification one. And I agree that testing the return path is not easy (beyond PATH_CHALLENGE/PATH_RESPONSE), but in general \"forcing\" scheduling policies on the other end is not possible (you can only suggest, as with PATH_STATUS frames).",
          "createdAt": "2022-10-12T06:50:19Z",
          "updatedAt": "2022-10-12T06:50:19Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, it mainly an API issue. However, I think there is one point we need to address.\r\n\r\nThis is what RFC9000 says:\r\n\r\n> With this option, an endpoint could send a PING frame ([Section 19.2](https://www.rfc-editor.org/rfc/rfc9000.html#frame-ping)) periodically, which will cause the peer to restart its idle timeout period. Sending a packet containing a PING frame restarts the idle timeout for this endpoint also if this is the first ack-eliciting packet sent since receiving a packet. Sending a PING frame causes the peer to respond with an acknowledgment, which also restarts the idle timeout for the endpoint.\r\n\r\nIf you send a PING only one path and don't get a response, you won't reset the timer and might close the connection even though another path might still be alive. I think that would be wrong.\r\n\r\nSo I think the two options are you either send PINGs on all paths; or you try one path first and if you don't get a reply, reset the timer and try the next one. ",
          "createdAt": "2022-10-12T13:01:31Z",
          "updatedAt": "2022-10-12T13:04:40Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak, you are describing the \"keep alive\" scenario. Yes, keep alive becomes a bit tricky in multipath, because the client may want to select how many paths it wants to keep alive, and which ones. For example, a client with Wi-Fi and cellular may want to keep the cellular path alive, because it will survive a mobility event. It may want to do that even if it is sending traffic over Wi-Fi. That's a local implementation decision. How they do that, however, is straightforward: send a Ping on the path that you want to keep alive.\r\n\r\nI think we should let implementers decide what they want to do. If we do add some text, is should be about keep alive, not about ping. Something like:\r\n```\r\n## Keep Alive\r\n\r\nThe QUIC specification defines an optional keep alive process, see {{Section 5.3 of RFC9000}}.\r\nImplementations of the multipath extension should consider whether this keep alive process\r\nshould be applied to at least one path, all the paths, no path, or a specific subset of the paths.\r\nDifferent applications will likely require different strategies. Once the implementation has\r\ndecided to keep a specific path alive, it can do so by sending Ping frames on that path before\r\nthe idle timeout expires.\r\n```\r\n\r\n",
          "createdAt": "2022-10-12T21:05:53Z",
          "updatedAt": "2022-10-12T21:06:36Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we should recommend sending out ping frames periodically on all paths for keep alive purpose. Sometimes,  if you don't send data on a path for some time, then the path will become a \"black hole\" for UDP packets, probably due to NAT black hole. But I think we already address it in 4.3.4. Idle Timeout part of the draft with the following text:\r\n\r\n\"To avoid idle timeout of a path, endpoints can send ack-eliciting packets such as packets containing PING frames ([Section 19.2](https://rfc-editor.org/rfc/rfc9000#section-19.2) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)]) on that path to keep it alive. Sending periodic PING frames also helps prevent middlebox timeout, as discussed in [Section 10.1.2](https://rfc-editor.org/rfc/rfc9000#section-10.1.2) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)].\"",
          "createdAt": "2022-10-13T10:41:05Z",
          "updatedAt": "2022-10-13T10:41:05Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds like we can add some guidance in the implementation section!",
          "createdAt": "2022-10-13T13:18:58Z",
          "updatedAt": "2022-10-13T13:18:58Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with Quentin and Christian that the problem is application dependent. We should avoid over specifying things in this section. For example, sending PING frames on all paths does not seem a good suggestion given that a connection may use more than two paths. We could have something like\r\n\r\n## Keep Alive\r\n\r\nThe QUIC specification defines an optional keep alive process, see {{Section 5.3 of RFC9000}}.\r\nImplementations of the multipath extension should map this keep alive process to a number of paths.\r\nSome applications may wish to ensure that one path remains active, while others could prefer to have two or more active paths during the connection lifetime. Different applications will likely require different strategies. \r\nOnce the implementation has decided which paths to keep alive, it can do so by sending Ping frames on each of these paths before the idle timeout expires. Implementations should jitter their timers to avoid sending Ping frames at the same time over different paths.\r\n",
          "createdAt": "2022-10-18T11:22:37Z",
          "updatedAt": "2022-10-18T11:22:37Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> ## Keep Alive\r\n> The QUIC specification defines an optional keep alive process, see {{Section 5.3 of RFC9000}}. Implementations of the multipath extension should map this keep alive process to a number of paths. Some applications may wish to ensure that one path remains active, while others could prefer to have two or more active paths during the connection lifetime. Different applications will likely require different strategies. Once the implementation has decided which paths to keep alive, it can do so by sending Ping frames on each of these paths before the idle timeout expires. Implementations should jitter their timers to avoid sending Ping frames at the same time over different paths.\r\n\r\nRight now, we have some texts like sending ack-eliciting packets such as PING frames to keep a path alive in Section 4.3.4. But I think we can merge the above text to better clarify this implementation guidance.\r\n\r\n\r\n\r\n",
          "createdAt": "2022-10-18T17:10:26Z",
          "updatedAt": "2022-10-18T17:10:26Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "So for keep alive purposes if you decide to send pings only over one or at least not all open paths, that would mean that you may not get a ping reply on those paths and close the connection even though another path, that you just decide for what every reason to not ping, is still working. That does seem quite right do me?\r\n\r\nAlso not sure about the recommendation to jitter pings. Ideally paths are distinct (to some extend at least) but even if not a ping frame is quite low load. I guess if you send too many ping frames at ones this could lead to a burst that overflows the short buffers but I guess that would need in most cases at least 10 or more pings. Not sure we need to give this recommendation...? ",
          "createdAt": "2022-10-21T10:33:06Z",
          "updatedAt": "2022-10-21T10:33:06Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I create a new PR (#148) with the proposed text as a new subsection in the implementation consideration part. However, not sure if this is ready to merge or needs further discussion...",
          "createdAt": "2022-10-21T10:38:52Z",
          "updatedAt": "2022-10-21T10:38:52Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> So for keep alive purposes if you decide to send pings only over one or at least not all open paths, that would mean that you may not get a ping reply on those paths and close the connection even though another path, that you just decide for what every reason to not ping, is still working. That does seem quite right do me?\r\n> \r\n> Also not sure about the recommendation to jitter pings. Ideally paths are distinct (to some extend at least) but even if not a ping frame is quite low load. I guess if you send too many ping frames at ones this could lead to a burst that overflows the short buffers but I guess that would need in most cases at least 10 or more pings. Not sure we need to give this recommendation...?\r\n\r\nI actually have similar questions. I think to keep it simple, if you want to keep paths alive, just send pings on every path. Sending pings at the same time over different paths should not be problematic as long as you have the frequency control.",
          "createdAt": "2022-10-22T04:40:53Z",
          "updatedAt": "2022-10-22T04:40:53Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We already have some text about how the PING frames influence the paths in Section [idle timeout](https://github.com/quicwg/multipath/blob/main/draft-ietf-quic-multipath.md#idle-timeout-idle-time-close). It mostly depends on implementations. We could simply add: \r\n> Different applications MAY require different keep alive strategies. Once the implementation has decided to keep a specific path alive, it can do so by sending Ping frames on that path before the idle timeout expires.",
          "createdAt": "2022-10-24T03:52:53Z",
          "updatedAt": "2022-10-24T03:52:53Z"
        }
      ]
    },
    {
      "number": 150,
      "id": "I_kwDOGNtpaM5UjVlj",
      "title": "Do we really need the PNS ID? And what happens when the connection ID changes on a single path?",
      "url": "https://github.com/quicwg/multipath/issues/150",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "If the connection ID is changed but the 5-tuple stays the same, the path ID changes as well but the packet number space ID sticks with the old/initial value and can be identified based on the 5 tuple. Is that correct? If so we should explain that somewhere.\r\n\r\nAlternatively, do we really need both a path ID and the PNS ID? Even for the single packet number space, you can simply use the normal ACK frame and therefore would not need the PNS ID.",
      "createdAt": "2022-10-21T15:55:48Z",
      "updatedAt": "2023-02-21T15:32:59Z",
      "closedAt": "2023-02-21T15:32:59Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Currently, from my understanding, if the CID changes over a path, then both the path ID and the packet number space (ID) change as well, given that you map the packet number space with the CID used. Also, if for some reason a passive migration (e.g. NAT rebinding) happens when changing the CID, the 5-tuple would change from the peer's viewpoint and I'm not sure how your mechanism's understanding would work there.\r\n\r\nRegarding the path ID and the PNS ID, IIRC we initially wanted to keep the door open to different path IDs and PNS IDs. Now, I'm not sure we want to use something else than the CID (sequence number) and if we simplify the draft to only describe the situation with non-zero length CIDs, we may get rid of these notions.",
          "createdAt": "2022-11-02T09:03:33Z",
          "updatedAt": "2022-11-02T09:03:33Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, we need to more clear in the draft what's updated when. Because that wasn't clear to me.\r\n\r\nIf we go for MPNS, we should consider removing the difference. If we keep both, we might need slightly more clarification of why both are needed.\r\n\r\nBut let's wait with this issue until we decided about PNS.",
          "createdAt": "2022-11-02T13:18:00Z",
          "updatedAt": "2023-02-21T13:04:03Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Opened #169 instead",
          "createdAt": "2023-02-21T15:32:58Z",
          "updatedAt": "2023-02-21T15:32:58Z"
        }
      ]
    },
    {
      "number": 151,
      "id": "I_kwDOGNtpaM5UjYPB",
      "title": "How to identify path initiation with zero-length connection ID?",
      "url": "https://github.com/quicwg/multipath/issues/151",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "If I received a packet on a new 5-tuple with a connection ID, I can associate it to an existing QUIC connection. However, if the packet does not have a connection ID, I can't. So I guess to make multipath work without use of connection IDs, whenever I receive a potential QUIC packet on any 5-tuple (that is not an initial packet or version negotiated packet), I would need to try to decrypt it with all possible keys of all open quic connections (or at least the one that don't use a connection ID). Do we really want to support that?\r\n\r\nI guess you can always just drop certain packets and only try to decrypt packets with the same destination address and port, or with a destination address and port that was somehow previously announced to the client. However, we should further discuss this in the draft or decide to require a connection ID (at least for the additional path; maybe the initial path could still have zero-length connection ID?).",
      "createdAt": "2022-10-21T16:05:24Z",
      "updatedAt": "2023-02-14T14:54:25Z",
      "closedAt": "2023-02-14T14:54:25Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "out-dated with merge of #149 ",
          "createdAt": "2023-02-14T14:54:25Z",
          "updatedAt": "2023-02-14T14:54:25Z"
        }
      ]
    },
    {
      "number": 152,
      "id": "I_kwDOGNtpaM5Ujbg0",
      "title": "Do we want to support zero-length connection ID and therefore single packet number space?",
      "url": "https://github.com/quicwg/multipath/issues/152",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "I created a PR that moves the single packet number space option into the appendix: #149 \r\n\r\nThis PR still support zero-length connection ID on the initial path and it also still supports reception of packets with zero-length connection ID (given path migration with zero-length ID is also not strictly forbidden). However, it requires the sender to use a non-zero connection ID when opening an additional path and recommends to send non ack-elicting packet only over one active path.\r\n\r\nThe intention is to leave the door open for experimentation but still make the spec shorter and more concise. However, I guess we could also decide to remove the single packet number space discussion entirely from this draft, or even allow zero-length connection ID packets only for migration but not for simultaneous use.",
      "createdAt": "2022-10-21T16:17:51Z",
      "updatedAt": "2023-02-14T14:57:21Z",
      "closedAt": "2023-02-14T14:57:21Z",
      "comments": [
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "I have had a similar thought in the past. It really might be worth the reduction in complexity to just say you have to use a CID if you do multipath. I think I would be ok with that restriction.",
          "createdAt": "2022-10-21T16:20:28Z",
          "updatedAt": "2022-10-21T16:20:28Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it might be useful to get inputs from the audience to know whether we want to keep support for zero-length CID for basic multipath. Given the adaptations that single packet number space requires, I wonder if this should be a separate draft that would extend the basic one (i.e., this one).",
          "createdAt": "2022-11-02T09:10:37Z",
          "updatedAt": "2022-11-02T09:10:37Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "This is more of a question, but is there a privacy concern by trying to establish a new path when zero-length CID is used?\r\n\r\n[RFC 9000 section 9.5](https://www.rfc-editor.org/rfc/rfc9000.html#section-9.5-7) states that:\r\n> An endpoint SHOULD NOT initiate migration with a peer that has requested a zero-length connection ID, because traffic over the new path might be trivially linkable to traffic over the old one. If the server is able to associate packets with a zero-length connection ID to the right connection, it means that the server is using other information to demultiplex packets. For example, a server might provide a unique address to every client -- for instance, using HTTP alternative services [[ALTSVC](https://www.rfc-editor.org/rfc/rfc9000.html#ALTSVC)]. Information that might allow correct routing of packets across multiple network paths will also allow activity on those paths to be linked by entities other than the peer.\r\n\r\nIIUC, when zero-length CID is being used on a multipath QUIC connection, paths shared by the connection would be trivially linkable, regardless of if a non-zero-length CID is used to establish a new path.\r\n\r\nAssuming that is the case, I think we have to discourage endpoints from using zero-length CIDs with multipath QUIC as well, even if we are to provide support for that.",
          "createdAt": "2022-11-07T12:59:52Z",
          "updatedAt": "2022-11-07T12:59:52Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we got sufficient consensus from IETF115 to remove support for single packet number space (waiting for confirmation from the ML). For zero-length CID, we may still keep this issue open, but as an individual, I agree with Kazuho's viewpoint.",
          "createdAt": "2022-11-07T14:09:57Z",
          "updatedAt": "2022-11-07T16:01:35Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> This is more of a question, but is there a privacy concern by trying to establish a new path when zero-length CID is used?\r\n> \r\n> [RFC 9000 section 9.5](https://www.rfc-editor.org/rfc/rfc9000.html#section-9.5-7) states that:\r\n> \r\n> > An endpoint SHOULD NOT initiate migration with a peer that has requested a zero-length connection ID, because traffic over the new path might be trivially linkable to traffic over the old one. If the server is able to associate packets with a zero-length connection ID to the right connection, it means that the server is using other information to demultiplex packets. For example, a server might provide a unique address to every client -- for instance, using HTTP alternative services [[ALTSVC](https://www.rfc-editor.org/rfc/rfc9000.html#ALTSVC)]. Information that might allow correct routing of packets across multiple network paths will also allow activity on those paths to be linked by entities other than the peer.\r\n> \r\n> IIUC, when zero-length CID is being used on a multipath QUIC connection, paths shared by the connection would be trivially linkable, regardless of if a non-zero-length CID is used to establish a new path.\r\n> \r\n> Assuming that is the case, I think we have to discourage endpoints from using zero-length CIDs with multipath QUIC as well, even if we are to provide support for that.\r\n\r\nWhy would the paths be \"trivially linkable\"? In the normal case, they would have different client IP addresses--how would the paths otherwise go different ways through the network?\r\n\r\nFWIW, I think it is quite straight forward to use multiple PN spaces and zero-length client CIDs.",
          "createdAt": "2022-11-09T14:15:38Z",
          "updatedAt": "2022-11-09T14:15:38Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue for now as PR #149 was merged. We can open a separate new issue on the question if we still want to enable server-to-client zero-CID with multiple packet number spaces.",
          "createdAt": "2023-02-14T14:57:21Z",
          "updatedAt": "2023-02-14T14:57:21Z"
        }
      ]
    },
    {
      "number": 153,
      "id": "I_kwDOGNtpaM5XrIoe",
      "title": "Any implementations of multipath quic?",
      "url": "https://github.com/quicwg/multipath/issues/153",
      "state": "CLOSED",
      "author": "nandsky",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Is there any multipath implementations besides xquic (\"https://github.com/alibaba/xquic/tree/beta/multipath-ietf-draft-01\") ?\r\n\r\nI would appreciate for any help.",
      "createdAt": "2022-12-01T08:57:21Z",
      "updatedAt": "2023-01-23T17:51:03Z",
      "closedAt": "2023-01-23T17:51:02Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To my knowledge, there are two other open-source implementations of Multipath QUIC: picoquic (https://github.com/private-octopus/picoquic) and \"work-in-progress\" Cloudflare's quiche (https://github.com/cloudflare/quiche/pull/1310). However, the specifications will again have breaking changes soon and I don't think we started interoperability tests yet (so beware for dragons). ",
          "createdAt": "2022-12-01T10:26:47Z",
          "updatedAt": "2022-12-01T10:26:47Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a question that is better suited for the mailing list. Feel free to shoot an email to quic@ietf.org ! But I will close this issue for now!",
          "createdAt": "2023-01-23T17:51:02Z",
          "updatedAt": "2023-01-23T17:51:02Z"
        }
      ]
    },
    {
      "number": 154,
      "id": "I_kwDOGNtpaM5cgyXW",
      "title": "Only use either Path ID or PNS ID",
      "url": "https://github.com/quicwg/multipath/issues/154",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "From PR #149 from @qdeconinck:\r\n\r\n> Maybe it can be addressed later, but given that the Path Identifier and the PNS ID are now always the same, we may simplify this section and only introduce one concept (i.e., the Path Identifier).",
      "createdAt": "2023-01-22T12:24:23Z",
      "updatedAt": "2023-02-22T07:57:18Z",
      "closedAt": "2023-02-22T07:57:18Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's do another editorial pass and evtl. some re-org first and then address this issue. I think we all already agreed that we only need one of the two. So we only need to decide with name we keep.",
          "createdAt": "2023-01-22T12:25:14Z",
          "updatedAt": "2023-02-14T14:58:37Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I prefer to use the name \"Path ID\", as it is more intuitive in the context of multipath.",
          "createdAt": "2023-02-01T08:58:37Z",
          "updatedAt": "2023-02-01T08:58:37Z"
        }
      ]
    },
    {
      "number": 155,
      "id": "I_kwDOGNtpaM5cgyhk",
      "title": "Get rid of the Identifier Type for the PATH_ABANDON and PATH_STATUS frames",
      "url": "https://github.com/quicwg/multipath/issues/155",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From PR #149 by @qdeconinck:\r\n\r\n> We can of course delegate this on a subsequent PR, but I think we should get rid of the Identifier Type for the PATH_ABANDON and PATH_STATUS frames. Also, I wonder it the value 1 should rather be the default (given https://github.com/quicwg/multipath/issues/137).",
      "createdAt": "2023-01-22T12:26:58Z",
      "updatedAt": "2023-01-31T03:16:54Z",
      "closedAt": "2023-01-31T03:16:54Z",
      "comments": []
    },
    {
      "number": 157,
      "id": "I_kwDOGNtpaM5ctG8D",
      "title": "Error code for missing CID during handshake",
      "url": "https://github.com/quicwg/multipath/issues/157",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "no-action-needed"
      ],
      "body": "Which the newly merged PR #149, the doc now says:\r\n\r\n\"If the parameter is set to 1, both endpoints MUST use non-zero connection IDs. If an enable_multipath parameter set to 1 is received and the carrying packet does not contain a non-zero length connection ID, the receiver MUST treat this as a connection error of type TRANSPORT_PARAMETER_ERROR (specified in {{Section 20.1 of QUIC-TRANSPORT}}) and close the connection.\"\r\n\r\nIs it okay to use the TRANSPORT_PARAMETER_ERROR code for this or do we need a different/new one?",
      "createdAt": "2023-01-24T16:54:22Z",
      "updatedAt": "2023-02-14T14:53:11Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it should be Okay. Basically, if a packet uses zero-length CID, the enable_multipath parameter should not be set to 1, and when it does, it is a TRANSPORT_PARAMETER_ERROR.",
          "createdAt": "2023-02-01T09:08:48Z",
          "updatedAt": "2023-02-01T09:08:48Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with the TRANSPORT_PARAMETER_ERROR solution (not sure it is valuable to define a new value here).",
          "createdAt": "2023-02-06T14:49:30Z",
          "updatedAt": "2023-02-06T14:49:30Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, I think we all agree. I'll leave the issue open until the next meeting to double-check with the group. No action needed so far.",
          "createdAt": "2023-02-14T14:51:44Z",
          "updatedAt": "2023-02-14T14:51:44Z"
        }
      ]
    },
    {
      "number": 158,
      "id": "I_kwDOGNtpaM5ctIPi",
      "title": "Clarify use of RETIRE_CONNECTION_ID frame",
      "url": "https://github.com/quicwg/multipath/issues/158",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 9000 defines a way to request a peer to retire old CIDs, but only in-sequence (i.e., all CIDs with a sequence number less than n). This doesn't work when multiple CIDs are in use over different paths and you only want to retire one of them.\r\n\r\n(issue originally raised by @michael-eriksson)",
      "createdAt": "2023-01-24T16:58:02Z",
      "updatedAt": "2023-02-21T15:46:51Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think you actually mean the Retire Prior To field in the NEW_CONNECTION_ID frame? In the RETIRE_CONNECTION_ID frame, the sequence number field is the connection ID being retired, so it should be fine, but yes, in the context of multipath, we should apply Retire Prior To field in NEW_CONNECTION_ID with caution. I am wondering shall we say that when multipath is in use, an endpoint SHOULD NOT use Retire Prior To when issuing a new connection ID, but instead, retire CID one by one with the use of RETIRE_CONNECTION_ID frame?",
          "createdAt": "2023-02-18T04:31:41Z",
          "updatedAt": "2023-02-18T04:31:41Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "Yes, I mean that field. Note that the Retire Prior To field is a request to the peer to use RETIRE_CONNECTION_ID frames to retire CIDs issued by the first party. This means that you can not replace the Retire Prior To field with RETIRE_CONNECTION_ID frames as you suggest, since they work in \"different directions\".\r\n\r\nhttps://www.rfc-editor.org/rfc/rfc9000.html#section-5.1.2-5",
          "createdAt": "2023-02-20T10:48:16Z",
          "updatedAt": "2023-02-20T10:48:16Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, there is no direct relation between the ordering in which you receive the CIDs and the order of removing them in a multipath context. I'm also not sure that an endhost is required to use available DCIDs \"in-sequence\" (i.e., it may use the CID with seq 2 before using the CID with seq 1).\r\n\r\nBasically, let's consider the following example. Assume a two path scenario where the client uses DCID seq 0 on a path A and DCID seq 2 on a path B. At some point (e.g., the server might notice a NAT rebinding on path B), the server would like the client to retire the DCID with seq 2. The only way the server could force this behaviour is to send NEW_CONNECTION_ID frames with Retire Prior To set to 3, which would force the client to send RETIRE_CID frames. However, doing so would also force the client to retire DCID seq 0, which might not be required/needed/wanted.\r\n\r\nFWIW, [one of the previous multipath proposals](https://datatracker.ietf.org/doc/draft-deconinck-quic-multipath/07/) proposed to let the CID issuer split the CIDs into \"uniflow spaces\", i.e., pre-assign CIDs to specific paths. Such a design enables retiring a specific CID using the Retire Prior To without affecting the other paths, as the CID seq is path-specific. However, such a solution adds more complexity than the current draft, which is likely not desirable.\r\n\r\nIn the end, I'm not sure with the current proposal the aforementioned issue is a big one, but it would indeed deserve some documentation/discussion in the draft.",
          "createdAt": "2023-02-20T11:29:16Z",
          "updatedAt": "2023-02-20T11:29:16Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually if the other peer asks you to retire a CID that is currently in use, you can simply use a new CID on the path (this is true for both the uni- as well as multi-path case). As such this is also related to issue #160 and we should clarify these things.",
          "createdAt": "2023-02-21T12:59:34Z",
          "updatedAt": "2023-02-21T12:59:34Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created PR #171 to clarify what happens if no new CID is available. Maybe this helps here as well?",
          "createdAt": "2023-02-21T14:48:56Z",
          "updatedAt": "2023-02-21T14:48:56Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> Actually if the other peer asks you to retire a CID that is currently in use, you can simply use a new CID on the path (this is true for both the uni- as well as multi-path case). As such this is also related to issue #160 and we should clarify these things.\r\n\r\nDepending on the CID sequence numbers, it may be necessary for the peer to ask you to retire the CIDs also on *some or all other paths* (and thus also generate, install and signal a number of new CIDs) even if it just wants you to retire it on one of them. This is clearly suboptimal.",
          "createdAt": "2023-02-21T15:12:59Z",
          "updatedAt": "2023-02-21T15:12:59Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think that's problem. The question why would the CID issuer ask you to retire a CID. Usually this is probably some kind of clean up and in this cases it's actually the purpose that all old CID are replaces with newer ones. I believe this simply how it is intended. However, sure how this is actually implemented and used at the moment.",
          "createdAt": "2023-02-21T15:46:50Z",
          "updatedAt": "2023-02-21T15:46:50Z"
        }
      ]
    },
    {
      "number": 159,
      "id": "I_kwDOGNtpaM5ctJba",
      "title": "Clarify that there are no limitations on the use of server IP address",
      "url": "https://github.com/quicwg/multipath/issues/159",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "This draft only enables clients to open a new path, so the most common scenario is that the client has another interface and opens a new path from a new IP address. However, if the client knows another IP that the server is listing on to accept new paths for an existing quic connection (e.g. provided on the higher layer or out of band), that can be used as well. It would be useful to discussion this case more in the draft to ensure that it is clear that this case is supported.",
      "createdAt": "2023-01-24T17:01:16Z",
      "updatedAt": "2023-02-22T05:02:31Z",
      "closedAt": "2023-02-22T05:02:31Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think as people who implement multipath will mostly refer to this draft, we may want to clarify all scenarios supported by this draft: (1) client has multiple IPs while server listens on single IP, (2) client uses single IP while server listens on multiple IP, and (3) client uses multiple IPs and the server also uses multiple IPs.",
          "createdAt": "2023-02-18T03:42:18Z",
          "updatedAt": "2023-02-18T03:42:18Z"
        }
      ]
    },
    {
      "number": 160,
      "id": "I_kwDOGNtpaM5ctL1R",
      "title": "Clarify support of migration",
      "url": "https://github.com/quicwg/multipath/issues/160",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "RFC9000 allows endpoints to change the CID any time on a path. So it's not automatically a new path if a new CID is seen. This should be noted explicitly in the draft.\r\n\r\nFurther, also migration can happened without endpoint control (NAT rebinding). In this case the server will see a new 4-tuple but no CID change. In line with RFC9000 the server should start path validation and then the client should use a new CID. In case of multipath support we need to clarify if and when this is treated as a new path. If seen as a new path, we would probably need to close the old one (which however is not functional anymore). However, if e.g. only the port number changes, RFC9000 also would also to not reset the congestion control. In this case it would make sense to not treat it as a new path.",
      "createdAt": "2023-01-24T17:07:23Z",
      "updatedAt": "2023-02-24T08:01:39Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree. I think we might add sth like:\r\n<pre>\r\n   New CID ---yes---> new 4-tuple ---yes---> new path\r\n       |                  |\r\n       |                  No\r\n       No                 |\r\n       |                  ---> use new CID on same path\r\n       |\r\n       ----->4-tuple change----yes----> only port number change ----yes----> NAT rebinding ( do not rest CC)\r\n                 |                                 |\r\n                 |                                 No\r\n                 No                                |\r\n                 |                                 -----> connection migration & reset CC\r\n                 |\r\n                  -------> no change\r\n</pre>",
          "createdAt": "2023-02-18T04:58:15Z",
          "updatedAt": "2023-02-18T05:12:20Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "@yfmascgy, I think your decision tree above is too brittle. In particular, if an implementation has a time-based CID change policy, it's very easy that both the CID and the NAT binding change at the same time after an idle period.\r\n\r\nAs I have indicated elsewhere, I think that there should be a PATH_SETUP (or maybe PATH_MANAGEMENT) frame, where path setup, CID change etc can be explicitly signaled. Implicit path setups and CID changes are just too vague and error prone...",
          "createdAt": "2023-02-21T15:04:41Z",
          "updatedAt": "2023-02-21T15:04:41Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created PR #172 that states that any path validation creates a new path (even if only the port changes). I believe this is more clear and avoids inconsistencies on both sides. However, we might discuss this case a bit more.",
          "createdAt": "2023-02-21T15:43:58Z",
          "updatedAt": "2023-02-21T15:43:58Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @yfmascgy, I think your decision tree above is too brittle. In particular, if an implementation has a time-based CID change policy, it's very easy that both the CID and the NAT binding change at the same time after an idle period.\r\n>  \r\nThe current draft manages the path idle issues with \"Sending periodic PING frames also helps prevent middlebox timeout.\" Sending periodic PINGs to keep a path alive should greatly reduce the chance of such a NAT rebinding. So I am wondering is it a corner case? and is it worth adding new frames to address it?\r\n\r\n",
          "createdAt": "2023-02-24T08:01:39Z",
          "updatedAt": "2023-02-24T08:01:39Z"
        }
      ]
    },
    {
      "number": 162,
      "id": "I_kwDOGNtpaM5dJcsq",
      "title": "Use of normative language for congestion control",
      "url": "https://github.com/quicwg/multipath/issues/162",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "Currently the draft say:\r\n\r\n> Senders MUST manage per-path congestion status, and MUST NOT send more data on a given path than congestion control on that path allows. This is already a requirement of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)].[\u00b6](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-5-1)\r\n\r\nHowever, we should not use normative language in this draft but just point to RFC9000 instead as things are defined normatively there already.\r\n\r\nBtw. this reference should point to section 13.3 (\"Upon detecting losses, a sender MUST take appropriate congestion control action.\") and 9.4 (\"Packets sent on the old path MUST NOT contribute to congestion control or RTT estimation for the new path.\") of RFC9000 specifically and maybe also to RFC9002 directly.",
      "createdAt": "2023-01-30T16:21:39Z",
      "updatedAt": "2023-02-22T03:07:51Z",
      "closedAt": "2023-02-22T03:07:51Z",
      "comments": []
    },
    {
      "number": 164,
      "id": "I_kwDOGNtpaM5eTtp2",
      "title": "Unclear (inconsistent?) mapping of Path ID in PATH_STATUS and PATH_ABANDON frames",
      "url": "https://github.com/quicwg/multipath/issues/164",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "Since #156, we now define the Path ID as (Section 1.1)\r\n```\r\nthe sequence number of the destination Connection ID\r\nused for sending packets on that particular path.\r\n```\r\n\r\nAnd the definition of the `Path ID` as the field of PATH_ABANDON and PATH_STATUS frames directly maps to that identifier path (i.e., the sequence number of the destination Connection ID used for sending packets on that particular path, Sections 8.1 and 8.2).\r\n\r\nBut in Section 6.2, the example states that \r\n```\r\n[the Path ID] identifies the path by the sequence number of the received packet's DCID over that path\r\n```\r\n\r\nI believe the current text is unclear and should be fixed. Yet, I see two possible ways of doing so. We should either state that\r\n\r\n- the `Path ID` field of these frames refer to the Path ID used by the receiver of the frame, or\r\n- add some information to indicate that it refers to the Path ID viewed from the sender's/receiver's viewpoint (that could be encoded as a bit in the frame's type)",
      "createdAt": "2023-02-13T12:05:04Z",
      "updatedAt": "2023-02-22T03:07:38Z",
      "closedAt": "2023-02-22T03:07:38Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Is there any use case for either using the sender's or receiver's ID? If not, I'd prefer we simply choose one and define it clearly.",
          "createdAt": "2023-02-14T14:30:34Z",
          "updatedAt": "2023-02-14T14:30:34Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "(P.S.: I think the text in the example is just wrong. I think I messed this up in #156.)",
          "createdAt": "2023-02-14T14:32:24Z",
          "updatedAt": "2023-02-14T14:32:24Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IMHO it makes more sense to me to use the sender's ID by default, especially if we consider only client-initiated paths.",
          "createdAt": "2023-02-15T08:29:59Z",
          "updatedAt": "2023-02-15T08:29:59Z"
        }
      ]
    },
    {
      "number": 169,
      "id": "I_kwDOGNtpaM5e-kdQ",
      "title": "Does the Path ID change if the CID changes or not?",
      "url": "https://github.com/quicwg/multipath/issues/169",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Currently it seems that the assumption is that the Path ID changes if the CID changes, however, this makes handling of MP frames that contain the path ID more complicated because you have to remember the old path ID to process these frames even when the CID is retired. Is there any good reason why we don't keep the Path ID constant over the life time of a path?",
      "createdAt": "2023-02-21T13:11:28Z",
      "updatedAt": "2023-03-06T08:53:52Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Also note if you retire an CID (e.g. because it's requested by the peer in the NEW_CONNECTION_ID Frame Retire Prior To field) and you don't have a new CID available anymore (yes, this should usually not happen), you cannot send a PATH_ABANDON frame anymore because you don't have valid Path ID (and we don't have the type field anymore).",
          "createdAt": "2023-02-21T13:36:47Z",
          "updatedAt": "2023-02-21T13:36:47Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The sequence number is tied to the CID, because of encryption. If we tie it to something else, we are just moving the problem, because then we have to worry about mapping the CID to a path ID.\r\n\r\nYes, this has a couple of constraints. If a CID is actually retired, there is not way to acknowledge the packets that were sent using that CID. Effectively, they are treated as lost. The obvious solution is to write \"don't do that\" guidelines. Basically, wait a couple RTO before retiring a CID, so the ACK have time to arrive.\r\n\r\nThe other constraint is that ACK-MP carry the ID used when sending the packets. This is not a huge constraint, but it is an exception to the proposed \"same path for ACK\" policy. But the main argument for that same path policy is about computing timers. That argument does not really apply when renewing the CID.\r\n\r\nSame issue for the path abandon. If packets are sent on the same four tuple with a new CID, just abandon that.\r\n\r\n",
          "createdAt": "2023-02-26T19:17:54Z",
          "updatedAt": "2023-02-26T19:17:54Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In addition to the encryption consideration as mentioned above. I remember there was another reason why the sequence number of CID was chosen to identify a path. It brings us back to the definition of what is a path and what is a path identifier.\r\n\r\nBy definition of the draft and RFC9000, a path is defined by a 4-tuple {source IP address, source port number, destination IP address, destination port number}, and a path ID is an identifier used to identify a path. That means we need to construct a mapping between a path ID and the associated 4-tuple.\r\n\r\nHowever, there are couple of issues. First, the client's view and the server's view of the 4-tuple are not the same due to NAT.  Second, the 4-tuple can change due to (1) network path migration (think about the case where our phone's wifi is connected to a wifi router that has two outbound networks to the internet, one wireline and one satellite, and the router can switch between the two), and (2) NAT rebinding. If we use a constant path ID, then the path ID does not uniquely identify a 4-tuple, but instead, there will be a one-to-many mappings from a path ID to 4-tuples. \r\n\r\nIn #179, Quentin proposed to use entry point IDs to identify a path, I think this identification is stable in the case of NAT rebinding, where the 4-tuple changes but the physical path is actually unchanged. However, the problem is that when the underlying path has changed (in the above case, a router may switch packet from the wireline to the satellite to perform failover) while the entry point IDs on the end-hosts remain unchanged, then we end up using the same path identifier to identify different paths.\r\n\r\nThese problems can be solved when using QUIC's CID sequence number to identify a path. First, it allows the client and server to identify a path separately as they see different 4-tuples. Second, when 4-tuple changes, we eventually use new CIDs to communicate and thus, the mapping between a path ID and the 4-tuple remains as a one-to-one mapping. Third, we are logically correct in the case when the physical path indeed has migrated while the endhost interfaces are not changed.\r\n\r\n",
          "createdAt": "2023-02-27T04:49:49Z",
          "updatedAt": "2023-02-27T06:57:17Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think that \"this makes handling of MP frames that contain the path ID more complicated\". You have a code object holding the list of packets to acknowledge (receiver side), or an object containing the list of packets not acknowledged yet (sender side). These objects are tied to the connection ID. Nothing particularly complicated there: the sender knows exactly which connection ID it uses for a given packet; the receiver knows exactly what connection ID was carried in the packets that it received.\r\n\r\nThe issue that you mention comes from the ambiguity of \"Abandon Path\", \"Retire connection ID\", and \"retire previous connection ID\". We have to be clear about what that means:\r\n\r\n* Abandon Path means \"please do not send any more packets on that path\". No ambiguity there. It also implies: \"you can free the resource of that path at your convenience\". We need to specify how and when, there is some leeway.\r\n* Retire Connection ID\" means \"I have deleted all resource tied to the connection ID on my side\", which implies \"I will not use this connection ID to send any new packet\" and also \"I will not accept any new MP-ACK sent using the sequence number of that CID\".\r\n* \"retire previous CID\" means \"please retire these CID quickly\". RFC 9000 says \"The endpoint SHOULD continue to accept the previously issued connection IDs until they are retired by the peer\", so there is some leeway.\r\n\r\nSo I guess we have the following actions:\r\n\r\n* A node decides to stop using a CID, i.e., not send any more packet using that CID. The node can do that at any time on its own will, and SHOULD do that immediately after receiving an Abandon_Path frame, or after receiving a \"retire before\" indication.\r\n* The node should wait 3*RTO after that decision, so pending acknowledgements have enough time to arrive.\r\n* After 3*RTO, the node deletes the local resource, including the list of packets not acknowledged yet. Those packets should be considered lost.\r\n* The node then sends a Retire Connection ID frame.\r\n* The node receiving the Retire Connection ID frame deletes the resource associated with the CID, i.e., the list of packets to acknowledge. If the peer did wait long enough before sending Retire Connection ID frame, that list should be empty. If it is not, too bad, it can still be deleted, these packets will never be acknowledged, but the sender of the CID does not care.\r\n* After that, a node can still received an MP-ACK or an Abandon_Path mentioning an old CID, because we do have race conditions. Such frames should be silently ignored.\r\n\r\nDoes that remove the ambiguities? ",
          "createdAt": "2023-02-27T06:13:40Z",
          "updatedAt": "2023-02-27T06:13:40Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the current specification (i.e., rely on sequence number of Destination CID to identify a path in PATH_STATUS/PATH_ABANDON) works fine as long as 1) the perceived 4-tuple of a network path remains stable, or 2) the DCID used on a network path remains stable. Also, if the peer has no timing restrictions about when retiring a CID, this is fine as well.\r\n\r\nHowever, when receiving a NEW_CONNECTION_ID frame with a \"Retire Prior To\" field forcing the receiver to remove DCIDs, RFC 9000 states that \"Upon receipt of an increased Retire Prior To field, the peer MUST stop using the corresponding connection IDs and retire them with RETIRE_CONNECTION_ID frames before adding the newly provided connection ID to the set of active connection IDs.\". Not sure the receiver of the NEW_CONNECTION_ID may delay the retirement of DCIDs for a long period. Once retired, the host cannot reference the paths identified by the retired CIDs in, i.e., PATH_ABANDON frames, which may be an issue if the peer does not provide enough new CIDs.\r\n\r\nBut the current path identification is fragile when one host (the client) changes the DCID used over a *same perceived* 4-tuple, but that the other (the server) *perceives a different* 4-tuple (typical case of NAT rebinding). The client will keep a single view of that path, but the server will have two different views having different 4-tuples and Path IDs for an actual same path, hence bringing path identification ambiguity here.\r\n\r\n@yfmascgy As long as the 4-tuple does not change, there is no \"path change\" from the QUIC viewpoint. Having \"backbone router path migration\" will be transparent to the endmost (although the path characteristic conditions such as the latency and bandwidth may change). The EntryPoint ID proposal is mainly to keep stable path identification in PATH_ABANDON/PATH_STATUS frames when 1) CIDs change and the sender's perceived 4-tuple is stable but the receiver's perceived 4-tuple is not, and 2) when there is no more usable CID over the (network) path to reference.",
          "createdAt": "2023-02-27T10:33:12Z",
          "updatedAt": "2023-02-27T10:33:12Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So the scenario that you worry about is \"what if the client sleeps for a while, then decides to switch the connection ID before sending new packets\". This is actually a recommended behavior, for privacy reasons, so we have better get it right.\r\n\r\nI think that the current proposal mostly works. After the migration, the new packets sent by the client will be tied to the new CID on both sides -- see previous points about tying number space to connection IDs. There is no ambiguity about packet number space, packets will be correctly acknowledged, etc. The Abandon_Path or MP_ACK frames will not be ambiguous: they refer to the number space, not to the abstract concept of Path.\r\n\r\nThe main problem is that the server will probably NOT treat the incoming packet with a new CID as a \"nat rebinding\". The algorithm pretty much defines NAT rebinding as \"same CID, different addresses or ports\". The conforming server will treat that as a new path, perform address validation, etc. If the server tries to use the old \"path\", the packets will be dropped by the NAT. The connection will recover eventually, but after some packet losses, and yes, that's not desirable.\r\n\r\nI think the simplest solution is for the client to somehow tell the server what it is doing. \"These packets carry CID sequence number 7. For me, this is the same path as when previously using CID sequence number 4.\" My gut feeling is that this can be achieved by sending an \"Abandon_Path(id=4, errorCode=CidRenewal)\" when starting sending with CID 7. Specify something like that in the spec, document the error code, etc. ",
          "createdAt": "2023-02-27T15:38:20Z",
          "updatedAt": "2023-02-27T15:38:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Please note that PR #172 is related here. In this PR I propose that a new 4-tuple is always treated as a new path and therefore always triggers path validation which then ensures to create a new path on both sides. I thought a while about this scenario when working on this PR and believe that's the easiest, non ambiguous solution which I think is inline with the multipath idea.\r\n\r\nFurther, I think that en-/decryption and the path ID do not need to be entangled. Of course we need to use the CID to decrypt the packet, however, I don't think that changing the CID (without changes of the 4-tuple) creates a new packet number space. This is not the case in RFC9000 and should not be the case here.",
          "createdAt": "2023-02-27T15:53:07Z",
          "updatedAt": "2023-02-27T15:53:07Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Please note that PR #172 is related here. In this PR I propose that a new 4-tuple is always treated as a new path and therefore always triggers path validation which then ensures to create a new path on both sides. I thought a while about this scenario when working on this PR and believe that's the easiest, non ambiguous solution which I think is inline with the multipath idea.\r\n> \r\nI actually agree with this idea. It is simple and non-ambiguous. Also note that NAT rebinding is a low possibility event. I think the cost for treating a new 4-tuple as a new path is negligible.\r\n\r\n",
          "createdAt": "2023-02-28T06:44:41Z",
          "updatedAt": "2023-02-28T06:44:41Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @yfmascgy As long as the 4-tuple does not change, there is no \"path change\" from the QUIC viewpoint. Having \"backbone router path migration\" will be transparent to the endmost (although the path characteristic conditions such as the latency and bandwidth may change). The EntryPoint ID proposal is mainly to keep stable path identification in PATH_ABANDON/PATH_STATUS frames when 1) CIDs change and the sender's perceived 4-tuple is stable but the receiver's perceived 4-tuple is not, and 2) when there is no more usable CID over the (network) path to reference.\r\n\r\nIt is not necessarily true that the router path migration is always transparent. In the case when a wifi router switches between a terrestrial ISP and a satellite backbone, the outbound packet may have different source IP addresses since the satellite network and the terrestrial network are operated by different ISPs. In this case, the path switching will cause 4-tuple to change.\r\n\r\n",
          "createdAt": "2023-02-28T06:52:45Z",
          "updatedAt": "2023-02-28T06:52:45Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The difference between \"new path\" and \"rebinding\" is probably less than it sounds. In the behavior suggested by RFC 9000, arrival of packets with the same CID and a new 4-tuple triggers both validation of the new path using Path Challenge, and verification that the old path is actually gone by a parallel Path Challenge on the old path. The verification is there to deal with a potential attack in which an on path attacker (e.g., somebody on the same Wi-Fi network) can capture a 1RTT packet sent by the client, and then resent it from a spoofed IP address.\r\n\r\nI am a bit concerned that \"treating NAT rebinding as a new path\" will keep the Path Challenge on the new path, but not the verification attempt of the old path, and thus expose us to the attack that the verification is meant to mitigate.",
          "createdAt": "2023-02-28T07:07:43Z",
          "updatedAt": "2023-02-28T07:07:43Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@yfmascgy when you say \"a wifi router switches between a terrestrial ISP and a satellite backbone\" is that you want the concept of path in QUIC to follow the topology changes in the network. But we should recognize that this will not always be possible. For example, routing changes can always cause a single 4-tuple to be suddenly routed in a very different way.",
          "createdAt": "2023-02-28T07:11:42Z",
          "updatedAt": "2023-02-28T07:11:42Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @yfmascgy when you say \"a wifi router switches between a terrestrial ISP and a satellite backbone\" is that you want the concept of path in QUIC to follow the topology changes in the network. But we should recognize that this will not always be possible. For example, routing changes can always cause a single 4-tuple to be suddenly routed in a very different way.\r\n\r\nI think if the 4-tuple does not change, we do not pursue the goal of following the topology change as it is basically not possible. However, my point is when there is a topology change and a 4-tuple change (now we have a detectable signal), we probably do not want to treat it as a NAT rebinding. As we are actually on a different path, retaining the congestion control state and round-trip estimate does not seem to be right. A more reasonable action is to treat it as a new path and reset the congestion controller, right?",
          "createdAt": "2023-02-28T07:28:45Z",
          "updatedAt": "2023-02-28T07:28:45Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> So the scenario that you worry about is \"what if the client sleeps for a while, then decides to switch the connection ID before sending new packets\". This is actually a recommended behavior, for privacy reasons, so we have better get it right.\r\n\r\nExactly.\r\n\r\n> I think the simplest solution is for the client to somehow tell the server what it is doing. \"These packets carry CID sequence number 7. For me, this is the same path as when previously using CID sequence number 4.\" My gut feeling is that this can be achieved by sending an \"Abandon_Path(id=4, errorCode=CidRenewal)\" when starting sending with CID 7. Specify something like that in the spec, document the error code, etc.\r\n\r\nI think the proposed approach here could keep changes minimal, although this is not yet perfect. If the client sends two packets with the new CID, but the first one containing such information is lost (but not the second one, which experiences NAT rebinding), then we still face the issue. Of course, we will eventually recover the situation, but there will be a transient state here.\r\n\r\n> Also note that NAT rebinding is a low possibility event.\r\n\r\nMaybe, but I'm not convinced we should take this assumption as granted.\r\n\r\nMore generally, I start thinking about possible security issues we may encounter with this, where the client may frequently rotate the DCID it uses over a path for legitimate purposes, but an on-path attacker may tweak the 4-tuple, hoping it will make it create a lot of (invalid) paths' states at server side. Not sure this will be a strong issue, but we will need to document that at some point.\r\n\r\n> I think if the 4-tuple does not change, we do not pursue the goal of following the topology change as it is basically not possible. However, my point is when there is a topology change and a 4-tuple change (now we have a detectable signal), we probably do not want to treat it as a NAT rebinding. As we are actually on a different path, retaining the congestion control state and round-trip estimate does not seem to be right. A more reasonable action is to treat it as a new path and reset the congestion controller, right?\r\n\r\nI think in case we notice a path \"migrated\" (same CID, different 4-tuple), we can apply the \"RFC9000 connection migration\" feature on a per-path level. In such case, we can follow Section 9.4 of RFC9000, stating that congestion control/RTT must be reset, unless it experiences a port-only change (reset is not mandatory in such cases).\r\n",
          "createdAt": "2023-02-28T10:13:37Z",
          "updatedAt": "2023-02-28T10:13:37Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's take a step back. Using the current path identifier mechanism, we are fine if (1) CID changes but tuple does not change  and (2) tuple changes but CID does not change. The only difficult case is when the client uses a new CID and the tuple changes (NAT rebinding) at the same time. Note that a NAT rebinding is improbable if packets were recently received on the old path (also see section [9.3.3 in RFC9000](https://rfc-editor.org/rfc/rfc9000#section-9.3.3)). A NAT rebinding mostly happens if a path is idle for some time, but that is already managed by the [4.3.4 in the current draft](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-idle-timeout):\r\n\r\n\"Hosts SHOULD stop sending traffic on a path if for at least the period of the idle timeout as specified in [Section 10.1.](https://rfc-editor.org/rfc/rfc9000#section-10.1.) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)] (a) no non-probing packet was received or (b) no non-probing packet sent over this path was acknowledged, but MAY ignore that rule if it would disqualify all available paths.\"\r\n\r\nIn other word, if a path is idle long enough such that the 4-tuple is changed by NAT, it should have already been closed except there is only one path left. Therefore, the chance that the server sees (1) >=2 active paths and (2) a packet that has a new CID and a new 4-tuple at the same time is low.\r\n\r\nWhen the server sees (1) >=2 active paths and (2)  a packet that has a new CID and a new 4-tuple, the issue is that we don't know which path the packet belongs to. Hence, we just treat it as an attempt for a new path as @mirjak suggested. However, in the current draft, when the client initiates a new path, the packet should contain a PATH_CHALLENGE frame (see [figure 2](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-path-establishment)). If the packet does not contain PATH_CHALLENGE, we should just ignore the packet, which eventually leads to path closure as specified by the current draft (see [figure 1](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#fig-path-states)). Note that in doing so, we are also resilient to the attacks mentioned by @qdeconinck that \"the client may frequently rotate the DCID it uses over a path for legitimate purposes, but an on-path attacker may tweak the 4-tuple, hoping it will make it create a lot of (invalid) paths' states at server side\". \r\n\r\nWhen the server sees (1) only 1 active path and (2) a packet of a new CID and a new 4-tuple but that packet does not have PATH_CHALLENGE, it knows which path the packet belongs to, and we just follow what single path QUIC does and the behavior of multipath quic and single path quic converge in this case.\r\n\r\nTherefore, I think the current draft can already address the issue, and we probably just want to stick to what we have with some minor modifications.",
          "createdAt": "2023-02-28T10:25:47Z",
          "updatedAt": "2023-02-28T11:00:22Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "If the server sees a packet with a new CID and new 4-tuple but without path challenges it should ignore it as it can't associate it with an existing path. If the client switches to a new path (new 4-tuple) it has to use a new CID and send a path challenges frame.\r\n\r\nThe problem I'm trying to address are cases where the CID (and path ID) changes for whatever reason and we received some valid frames with the old path ID that we can't associate to anything anymore and therefore (unnecessarily) need to drop. Yes, this should not happened that often, so dropping is not the worst option, however, I think having a stable path ID would also make the whole approach logically easier, but maybe that's something we need to discuss and agree on.\r\n\r\nNote that if we change the path ID, that automatically means that we have to silently ignore any unknown path ID as we never know for sure if it was an old path ID or really a completely invalid one. Otherwise we could create an error if we receive an invalid path ID. This could help to avoid that the end get out of sync. However, not sure if that is actual a problem that needs solving.\r\n\r\nIn both cases I think we definitely need to clarify some things in the draft and make sure the taken approach is crystal clear to the reader.",
          "createdAt": "2023-02-28T11:44:11Z",
          "updatedAt": "2023-02-28T11:44:11Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "When to reset the congestion controller? That's a very generic problem, and the IETF is creating a WG to study this kind of issues. I think we should not try to invent a multipath specific solution, and just stick with whatever RFC 9000 says now, or what new RFCs will say later.",
          "createdAt": "2023-02-28T15:52:54Z",
          "updatedAt": "2023-02-28T15:52:54Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The more I read this discussion, the more I think we should stick to the path handling specification in RFC 9000. Do a [search for NAT](https://github.com/quicwg/base-drafts/issues?page=2&q=is%3Aissue+NAT) in the archive of QUIC GitHub issues, and you find a big list of messages. Lots of history there, with discussion of congestion control, security issues, DOS attacks, etc. Of course, we could have these discussions again in the multipath context, but we would converge much faster if we did not!",
          "createdAt": "2023-02-28T16:18:38Z",
          "updatedAt": "2023-02-28T16:18:38Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "We should not change the guidance on congestion control in RFC9000. However, otherwise I don't really understand what you mean by \"stick to path handling in RFC9000\". RFC9000 only has one path at a time, however, this is exactly the part that this extension is changing, so I don't see it as a deviation from the migration handling in RFC9000. Again we have to make a decision and define it clear but wouldn't one or the other solution is more inline with RFC9000 or not. ",
          "createdAt": "2023-02-28T18:00:02Z",
          "updatedAt": "2023-02-28T18:00:02Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looking back at Mirja's original question, \"Currently it seems that the assumption is that the Path ID changes if the CID changes, however, this makes handling of MP frames that contain the path ID more complicated because you have to remember the old path ID to process these frames even when the CID is retired. Is there any good reason why we don't keep the Path ID constant over the life time of a path?\" \r\n\r\nI think we should just bite the bullet, and acknowledge that retiring a CID makes it unusable in the future -- MP frames mentioning the corresponding ID will just be silently ignored. Yes, this can cause for example some spurious packet loss detection, but that can be minimized with strict rules about when to retire a CID -- the various RTO guidelines that we discussed in other threads. Better expose the consequence clearly, so nodes that think of retiring a CID think twice.",
          "createdAt": "2023-02-28T20:00:34Z",
          "updatedAt": "2023-02-28T20:00:34Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As for \"same as RFC 9000\", yes we will of course have one difference, since we handle multiple parallel paths. I am really looking at the reactions to NAT rebinding, how we define what is a NAT rebinding and what is not, etc.",
          "createdAt": "2023-02-28T20:03:20Z",
          "updatedAt": "2023-02-28T20:03:20Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we can use path ID mechanism of the current draft with the addition of the following rules to address the issues discussed in this thread:\r\n\r\n(1) **Addressing the corner case when new CID and NAT rebinding happen at the same time.** When an endpoint receives a packet that has (new CID, new tuple), check if the packet is trying to initialize a new path (i.e., whether it contains a PATH_CHALLENGE). If it has PATH_CHALLENGE, try creating a new path. If it has no PATH_CHALLENGE and we don't know which path the packet is associated with (num. of paths>=2), discard the packet. If there is only one path, we perform path validation as single path QUIC does.\r\n\r\n(2) **Addressing the issue that you cannot send PATH_ABANDON when you don't have CIDs available to use on a path.**\r\n>Also note if you retire an CID (e.g. because it's requested by the peer in the NEW_CONNECTION_ID Frame Retire Prior To field) and you don't have a new CID available anymore (yes, this should usually not happen), you cannot send a PATH_ABANDON frame anymore because you don't have valid Path ID (and we don't have the type field anymore).\" \r\n\r\nWhen an endpoint receives a NEW_CONNECTION_ID frame that has retire_prior_field set **and** it finds that the retire_prior_to field will cause it to have no more CIDs to send packets on a particular path, before sending RETIRE_CONNECTION_ID frame, it first sends PATH_ABANDON frame to signal path closure to the peer.\r\n\r\n",
          "createdAt": "2023-03-01T06:35:38Z",
          "updatedAt": "2023-03-01T06:35:38Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@yfmascgy I think I can live with your proposed rules. Adding some text stating that a client SHOULD include a PATH_CHALLENGE frame when it changes the DCID it uses (even if it does not change the 4-tuple used) is reasonable to address the aforementioned corner cases.\r\n\r\nI wonder though if it would make sense to define a small informative frame to indicate to the client that the new DCID seen has been rejected as it cannot map to an existing path, to suggest the client it should retire the CID and retry with a new one while bundling PATH_CHALLENGE, but not a big concern though.",
          "createdAt": "2023-03-01T09:45:55Z",
          "updatedAt": "2023-03-01T09:45:55Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "So, yes we can make it work with changing the path ID. But I wonder if things would be simpler if we keep it stable. So asking my initial question again: what are the drawbacks when we try to keep it stable?",
          "createdAt": "2023-03-01T10:33:26Z",
          "updatedAt": "2023-03-01T10:33:26Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it would be nice to have stable Path IDs. However, all the challenge resides in how we could define such stable \"path identifiers\", as the sending/receiving paths may use different CIDs over their lifetime and may perceive different 4-tuples.",
          "createdAt": "2023-03-01T13:40:14Z",
          "updatedAt": "2023-03-01T13:40:14Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I think it would be nice to have stable Path IDs. However, all the challenge resides in how we could define such stable \"path identifiers\", as the sending/receiving paths may use different CIDs over their lifetime and may perceive different 4-tuples.\r\n\r\nThat is a good point. The fundamental issue is that in reality a path is only precisely defined by the sequence of every possible hops between two endpoints, but that can not be observed by the endpoint, so we have to use the 4-tuple definition of a path as a simplified and compromised notation that unfortunately does not capture the full picture. QUIC goes around this issue with the use of connection ID, so that we are not bothered by unstable path identifiers and can enable path migration. Therefore, I feel in multipath QUIC, we may want to inherit what QUICv1 does and reuse the CID mechanism to identify paths.",
          "createdAt": "2023-03-03T02:03:12Z",
          "updatedAt": "2023-03-03T02:03:12Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Created #188 to address the new CID and NAT rebinding case.",
          "createdAt": "2023-03-06T08:53:52Z",
          "updatedAt": "2023-03-06T08:53:52Z"
        }
      ]
    },
    {
      "number": 170,
      "id": "I_kwDOGNtpaM5e-ncu",
      "title": "Would it be beneficial to use the same Path ID on both sides?",
      "url": "https://github.com/quicwg/multipath/issues/170",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Currently the Path ID is selected based on the sequence number of the CID used to send. Alternatively we could also, add an explicit path ID in the path validation frame that is then used by both ends. This would be possible in the current spec as we assume all path to be bi-directional and only the client can open new paths, and thus could select a unique path ID. This might simplify the mental model for implementors. ",
      "createdAt": "2023-02-21T13:18:59Z",
      "updatedAt": "2023-03-06T20:13:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this would be a major change in the desig. We do not have either a consensus or a mandate for that. ",
          "createdAt": "2023-03-06T20:12:59Z",
          "updatedAt": "2023-03-06T20:12:59Z"
        }
      ]
    },
    {
      "number": 175,
      "id": "I_kwDOGNtpaM5e_WI0",
      "title": "Releasing which resources?",
      "url": "https://github.com/quicwg/multipath/issues/175",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Section 4.3.1 and 4.3.3 talk a lot about \"releasing resources\" however, it's not always clear with resources should be released. Can we be more clear here?",
      "createdAt": "2023-02-21T15:18:40Z",
      "updatedAt": "2023-02-21T15:33:46Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 176,
      "id": "I_kwDOGNtpaM5e_XDe",
      "title": "Figure 4.4. (path states) does not show RETIRE_CONNECTION_ID",
      "url": "https://github.com/quicwg/multipath/issues/176",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "yfmascgy"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Should we add that?",
      "createdAt": "2023-02-21T15:20:49Z",
      "updatedAt": "2023-03-03T15:05:43Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 177,
      "id": "I_kwDOGNtpaM5e_Xhl",
      "title": "Name of closing/Closed state",
      "url": "https://github.com/quicwg/multipath/issues/177",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Should we maybe call these states rather abandoning/abandoned? (see figure in section 4.4.)?",
      "createdAt": "2023-02-21T15:22:09Z",
      "updatedAt": "2023-03-03T15:05:05Z",
      "closedAt": "2023-03-03T15:05:04Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I suggest keep the names unchanged. \"Closing / Closed\" is easier to understand.",
          "createdAt": "2023-03-03T14:49:54Z",
          "updatedAt": "2023-03-03T14:49:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing was preferred by author discussion",
          "createdAt": "2023-03-03T15:05:04Z",
          "updatedAt": "2023-03-03T15:05:04Z"
        }
      ]
    },
    {
      "number": 179,
      "id": "I_kwDOGNtpaM5fKl2a",
      "title": "Proposal: Explicit path identification",
      "url": "https://github.com/quicwg/multipath/issues/179",
      "state": "OPEN",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "duplicate",
        "design"
      ],
      "body": "I think given the dynamic nature of the CID usage on paths that leads to some existing design issues(see #137, #158), it is worth having some stable path identification (to address, e.g., #169).\r\n\r\n# What does not change\r\n\r\nI think we now agree that a Multipath QUIC connection uses different Connection IDs on different paths, and each Connection ID has its own packet number space. Such a design enables end-hosts to easily receive packets and decrypt them without assuming anything about the network path (relying directly on the perceived 4-tuple makes the approach fragile). Note that we keep the ACK_MP as it (i.e., we acknowledge packet numbers that used a specific DCID).\r\n\r\n# Identifying network paths (until now)\r\n\r\nSo far, end hosts directly maps the (Destination) Connection ID sequence number as the path identifier of the network path. This path identifier is then used in the path-specific frames (PATH_ABANDON, PATH_STATUS,\u2026). Such an approach has the advantage that we do not have to define additional signalling to identify a network path, and it is relatively easy to track that. However, this means that if one endhost changes the DCID it uses over a given path, this means its identifier changes. Having such dynamic changing identifiers for a stable path causes design issues when using an identifier no more valid in the path-specific frames.\r\n\r\n# Proposal: explicit path identification advertisement during path validation\r\n\r\nThe path validation process establish the identification of a path through the advertisement of the \u201cEntry Point ID\u201d (EPID) used by the packet sender. Each path is identified by a tuple (local EPID, peer EPID). This identification is then used in the path-specific frames to identify the concerned path. Note that each endhost uses EPID 0 on the initial path.\r\n\r\nThis implies that we need an augmented version of the PATH_CHALLENGE/PATH_RESPONSE frames (let\u2019s say PATH_CHALLENGE_MP/PATH_REPSONSE_MP) that include the EPID that the sender used to send the frame.\r\n\r\n## Example\r\n\r\nLet\u2019s consider this initial situation.\r\n\r\n```\r\n  DCID 0 EPID 0                   DCID 0 EPID 0\r\n   +------------------------------------+\r\n   |                                    |\r\nClient                               Server\r\n```\r\n\r\nIn this initial state, each endhost has one path:\r\n\r\nClient\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n\r\nFrom the server perspective, we have\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n\r\nNow the client wants to create a new path on a new local address, but still on the same server address (same IP and port at server side). When the server just processed the PATH_CHALLENGE_MP(data, EPID=1) sent by the client with DCID seq 1, we have this state:\r\n\r\nClient\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 1, ???) using DCID seq 1\r\n\r\nServer\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 0, EPID 1) using SCID seq 1\r\n\r\nNote that the server can figure out at packet reception on which local address it saw, and thus map the corresponding local EPID to the new seen path. The server can then replies with a PATH_RESPONSE_MP(data, EPID=0) (and also initiates a PATH_CHALLENGE_MP as well). Assume here it uses the DCID with seq 2. Once the PATH_RESPONSE_MP is received by the client, we have this state.\r\n\r\nClient\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 1, EPID 0) using DCID seq 1 and SCID seq 2\r\n\r\nServer\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 0, EPID 1) using SCID seq 1 and DCID seq 2\r\n\r\nNow the client can refer to the lower path in PATH_STATUS/PATH_ABANDON frame using (1, 0), and the server could use (1, 0). Note that it makes also possible to extend these frames to the set of paths sharing a given EPID. This tuple is stable as long as end hosts do not change the EPID they use when performing further path validations.\r\n\r\n```\r\n  DCID 0 EPID 0                   DCID 0 EPID 0\r\n   +------------------------------------+\r\n   |                                    |\r\nClient                               Server\r\n   |                                    |\r\n   +------------------------------------+\r\n  DCID 1 EPID 1                   DCID 2 EPID 0\r\n```\r\n\r\nConsider now a specific edge case, that is also hard to handle with the current (CID identification) design: the client decides to change the DCID it uses (now seq 2) on its path (EPID 1, EPID 0), but the very first packet sent experiences a NAT rebinding, making the server see a new 4-tuple. The end hosts\u2019 states just after the server received that packet is\r\n\r\nClient:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 1, EPID 0) using SCID seq 2 and DCID seq 2\r\n\r\nServer:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 0, EPID 1) using SCID seq 1 and DCID seq 2\r\n- (EPID 0, EPID ???) using SCID seq 2\r\n\r\nTo address this new unknown path, the server will initiate path validation over that new path using a new DCID (let\u2019s say with seq 3), so it sends a MP_PATH_CHALLENGE(EPID=0) on the lower path. Once the packet reaches and after its processing, we have\r\n\r\nClient:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 1, EPID 0) using SCID seq 3 and DCID seq 2\r\n\r\nServer:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 0, EPID 1) using SCID seq 1 and DCID seq 2\r\n- (EPID 0, EPID ???) using SCID seq 2 and DCID seq 3\r\n\r\n\r\nFinally, the client replies with a MP_PATH_RESPONSE on its perceived EPID (hence EPID 1) and the response can reach the server, which can then figure out that the path is actually the same as the previous one (it experienced involuntary 4-tuple change, this is not a new path). The final state is hence\r\n\r\nClient:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 1, EPID 0) using SCID seq 3 and DCID seq 2\r\n\r\nServer:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 0, EPID 1) using SCID seq 2 and DCID seq 3\r\n\r\n\r\n## Additional remarks\r\n\r\nIntroducing such additional identifiers may require additional care to cope with EPID that change over a same address or to avoid a same EPID over multiple 4-tuples. I think we can require that new EPID values cannot decrease (monotonically increasing) and observing a same EPID coming from different addresses probably indicates that something is wrong there.\r\n\r\nWe can also extend the required state of a path to be \"Active\", i.e., we need to have both local and peer EPID of a path before considering it as active.\r\n\r\nHaving two endpoint-specific values instead of a single shared one (as suggested by #170) may be desirable to support the edge case mentioned above.",
      "createdAt": "2023-02-23T10:40:22Z",
      "updatedAt": "2023-03-03T12:36:47Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for this intriguing proposal. But there will be a new issue if I understand correctly, and please correct me if I am wrong.\r\n\r\nFor example, what if a path has actually **migrated** because of changes in the  underlying hops while the client and server's entry points (interfaces) remain the same. Then after exchanging the EPID information, the client and server will draw the conclusion that the path is not changed, which is not true. ",
          "createdAt": "2023-02-26T10:40:41Z",
          "updatedAt": "2023-02-26T11:49:54Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this would be a big change from the existing draft and the existing consensus, which very explicitly says that we are using the path mechanisms of RFC 9000.\r\n\r\nThe number space is tied to the CID, because of encryption. That does mean that when we are sending ACKs, the \"path ID\" in the ACK is the ID used when the packets were sent. ",
          "createdAt": "2023-02-26T19:04:08Z",
          "updatedAt": "2023-02-26T19:04:08Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "This sounds like a design change proposal, so I suggest also creating thread on the WG list to increase visibiltiy",
          "createdAt": "2023-02-26T23:33:54Z",
          "updatedAt": "2023-02-26T23:33:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's continue discuss in issue #169.",
          "createdAt": "2023-03-03T12:36:47Z",
          "updatedAt": "2023-03-03T12:36:47Z"
        }
      ]
    },
    {
      "number": 180,
      "id": "I_kwDOGNtpaM5fQ6vX",
      "title": "Proposal: PATH_SETUP frame",
      "url": "https://github.com/quicwg/multipath/issues/180",
      "state": "OPEN",
      "author": "michael-eriksson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "# Introduction\r\n\r\nThe setup of a new path should be explicit with a separate frame type.\r\n\r\n# Design\r\n\r\nA new frame type, `PATH_SETUP` is introduced and used to set up new paths. The frame is sent by the initiating endpoint and includes relevant information (see below). When received by the peer, the peer responds with a `PATH_SETUP` frame in the opposite direction with reciprocal information (an alternative is to have a separate frame type for the path setup response).\r\n\r\nIf there is a worry that the protocol specifications will run out of single-byte (6-bit) frame types, the new frame type could be given a type number in the two-byte (14-bit) range since it will be sent very infrequently.\r\n\r\n# Frame content\r\n\r\n## Path identifier\r\n\r\nThere are good reasons for a stable path identifier (see #179). Having the same path identifier in both directions simplify both the implementations and things like correlating traces taken at the two endpoints (#170).\r\n\r\nThe unique identifier for the new path is selected by the endpoint that initiates the new path. To simplify path initiation also from the server, clients use even path identifiers and servers use odd path identifiers when they initiate new paths. Path identifiers are never reused.\r\n\r\n## Path status\r\n\r\nThe `PATH_STATUS` frame is used to set the status of an existing path (`available` or `standby`). The status of a new path should be signaled directly at path setup, otherwise the peer might start to use a new path that is intended to be `standby` before it gets the `PATH_STATUS` frame.\r\n\r\n## Path parameters\r\n\r\nSome parameters of a new path can be different from what was negotiated for the original path at connection setup. They are signaled in the `PATH_SETUP` frame.\r\n\r\nExamples of per-path parameters: `max_udp_payload_size`, `max_idle_timeout`, `max_ack_delay`.\r\n",
      "createdAt": "2023-02-24T09:40:40Z",
      "updatedAt": "2023-03-03T11:41:21Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 181,
      "id": "I_kwDOGNtpaM5fRCUA",
      "title": "Regular ACK frames when multipath has been negotiated",
      "url": "https://github.com/quicwg/multipath/issues/181",
      "state": "OPEN",
      "author": "michael-eriksson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "# Introduction\r\n\r\nIt should be allowed to send regular ACK frames also after multipath has been negotiated.\r\n\r\n# Reasoning\r\n\r\nSending acknowledgments over other paths than where the packet was received is complex, which is recognised in the Packet Scheduling section of the draft. A straight-forward implementation may therefore never send cross-path acknowledgments. Allowing it to use regular ACK frames would reduce the special-case code for multipath mode and also save at least one byte on every acknowledgment.\r\n\r\nThe specification should be updated to (explicitly) say that an endpoint MAY send regular ACK frames also after multipath has been negotiated.",
      "createdAt": "2023-02-24T09:59:18Z",
      "updatedAt": "2023-03-06T19:33:53Z",
      "closedAt": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sending regular ACK frames is still allowed after Multipath has been negotiated, but these refer to the Path ID 0.\r\n\r\nIf I understand well, the proposal is to allow considering the reception of an ACK frame over a given 4-tuple as the acknowledgment of packets sent over that 4-tuple. ACK/ACK_MP frames in multipath acknowledge packets using a specific DCID. The issue here is that there is a one-to-many relation between a 4-tuple and the Path ID (i.e., the sequence number of the DCID used). Relying on the 4-tuple to infer the DCID that may lead to acknowledgment ambiguities here.\r\n\r\nConsider for the example the case where a client decides to rotate the DCID it uses over a given path every 2 packets (we could also consider a timer-based change where the DCID change occurs in the middle of a sending burst). It then sends over that path DCID 1 PN 0, DCID 1 PN 1, DCID 2 PN 0 and DCID 2 PN 1. What should the server sends here? If it relies on the largest DCID sequence number seen, it may send ACK(0-1), but from the client perspective, such indication is unclear (especially if, e.g., one of the packets sent with DCID 1 has been lost).",
          "createdAt": "2023-02-28T10:31:15Z",
          "updatedAt": "2023-02-28T10:31:15Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> # Introduction\r\n> It should be allowed to send regular ACK frames also after multipath has been negotiated.\r\n> \r\n> # Reasoning\r\n> Sending acknowledgments over other paths than where the packet was received is complex, which is recognised in the Packet Scheduling section of the draft. A straight-forward implementation may therefore never send cross-path acknowledgments. Allowing it to use regular ACK frames would reduce the special-case code for multipath mode and also save at least one byte on every acknowledgment.\r\n> \r\n> The specification should be updated to (explicitly) say that an endpoint MAY send regular ACK frames also after multipath has been negotiated.\r\n\r\nThe ACK_MP's path ID is tied to packet number space. Removing it will introduce ambiguity. I also feel the benefit of saving one byte is not very significant.",
          "createdAt": "2023-02-28T11:07:38Z",
          "updatedAt": "2023-02-28T11:07:38Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "@qdeconinck, I don't think that the mechanism for path CID changes has been defined, has it? I, for one, would *really* like to have stable path identifiers (that are identical in both directions).\r\n\r\nI'm not sure I understand what you are suggesting above, please correct me if I'm wrong below.\r\n\r\nIt seems like you suggest that the packet numbers are reset for the path when the destination connection identifier changes, is that correct? That would imply that you would then need a new instance of the loss detection (which is packet number based) when the CID changes, including restarting RTT estimates etc. Maybe even worse, you would have double loss detection instances for the path until all packets sent with the previous CID are acknowledged or declared lost. Is this correct?",
          "createdAt": "2023-02-28T20:57:10Z",
          "updatedAt": "2023-02-28T20:57:10Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> The ACK_MP's path ID is tied to packet number space. Removing it will introduce ambiguity. I also feel the benefit of saving one byte is not very significant.\r\n\r\nThe implicit path id of the regular ACK frame would be the path id over which is was transmitted. A receiver must anyway always be able to understand on which path a packet arrives, so it can set the Path Identifier field of the ACK_MP frame to the correct value.\r\n\r\nThe main point with this issue is not to save one or a few bytes (but see below). What I am after is to reduce the special case code for multipath compared to regular unipath QUIC when multipath isn't enabled. That leads to simpler and cleaner code, which is easier to test and maintain.\r\n\r\nWhen it comes to saving bytes, that might seem silly in the times of terabit fibers. However, the world isn't that simple...\r\n- ACK-only packets are not congestion controlled, and keeping them small is good for the stability of the Internet.\r\n- Some paths are very asymmetric and can even be ACK limited; smaller ACKs is a good thing here as well.\r\n- My employer, Ericsson, produce cellular infrastructure. The uplink, from the mobile device to the base station, is often a limitation. For media streaming, which is like 70+% of the mobile broadband traffic, almost only ACKs go on the uplink. Saving a completely redundant byte here can actually be relevant, especially if most of the header (including the connection identifier) is compressed away.",
          "createdAt": "2023-02-28T21:26:21Z",
          "updatedAt": "2023-02-28T21:26:21Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @qdeconinck, I don't think that the mechanism for path CID changes has been defined, has it? I, for one, would really like to have stable path identifiers (that are identical in both directions).\r\n\r\nActually, this is somewhat implicitly discussed in [Section 4.3.3](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-4.3.3). Over a given path (4-tuple), an endpoint can change the DCID it uses to send packets. The sequence number of the DCID used by the client over a given path may be different from the server one, yes.\r\n\r\n> I'm not sure I understand what you are suggesting above, please correct me if I'm wrong below.\r\n\r\n> It seems like you suggest that the packet numbers are reset for the path when the destination connection identifier changes, is that correct?\r\n\r\nDuring some time, the sender will have two space numbers associated to that path, indeed (the one of the old DCID seq num and the new one). At most, you may need to maintain max_active_cid_limit sending application data spaces. The receiver can also track the 4-tuple on which it observes the CID to bind its ACK_MP there.\r\n\r\n> That would imply that you would then need a new instance of the loss detection (which is packet number based) when the CID changes, including restarting RTT estimates etc. Maybe even worse, you would have double loss detection instances for the path until all packets sent with the previous CID are acknowledged or declared lost. Is this correct?\r\n\r\nI'm not sure the recovery structure needs to be duplicated though. Given you are using the same 4-tuple (just rotating the CID), you can keep the same RTT. You can also update your recovery structure to keep track of the space identifier of the sent packets. Such complexity will be located at the sender-side.",
          "createdAt": "2023-03-01T09:10:40Z",
          "updatedAt": "2023-03-01T09:10:40Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@qdeconinck I wasn't assuming that you would reset the packet number when only the CID changes; this is not a new path. Why is that needed?\r\n\r\nI guess this is a separate issue we need to discuss and clarify.",
          "createdAt": "2023-03-01T10:37:35Z",
          "updatedAt": "2023-03-01T10:37:35Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @qdeconinck I wasn't assuming that you would reset the packet number when only the CID changes; this is not a new path. Why is that needed?\r\n\r\nBecause the 4-tuple perceived by the receiver may change while the one used by the sender might not. The CID sequence number provides an unambiguous matching to a packet number space for both the sender and the receiver without decrypting the packet.",
          "createdAt": "2023-03-01T13:52:00Z",
          "updatedAt": "2023-03-01T13:52:00Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes and because you use the CID as identifier and not the 4-tuple, there can be no ambiguity and therefore you can simply update your mapping without having to reset.",
          "createdAt": "2023-03-01T14:01:40Z",
          "updatedAt": "2023-03-01T14:01:40Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "At sender side, yes. But at receiver side, this is trickier, especially if the packet number encoding truncates the actual packet number (which packet number should you expect from a new CID to derive the actual one?).",
          "createdAt": "2023-03-01T14:07:17Z",
          "updatedAt": "2023-03-01T14:07:17Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To understand the relation between CID and number space, consider the case of a path on which 1 + 2^32 have been sent using CID number X. Now, the sender decides to refresh the CID to number Y. What should be the PN for the next packet? If you said \"2+2^32\", you are going to have a bug, because the packet header can use at most 32 bits to encode the packet. The packet will look like:\r\n\r\n| 1rtt (PN length=4) | CID (seq num=Y) | 32 bit PN=0x00000002 | payload... |\r\n|-------------|-------------------------|--------------|----------|\r\n\r\nThe receiver of the packet expands the PN number to 64 bits to get the IV used by AEAD. To do that, it looks at the CID, find the corresponding number space, and infer the upper 32 bits from past numbers. If the CID was X, the past number would be \"1+2^32\", and the PB would expand to \"0x0000000100000002\". But that it is a first use of CID Y, and the receiver has not seen any previous path ID. So it expands the number to \"\"0x0000000000000002\". Both sender and receiver have to use that value, otherwise decryption will fail.\r\n\r\nBottom line: number spaces are really tied to CID numbers.\r\n",
          "createdAt": "2023-03-01T18:56:46Z",
          "updatedAt": "2023-03-01T18:57:34Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> Bottom line: number spaces are really tied to CID [sequence] numbers.\r\n\r\nThat is not true.\r\n\r\nTo be able to decode an incoming packet, the receiving endpoint must be able to map the CID to the path, and in particular get two pieces of path-specific information:\r\n- The `largest_pn` state variable to be able to decode (i.e., expand) the truncated packet number\r\n- The path identifier to create the nonce for the AEAD decryption.\r\n\r\nThis information can be for instance be stored in a hash map that has the CID as key. The CID sequence number is not relevant, and in particular the path identifier can (and should) be different from the CID sequence number.",
          "createdAt": "2023-03-01T20:58:06Z",
          "updatedAt": "2023-03-01T20:58:06Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> A straight-forward implementation may therefore never send cross-path acknowledgments. Allowing it to use regular ACK frames would reduce the special-case code for multipath mode and also save at least one byte on every acknowledgment.\r\n\r\nCompletely disabling cross-path acknowledgement will introduce new issues and makes communication fragile. For example, consider the case a sender has just retired the CID of a path and has no available CIDs to use on that path anymore, but it later may still receive a couple of packets from the peer on that path. If we completely disable cross-path acknowledgement, then these later received packets cannot be acknowledged. Using ACK_MP, this is not a problem as it can be sent from other available paths, which makes the communication more robust.\r\n\r\n\r\n",
          "createdAt": "2023-03-02T02:42:05Z",
          "updatedAt": "2023-03-02T02:42:05Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think we need any further normative language in the draft. It's allowed to use v1 ACK frames. This is what the draft says:\r\n\r\n> As soon as the negotiation of multipath support is completed, endpoints SHOULD use ACK_MP frames instead of ACK frames to acknowledge application data packets, including 0-RTT packets, received on path ID 0 after the handshake concluded.\r\n\r\n> If for any reason ACK frames are received in 1-RTT packets while the state of multipath negotiation is ambiguous, they MUST be interpreted as acknowledging packets sent on path 0.\r\n\r\n",
          "createdAt": "2023-03-02T10:19:01Z",
          "updatedAt": "2023-03-02T10:19:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Resetting the packet number whenever a new CID is used it is deviation from RFC 9000. I opened issue #182 for this.",
          "createdAt": "2023-03-02T10:45:38Z",
          "updatedAt": "2023-03-02T10:45:38Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> > A straight-forward implementation may therefore never send cross-path acknowledgments. Allowing it to use regular ACK frames would reduce the special-case code for multipath mode and also save at least one byte on every acknowledgment.\r\n> \r\n> Completely disabling cross-path acknowledgement will introduce new issues and makes communication fragile. For example, consider the case a sender has just retired the CID of a path and has no available CIDs to use on that path anymore, but it later may still receive a couple of packets from the peer on that path. If we completely disable cross-path acknowledgement, then these later received packets cannot be acknowledged. Using ACK_MP, this is not a problem as it can be sent from other available paths, which makes the communication more robust.\r\n\r\nIn general, I think that there are cases when sending an `ACK_MP` frame is both elegant and useful. However, these events are likely very rare. They are probably also rather specific and therefore hard to detect in time with generic algorithms.\r\n\r\nA straight-forward implementation would just recognise the path-specific problems and quickly retransmit on some other path, possibly with some overhead because of redundant transmission. A simple implementation could also have *some* special-case code for path problems, the key point with this issue is that steady state transmission should be as similar to unipath QUIC as possible.\r\n\r\nWhen it comes to your case above, it looks a bit odd to be honest. Why would the \"sender\" retire the CID if there's a chance that it will receive more packets on that path? Isn't path closing supposed to happen in an ordered fashion with `PATH_ABANDON` frames and only after that is the CID retired?",
          "createdAt": "2023-03-06T15:55:32Z",
          "updatedAt": "2023-03-06T15:55:32Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> I don't think we need any further normative language in the draft. It's allowed to use v1 ACK frames. This is what the draft says:\r\n> \r\n> > As soon as the negotiation of multipath support is completed, endpoints SHOULD use ACK_MP frames instead of ACK frames to acknowledge application data packets, including 0-RTT packets, received on path ID 0 after the handshake concluded.\r\n> \r\n> > If for any reason ACK frames are received in 1-RTT packets while the state of multipath negotiation is ambiguous, they MUST be interpreted as acknowledging packets sent on path 0.\r\n\r\nThe point here is to develop and specify the best possible protocol which can also lead to nice, clean and efficient implementations with minimal special-case code for multipath.\r\n\r\nWith this issue, I wanted to slightly adjust the semantics of the `ACK` frame when multipath is enabled; the currently defined semantics are pretty (but not fully) useless. As indicated by the reasons stated above, there are more useful semantics. An implementation would still be allowed to send `ACK_MP` frames, so there is no reduction of existing functionality.",
          "createdAt": "2023-03-06T16:19:58Z",
          "updatedAt": "2023-03-06T16:19:58Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Anything that relies on 4-tuple identification leads to ambiguity, because of NATs. It is much more robust to always use ACK_MP and always specify the CID number, even if that costs 1 extra byte. Specifying that naked ACK always maps to CID 0 achieves that.",
          "createdAt": "2023-03-06T19:31:04Z",
          "updatedAt": "2023-03-06T19:31:04Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also, ambiguity in ACK processing will result in failures in case of NAT rebinding. The peer receives an ACK for \"this path\", but because of rebinding \"this path\" is in fact a new path, with a new number space starting at 0. The ACK for \"this path\" reference packet numbers that have not yet been sent, which is a protocol violation, causing the termination of the connection.",
          "createdAt": "2023-03-06T19:33:53Z",
          "updatedAt": "2023-03-06T19:33:53Z"
        }
      ]
    },
    {
      "number": 182,
      "id": "I_kwDOGNtpaM5fwg7P",
      "title": "Is the packet number reset if a new CID is used?",
      "url": "https://github.com/quicwg/multipath/issues/182",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "yfmascgy"
      ],
      "labels": [
        "design"
      ],
      "body": "Based on discuss in #181 we need to clarify if the packet number is reset if the CID changes.\r\n\r\nIf only the CID changes but not the 4-tuple, the 4-tuple can be used to map to a path and packet number space.\r\n\r\nIf both changes (the client reset the CID after an idle period and on the same packet a NAT rebinding happens), I guess you can/have to try the exiting packet numbers first... however, this is anyway a case that needs more discussion.",
      "createdAt": "2023-03-02T10:38:25Z",
      "updatedAt": "2023-03-03T15:47:54Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In the presence of NAT, we cannot use the 4 tuple to map to a path and packet number space. Not on the receive side.\r\n\r\nIf we want to not deviate from RFC 9000, then we ought to bring back the single number space design and make it work. I think I should write an experimental draft to do explain how. My implementation is pretty close to parity between single space and multiple space, but I never spent the time to completely explain the ACK sending logic and the loss detection logic, including how to properly estimate per path delays. And I would need to add an MP_ECN frame so we get proper ECN counts per path.\r\n\r\nI gave up on this in the interest of converging soon on an agreed solution. But instead, we are going in the weeds, revisiting past decisions. I guess I could just as well restart the single number design.",
          "createdAt": "2023-03-02T16:38:38Z",
          "updatedAt": "2023-03-02T16:38:38Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think we revisit past decision (or where was that decided?). This was so far underspecified in the spec and we need to clarify. I don't have a strong option on either approach but I honestly don't know what the best approach is.",
          "createdAt": "2023-03-02T16:52:49Z",
          "updatedAt": "2023-03-02T16:52:49Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This goes back to the decoding argument. When the CID changes, the sender cannot always predict that the packet will be received on the same 4 tuple as packets sent before the change -- a NAT in the way may have a different idea. That means the receiver cannot properly find the max PN used on the receiving path from the 4 tuple alone. Thus you must start a new numbering space, with the highest received PN at 0.",
          "createdAt": "2023-03-02T17:14:28Z",
          "updatedAt": "2023-03-02T17:14:28Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The weed part is because a lots of the comments I see try a different model than either unique number space or CID based number space. They assume what I would call a \"strong path ID\" model, in which the path has a unique ID defined in a protocol exchange, and then we get a number space per path. But that strong path ID model will not work unless we change the packet header to insert a path ID. It also does not support NAT very well. Yet, the proposals keep coming, and they have to be explained out each time. This is slowing consensus a lot.",
          "createdAt": "2023-03-02T17:18:13Z",
          "updatedAt": "2023-03-02T17:18:36Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> That means the receiver cannot properly find the max PN used on the receiving path from the 4 tuple alone. Thus you must start a new numbering space, with the highest received PN at 0.\r\n\r\nI agree that we should start packet number from 0 when we start a new number space. It is more robust and less error prone, and we probably want to clarify this in the draft.",
          "createdAt": "2023-03-03T01:04:44Z",
          "updatedAt": "2023-03-03T01:05:09Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yet, the proposals keep coming, and they have to be explained out each time. This is slowing consensus a lot.\r\n\r\nSorry to have raised this again but I actually didn't recognise that we discussed this in detail. I actually hope this is not slowing consensus but helps to make progress quickly.\r\n\r\nAgain even if we discussed is before, we need to clearly define and explain this in the draft and in order conclude this discussion and avoiding coming it up again. So let's do that! I optimistic we can reach agreement quickly!",
          "createdAt": "2023-03-03T11:44:43Z",
          "updatedAt": "2023-03-03T11:44:43Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "A few more thoughts, just for completeness, not trying to push in any direction.\r\n\r\nI don't think we necessarily need to couple the question of reseting the packet number and using a stable path id. Resetting the packet number with a new CID makes decryption easier, however, after you have decrypted the packet you may still be able to assign to an existing path.\r\n\r\nActually it is not a problem neither for decryption nor for path assignment, if only the 4-tuple or the CID changes. The problem is that if the client changes the CID, it never can be sure if not also the 4-tuple changes (which can even be likely after an idea period). Therefore the client need to reset the packet number for easy decryption when it uses a new CID (this is deviation from RFC9000 - just to note but that's probably fine). However, to my understanding just changeing the CID and reseting the packet number without a change in 4-tuple doesn't necessarily mean that this will create a new path, e.g. the server doesn't have to start validation and you don't have to close the old path as it is the same. So while you need to update your mapping from CID to path ID, I don't think the path ID has to change. This is the discussion we should have in #169.",
          "createdAt": "2023-03-03T11:58:04Z",
          "updatedAt": "2023-03-03T11:58:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "One addition: decoupling the CID/packet number space from the path ID however means that we need to also have a packet number space id for the MP_ACK frame, while using the path id for the other frames. Actually I think this is not too bad because ACK frames contain information that relate to packets and the other frames contain information that relate to the path.",
          "createdAt": "2023-03-03T12:19:20Z",
          "updatedAt": "2023-03-03T12:19:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion at author meeting: just add one sentence to clarify that packet number is changed/reset when a new CID is used (even on the same path)",
          "createdAt": "2023-03-03T15:47:54Z",
          "updatedAt": "2023-03-03T15:47:54Z"
        }
      ]
    },
    {
      "number": 183,
      "id": "I_kwDOGNtpaM5f5JQy",
      "title": "Provide more guidance on which path to use for control frames",
      "url": "https://github.com/quicwg/multipath/issues/183",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "obonaventure",
        "qdeconinck"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-03T15:16:01Z",
      "updatedAt": "2023-03-07T00:34:58Z",
      "closedAt": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We probably need to add some text in the scheduling considerations where control frames (PATH_STATUS, PATH_ABANDON, but also MAX_DATA,...) should be sent on a good working path, ideally with low latency.",
          "createdAt": "2023-03-03T16:21:03Z",
          "updatedAt": "2023-03-03T16:21:03Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would say the same applies to ACK_MP\r\n",
          "createdAt": "2023-03-06T20:10:48Z",
          "updatedAt": "2023-03-06T20:10:48Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "For ACK we recommend (SHOULD) to send it on the same path because of RTT calculations and I believe the scheduling text discusses at already.",
          "createdAt": "2023-03-06T21:06:27Z",
          "updatedAt": "2023-03-06T21:06:27Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thinking about this some more. I believe we should say *NOTHING*. The point of the standard is to specify expected behavior when a node receives protocol messages from its peer. The basic statement is that most frames, including control frames, can be sent on any path -- the only exception being PATH CHALLENGE frames and PATH_RESPONSE frames.\r\n\r\nSo my preference would be:\r\n\r\n1) say nothing, because the purpose of standards is to specify requirements for Interop, not provide guidance to implementors.\r\n\r\n2) if we do say something, just say that these frames can be sent on any valid path, based on preferences of the application and the implementation.",
          "createdAt": "2023-03-07T00:15:56Z",
          "updatedAt": "2023-03-07T00:15:56Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As for ACK_MP frames, the text says \"ACK_MP frame (defined in [Section 8.3](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#ack-mp-frame)) SHOULD be sent on the same path as identified by the Path Identifier. However, an ACK_MP frame can be returned via a different path, based on different strategies of sending ACK_MP frames.\" That's an OK compromise, leaving open the possibility for implementations to use any strategy they want. ",
          "createdAt": "2023-03-07T00:18:29Z",
          "updatedAt": "2023-03-07T00:18:29Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Alternatively, spell out the considerations to make when picking a path? Does it matter, if so, why? This would be useful to know when new frames come along in the future and need to think for themselves how multipath might affect them.",
          "createdAt": "2023-03-07T00:34:58Z",
          "updatedAt": "2023-03-07T00:34:58Z"
        }
      ]
    },
    {
      "number": 184,
      "id": "I_kwDOGNtpaM5f5XLt",
      "title": "Provide guidance on number space and path implementation",
      "url": "https://github.com/quicwg/multipath/issues/184",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "huitema"
      ],
      "labels": [
        "editorial"
      ],
      "body": "It seems that some implementers are confused about the relation between an abstract path, defined by a 4-tuple, and the number spaces. We need to provide guidance.",
      "createdAt": "2023-03-03T15:51:36Z",
      "updatedAt": "2023-03-03T23:05:25Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 186,
      "id": "I_kwDOGNtpaM5f56Ji",
      "title": "Alternate status values in PATH_STATUS",
      "url": "https://github.com/quicwg/multipath/issues/186",
      "state": "OPEN",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The draft currently defines two possible values in the PATH_STATUS frame. However, it does not defines if other values are usable, neither does a receiver should behave with alternate values.\r\n\r\nProbably the right behaviour would be to state that alternate values might be application-dependent, and otherwise the status value might be ignored.",
      "createdAt": "2023-03-03T17:31:37Z",
      "updatedAt": "2023-03-03T17:31:37Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 188,
      "id": "I_kwDOGNtpaM5gBPtN",
      "title": "Handling packets with both new Destination Connection ID and 4-tuple",
      "url": "https://github.com/quicwg/multipath/issues/188",
      "state": "OPEN",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Taking side-discussion of #169 in its own issue.\r\n\r\n> I think we can use path ID mechanism of the current draft with the addition of the following rules to address the issues discussed in this thread:\r\n\r\n> (1) Addressing the corner case when new CID and NAT rebinding happen at the same time. When an endpoint receives a packet that has (new CID, new tuple), check if the packet is trying to initialize a new path (i.e., whether it contains a PATH_CHALLENGE). If it has PATH_CHALLENGE, try creating a new path. If it has no PATH_CHALLENGE and we don't know which path the packet is associated with (num. of paths>=2), discard the packet. If there is only one path, we perform path validation as single path QUIC does.",
      "createdAt": "2023-03-06T08:52:45Z",
      "updatedAt": "2023-03-06T16:00:59Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think a new four tuple is kind of by definition a new path. I don't like trying to reason whether packets that do or don't carry a path challenge. The receiver of this packet should definitely send challenges, validate the path, etc.\r\n\r\nBeyond that, the concern is performance, and heuristics such as \"this new path looks a lot like a previous path that was seen before, with a different CID and almost the same 4-tuple (e.g., only port number changed), so maybe it could be initiated with the RTT and congestion control data of this previous path.\" I think the receiver of the path-creating packet MAY implement a logic like that, but it is not mandatory.\r\n\r\nConsider that the main usage is a not that was silent for a long time, and resumes transmission with anew CID for privacy reasons. Being silent for a long time implies that the RTT and congestion conditions may very well have changed...",
          "createdAt": "2023-03-06T16:00:05Z",
          "updatedAt": "2023-03-06T16:00:59Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 6,
      "id": "PR_kwDOGNtpaM4tPebr",
      "title": "[~] modification for checking available CIDs",
      "url": "https://github.com/quicwg/multipath/pull/6",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T08:59:24Z",
      "updatedAt": "2021-10-16T07:31:50Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/yanmei",
      "headRefOid": "2681a3fba2713af375fada09e28e77879c6b4d81",
      "closedAt": "2021-10-15T19:53:42Z",
      "mergedAt": "2021-10-15T19:53:42Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "291f05b716df614f1720724622438fe0764f037d"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "fixes #5 ",
          "createdAt": "2021-10-15T19:53:32Z",
          "updatedAt": "2021-10-15T19:53:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uh_1J",
          "commit": {
            "abbreviatedOid": "4d70bf6"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2021-10-15T09:52:31Z",
          "updatedAt": "2021-10-15T09:52:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uj0UZ",
          "commit": {
            "abbreviatedOid": "2681a3f"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T18:46:10Z",
          "updatedAt": "2021-10-15T18:46:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uj_tX",
          "commit": {
            "abbreviatedOid": "2681a3f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T19:52:23Z",
          "updatedAt": "2021-10-15T19:52:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOGNtpaM4tPkg8",
      "title": "Whole-text pass on the draft",
      "url": "https://github.com/quicwg/multipath/pull/7",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Mostly to fix presentation/grammar issues, also merging section\r\nPath Validation / Path Initiation as this seems to be the same\r\nprocess.",
      "createdAt": "2021-10-15T09:35:04Z",
      "updatedAt": "2021-10-15T11:52:54Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "6d52b63ba2418be28f247a8e785ab809617013ad",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "rephrasing",
      "headRefOid": "a08e9da7763491bca953b6793d95cdb802b57cf8",
      "closedAt": "2021-10-15T11:52:54Z",
      "mergedAt": "2021-10-15T11:52:54Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9f1ee2cfc703ea960a5a85e444e3b0b35f64d707"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uh9cu",
          "commit": {
            "abbreviatedOid": "012853b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks for all the text correction! It's ok for me.",
          "createdAt": "2021-10-15T09:40:53Z",
          "updatedAt": "2021-10-15T09:47:10Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "Close a Path",
              "createdAt": "2021-10-15T09:40:53Z",
              "updatedAt": "2021-10-15T09:47:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiGTW",
          "commit": {
            "abbreviatedOid": "a08e9da"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T10:22:03Z",
          "updatedAt": "2021-10-15T10:22:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOGNtpaM4tPrCR",
      "title": "[~] error treatment for invalid PN space ID",
      "url": "https://github.com/quicwg/multipath/pull/11",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T10:14:05Z",
      "updatedAt": "2021-10-15T12:06:32Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "9f1ee2cfc703ea960a5a85e444e3b0b35f64d707",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/illegal_pn_id",
      "headRefOid": "484d2ec466a4157edabc13da8542d90bfc43e8e1",
      "closedAt": "2021-10-15T12:00:23Z",
      "mergedAt": "2021-10-15T12:00:23Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uiG5c",
          "commit": {
            "abbreviatedOid": "08898a6"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T10:25:16Z",
          "updatedAt": "2021-10-15T10:25:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uiSEg",
          "commit": {
            "abbreviatedOid": "08898a6"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "One typo and a small discussion on the added SHOULD.",
          "createdAt": "2021-10-15T11:30:47Z",
          "updatedAt": "2021-10-15T11:36:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "There is still a MP_ACK on this line",
              "createdAt": "2021-10-15T11:30:47Z",
              "updatedAt": "2021-10-15T11:36:13Z"
            },
            {
              "originalPosition": 17,
              "body": "The SHOULD here sounds strange. I would rather set a MUST, otherwise how should we handle ACK_MP of a given Path ID, non-existing at the reception time, but that later exists?",
              "createdAt": "2021-10-15T11:35:28Z",
              "updatedAt": "2021-10-15T11:36:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiVUB",
          "commit": {
            "abbreviatedOid": "4467a87"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-15T11:49:38Z",
          "updatedAt": "2021-10-15T11:49:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Modified",
              "createdAt": "2021-10-15T11:49:39Z",
              "updatedAt": "2021-10-15T11:49:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiW9p",
          "commit": {
            "abbreviatedOid": "4467a87"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2021-10-15T11:58:59Z",
          "updatedAt": "2021-10-15T11:58:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDOGNtpaM4tQVi6",
      "title": "[~] fix nonce example mistake",
      "url": "https://github.com/quicwg/multipath/pull/13",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T14:33:20Z",
      "updatedAt": "2021-10-16T07:14:46Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/fix_example",
      "headRefOid": "04afe89d9ef2b52a52277739d06ce3603c521a52",
      "closedAt": "2021-10-15T15:16:27Z",
      "mergedAt": "2021-10-15T15:16:27Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "ec9f7fe1807fa02e8703d1f1573d57f4f339ca3e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ui9sx",
          "commit": {
            "abbreviatedOid": "04afe89"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T14:37:41Z",
          "updatedAt": "2021-10-15T14:37:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOGNtpaM4tQ99i",
      "title": "add path id type in illustration figure 3",
      "url": "https://github.com/quicwg/multipath/pull/14",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T18:50:05Z",
      "updatedAt": "2021-10-15T19:54:22Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "ec9f7fe1807fa02e8703d1f1573d57f4f339ca3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/add-example-pathid-type",
      "headRefOid": "72c770509bd16177d6678807406eb70e88005158",
      "closedAt": "2021-10-15T19:54:22Z",
      "mergedAt": "2021-10-15T19:54:21Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "b6331e57d7373526cc4af756386473ca16ece41a"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I will merge this one as I consider it editorial\r\n",
          "createdAt": "2021-10-15T19:54:06Z",
          "updatedAt": "2021-10-15T19:54:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uj_qJ",
          "commit": {
            "abbreviatedOid": "72c7705"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T19:52:04Z",
          "updatedAt": "2021-10-15T19:52:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOGNtpaM4tRJkh",
      "title": "SHOULD -> MUST for use of different CIDs on different paths",
      "url": "https://github.com/quicwg/multipath/pull/16",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There is a SHOULD here, which I believe should be a MUST as we taking about the receiver behaviour here.",
      "createdAt": "2021-10-15T20:18:48Z",
      "updatedAt": "2021-10-23T05:38:33Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-1",
      "headRefOid": "6be669710bb226f4ac0124ab19529eba4b065ca4",
      "closedAt": "2021-10-22T09:08:57Z",
      "mergedAt": "2021-10-22T09:08:57Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "7bbb37fb2db5d8be017016badcc9fb2b312e1c7d"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema @Yanmei-Liu is this ready to merge?",
          "createdAt": "2021-10-22T08:55:19Z",
          "updatedAt": "2021-10-22T08:55:19Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I am working on several projects in parallel, missed this. Text is fine.",
          "createdAt": "2021-10-23T05:38:33Z",
          "updatedAt": "2021-10-23T05:38:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukGFC",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-15T20:31:18Z",
          "updatedAt": "2021-10-15T20:31:24Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Section 9.5 of RFC 9000 says: _\"At any time, endpoints MAY change the Destination Connection ID they transmit with to a value that has not been used on another path.\"_ I don't know whether we want to repeat that, but it seems that we have to consider two cases:\r\n\r\n1) Packet received with a different 4-tuple, same CID: treat as specified in section 9.3 of RFC 9000, i.e., handle NAT rebinding.\r\n2) Packet received on existing 4-tuple, different CID: treat as specified in section 9.5 of RFC 9000, i.e., renewal of CID on an existing path.",
              "createdAt": "2021-10-15T20:31:18Z",
              "updatedAt": "2021-10-15T20:31:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uknj8",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T11:12:09Z",
          "updatedAt": "2021-10-16T11:12:09Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yes, we need to handle NAT rebinding cases when the 1-RTT packets are sent with different 4-tuples and the same CID, so I prefer SHOULD here.",
              "createdAt": "2021-10-16T11:12:09Z",
              "updatedAt": "2021-10-16T11:12:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ul8ao",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-18T07:51:53Z",
          "updatedAt": "2021-10-18T07:51:54Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yes, the rebinding case is considered here. The text says that the sender must change the CID when you move to a new path, however, the receiver should not expect to always see a new CID if the address changes (because of NAT rebinding). This MUST is only for the receiver. ",
              "createdAt": "2021-10-18T07:51:53Z",
              "updatedAt": "2021-10-18T07:51:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uvQ8C",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-20T08:15:16Z",
          "updatedAt": "2021-10-20T08:15:16Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Maybe a way to rephrase this:\r\n\"An endpoint sending 1-RTT packets MUST use different Connection IDs on different paths, if non-zero-length Connection IDs are used. Still, the receiver may observe the same Connection ID used on different 4-tuples due to, e.g., NAT rebinding. In such case, the receiver reacts as specified in {{Section 9.3 of QUIC-TRANSPORT}}.\"",
              "createdAt": "2021-10-20T08:15:16Z",
              "updatedAt": "2021-10-20T08:15:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uvRlG",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-20T08:17:35Z",
          "updatedAt": "2021-10-20T08:17:36Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nAn endpoint sending 1-RTT packets MUST use different Connection IDs on different paths, if non-zero-length\r\nConnection IDs are used. Still, the receiver may observe the same Connection ID used on different 4-tuples\r\ndue to, e.g., NAT rebinding. In such case, the receiver reacts as specified in\r\n{{Section 9.3 of QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2021-10-20T08:17:35Z",
              "updatedAt": "2021-10-20T08:17:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uvghn",
          "commit": {
            "abbreviatedOid": "6be6697"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-20T09:10:21Z",
          "updatedAt": "2021-10-20T09:10:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u4qjM",
          "commit": {
            "abbreviatedOid": "6be6697"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-22T09:07:29Z",
          "updatedAt": "2021-10-22T09:07:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOGNtpaM4tRL4o",
      "title": "Replace single instance of uniflow per path",
      "url": "https://github.com/quicwg/multipath/pull/17",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is really a minor issue, but the word \"uniflow\" appears just once in the draft, in section 5, packet scheduling. I think the packet scheduling text could simply use the word \"path\".",
      "createdAt": "2021-10-15T20:38:00Z",
      "updatedAt": "2021-10-16T22:59:01Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "quicwg/multipath",
      "headRefName": "uniflow-should-be-path",
      "headRefOid": "747b177c6dce6332d88487fdeabbb79641fcfd33",
      "closedAt": "2021-10-16T22:59:01Z",
      "mergedAt": "2021-10-16T22:59:01Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "35df4daaeb56110ececcfee473f2f2f45b04a254"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukhJi",
          "commit": {
            "abbreviatedOid": "747b177"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T03:34:12Z",
          "updatedAt": "2021-10-16T03:34:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ukjnE",
          "commit": {
            "abbreviatedOid": "747b177"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T06:37:21Z",
          "updatedAt": "2021-10-16T06:37:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOGNtpaM4tRY74",
      "title": "Simplify PATH_STATUS frame with PATH_ABANDON frame",
      "url": "https://github.com/quicwg/multipath/pull/19",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Simplify path_status frame with path_abandon frame following the discussion on issue#2. Error code and Reason Phrase are left TBD.",
      "createdAt": "2021-10-15T22:39:07Z",
      "updatedAt": "2021-10-18T07:55:28Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path-abandon-frame",
      "headRefOid": "a18ebf98f9f77c0682de2734c47545237862f6bd",
      "closedAt": "2021-10-16T22:58:25Z",
      "mergedAt": "2021-10-16T22:58:25Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "bd63a177aa2a8d2d98146481d829b6b99216d470"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I actually think we should have keep stand-by. I think this was useful in MPTCP and it's not really related to scheduling. Stand-by only means: I won't use this path but please keep it open.",
          "createdAt": "2021-10-18T07:55:28Z",
          "updatedAt": "2021-10-18T07:55:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukYGU",
          "commit": {
            "abbreviatedOid": "ecf047c"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Providing text for error and reason phrase, and suggesting change in default code for PATH_ABANDON",
          "createdAt": "2021-10-15T22:52:03Z",
          "updatedAt": "2021-10-15T22:53:57Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "How about just adapting the text from QUIC Connection_Close frame:\r\n```\r\nError Code:\r\n: A variable-length integer that indicates the reason for closing this connection.\r\n\r\nReason Phrase Length:\r\n: A variable-length integer specifying the length of the reason phrase in bytes.\r\n  Because an ABANDON_FRAME frame cannot be split between packets, any limits\r\n  on packet size will also limit the space available for a reason phrase.\r\n\r\nReason Phrase:\r\n: Additional diagnostic information for the closure. This can be zero length if\r\n  the sender chooses not to give details beyond the Error Code value.\r\n  This SHOULD be a UTF-8 encoded string {{!RFC3629}}, though the frame\r\n  does not carry information, such as language tags, that would aid comprehension\r\n  by any entity other than the one that created the text.\r\n```\r\n\r\nThe error code will often be \"No Error\". However, some issues can happen, such as closing a path because resource are exceeded, or because there are too many transmission errors, or anything else. Having error codes and an optional reason phrase will help diagnostic and debugging.",
              "createdAt": "2021-10-15T22:52:03Z",
              "updatedAt": "2021-10-15T22:53:57Z"
            },
            {
              "originalPosition": 177,
              "body": "How about not reusing the exact same code as the old PATH_STATUS frame? I would suggest something like \"experiments use 0xbaba05\".",
              "createdAt": "2021-10-15T22:53:17Z",
              "updatedAt": "2021-10-15T22:53:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhFA",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T03:29:01Z",
          "updatedAt": "2021-10-16T03:29:01Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "I have merged your texts into the draft.",
              "createdAt": "2021-10-16T03:29:01Z",
              "updatedAt": "2021-10-16T03:29:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhFr",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T03:29:54Z",
          "updatedAt": "2021-10-16T03:29:54Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "Yes, the PATH_ABANDON type is changed to 0xbaba05 now.",
              "createdAt": "2021-10-16T03:29:54Z",
              "updatedAt": "2021-10-16T03:29:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhcV",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I made a typo, see comment on closing this path. Apart from that, looks good.",
          "createdAt": "2021-10-16T03:55:32Z",
          "updatedAt": "2021-10-16T03:56:36Z",
          "comments": [
            {
              "originalPosition": 154,
              "body": "Fixed the text to say \"abandoning this path\". ",
              "createdAt": "2021-10-16T03:55:32Z",
              "updatedAt": "2021-10-16T15:59:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukmgb",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2021-10-16T10:00:54Z",
          "updatedAt": "2021-10-16T10:00:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOGNtpaM4tRyj5",
      "title": "[+] add definitions for transport parameter",
      "url": "https://github.com/quicwg/multipath/pull/20",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-16T10:52:42Z",
      "updatedAt": "2021-10-28T08:12:47Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0fccf8df3dfd72ff100d5724275250fc205a71bf",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/options_for_pn_space",
      "headRefOid": "1f3fb551d7c2f60d3799d40e13c8b4d8721a528f",
      "closedAt": "2021-10-18T07:08:16Z",
      "mergedAt": "2021-10-18T07:08:16Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "4fcc470e59017459f031e1a3fad5c39faa5c1301"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I just want to note that I used value 1 for multiple packet number spaces to bee compatible with what is already used by Alibaba. However, if that change it not a problem for Alibaba, this order is slightly nicer.",
          "createdAt": "2021-10-18T07:53:29Z",
          "updatedAt": "2021-10-18T07:53:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uksGE",
          "commit": {
            "abbreviatedOid": "1f3fb55"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T15:50:20Z",
          "updatedAt": "2021-10-16T15:50:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ulylI",
          "commit": {
            "abbreviatedOid": "1f3fb55"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T07:07:54Z",
          "updatedAt": "2021-10-18T07:07:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOGNtpaM4tR0Qo",
      "title": "[+] add error codes for IANA registry",
      "url": "https://github.com/quicwg/multipath/pull/21",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-16T11:45:11Z",
      "updatedAt": "2021-10-28T08:12:46Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0fccf8df3dfd72ff100d5724275250fc205a71bf",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/error_code",
      "headRefOid": "86a198adff0c6f477b6ce60d9a0defedd0f32f4f",
      "closedAt": "2021-10-18T07:09:34Z",
      "mergedAt": "2021-10-18T07:09:34Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "9c2773aee0240eb4958d6b476d799f06f216bdef"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uksJk",
          "commit": {
            "abbreviatedOid": "86a198a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks OK.",
          "createdAt": "2021-10-16T15:53:27Z",
          "updatedAt": "2021-10-16T15:53:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uly5I",
          "commit": {
            "abbreviatedOid": "86a198a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T07:09:24Z",
          "updatedAt": "2021-10-18T07:09:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 23,
      "id": "PR_kwDOGNtpaM4tT8jM",
      "title": "ACK_MP only valid using multiple packet number spaces",
      "url": "https://github.com/quicwg/multipath/pull/23",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #8.",
      "createdAt": "2021-10-18T08:34:32Z",
      "updatedAt": "2021-10-18T17:26:24Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "74e66ac8569cab84f21a4ef5a7d0e14ac084f7b7",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "ack-mp-single-psn",
      "headRefOid": "94192df0e6e8857a38f2a6a5426c501bdd818096",
      "closedAt": "2021-10-18T17:26:24Z",
      "mergedAt": "2021-10-18T17:26:24Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "d48c10ceb1430ccfaae823affd8fa28c361425ec"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4umKdo",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T08:42:33Z",
          "updatedAt": "2021-10-18T08:42:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4umpXp",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2021-10-18T10:40:51Z",
          "updatedAt": "2021-10-18T10:40:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uoYGb",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T16:54:58Z",
          "updatedAt": "2021-10-18T16:54:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 24,
      "id": "PR_kwDOGNtpaM4tUzj0",
      "title": "Introduce finite state machine for path's state",
      "url": "https://github.com/quicwg/multipath/pull/24",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Initial attempt to solve #10.",
      "createdAt": "2021-10-18T12:49:40Z",
      "updatedAt": "2021-10-25T12:23:21Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "65fbd86ee4dfdc32e5eeedcd295140587c4ce2e3",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "path-states",
      "headRefOid": "2319475349fcf7b574bef897edf4c7f7cd5f0cd2",
      "closedAt": "2021-10-25T12:23:21Z",
      "mergedAt": "2021-10-25T12:23:20Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9bb0ec671d391ea300fd7837928bc1626f8ba8b8"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "One more editorial comment: This section is now somehow in the middle between the cc section and the packet scheduling section. I think it would be better to have this new section as a subsection of section 3 (on Path Setup and Removal).",
          "createdAt": "2021-10-25T12:05:29Z",
          "updatedAt": "2021-10-25T12:05:29Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Indeed, let me fix that.",
          "createdAt": "2021-10-25T12:07:34Z",
          "updatedAt": "2021-10-25T12:07:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u1fDi",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T14:21:00Z",
          "updatedAt": "2021-10-21T14:21:00Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Not sure if we need to use normative language here: MUST -> have to\r\n\r\nAnd do you maybe mean non-final state?",
              "createdAt": "2021-10-21T14:21:00Z",
              "updatedAt": "2021-10-21T14:21:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1gYA",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-10-21T14:24:45Z",
          "updatedAt": "2021-10-21T14:33:05Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Isn't the first step to send (not received) a PATH_CHALLENGE and then you stay in \"Validating\" state until you receive PATH_RESPONSE (which would trigger the transition to the next state)?",
              "createdAt": "2021-10-21T14:24:45Z",
              "updatedAt": "2021-10-21T14:33:05Z"
            },
            {
              "originalPosition": 56,
              "body": "We should not use normative language in this section, however, not sure if normative language is needed in this case.",
              "createdAt": "2021-10-21T14:28:56Z",
              "updatedAt": "2021-10-21T14:33:05Z"
            },
            {
              "originalPosition": 59,
              "body": "\"usage is enabled by\" is a bit unclear. Maybe: ... provided the congestion control and flow control currently allow sending of new data on a path",
              "createdAt": "2021-10-21T14:32:35Z",
              "updatedAt": "2021-10-21T14:33:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1sTL",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T14:58:07Z",
          "updatedAt": "2021-10-21T14:58:07Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Indeed, let's avoid using normative language, and maybe non-final sounds better.",
              "createdAt": "2021-10-21T14:58:07Z",
              "updatedAt": "2021-10-21T14:58:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1s-T",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T15:00:02Z",
          "updatedAt": "2021-10-21T15:00:03Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "The \"initiate path validation\" is indeed sending a PATH_CHALLENGE on the new path, but we can also have the case of a server that received the PATH_CHALLENGE, sent back the PATH_RESPONSE but did not sent PATH_CHALLENGE (yet). Actually, the transition can be simplified by a \"PATH_CHALLENGE sent/received on new path\", and the following one \"PATH_RESPONSE received\".",
              "createdAt": "2021-10-21T15:00:03Z",
              "updatedAt": "2021-10-21T15:00:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u16NJ",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T15:45:27Z",
          "updatedAt": "2021-10-21T15:45:27Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I think I would omit the part in this diagram where  PATH_CHALLENGE is received by not not send and just define that the validating is enter as soon as a PATH_CHALENGE is sent. Or if you want to show this in the diagram then we would need a separate state for this? Or maybe a separate diagram for the initiator and the \"responder\"?",
              "createdAt": "2021-10-21T15:45:27Z",
              "updatedAt": "2021-10-21T15:45:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u4O8Z",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T07:04:49Z",
          "updatedAt": "2021-10-22T07:04:49Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I don't know if we need a specific state for this (or a different name for the state), but the receiver of the PATH_CHALLENGE frame needs to reply a PATH_RESPONSE frame on the viewed 4-tuple using a unused CID. It should probably keep this mapping if later it wants to validate the path (although I think the receiver should also send a PATH_CHALLENGE, but nothing forces it to do so).",
              "createdAt": "2021-10-22T07:04:49Z",
              "updatedAt": "2021-10-22T07:04:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9W18",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I believe this is ready to merge. @Yanmei-Liu can you check and merge?",
          "createdAt": "2021-10-25T08:55:57Z",
          "updatedAt": "2021-10-25T08:55:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9yEG",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-10-25T10:41:31Z",
          "updatedAt": "2021-10-25T10:41:53Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "As we have 0-RTT transmission in QUIC-TRANSPORT, we should not limit that non-probing packets can only be transmitted after the path address has been validated in multi-path, which could add at least one round-trip-time delay for data sent on the new path. We can use anti-amplification limit instead.",
              "createdAt": "2021-10-25T10:41:32Z",
              "updatedAt": "2021-10-25T10:41:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u98cY",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:28:27Z",
          "updatedAt": "2021-10-25T11:28:27Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "@Yanmei-Liu this is a restriction from RFC9000 and also indicated like this in the current text. If you want to release that restriction please open a new issue for it (which we probably leave open for discussion after submission of -00)",
              "createdAt": "2021-10-25T11:28:27Z",
              "updatedAt": "2021-10-25T11:28:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_oL",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:42:50Z",
          "updatedAt": "2021-10-25T11:42:50Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "It's ok. I record it in a new issue and we keep this limitation in version 00.",
              "createdAt": "2021-10-25T11:42:50Z",
              "updatedAt": "2021-10-25T11:42:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-AB5",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:44:36Z",
          "updatedAt": "2021-10-25T11:44:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 28,
      "id": "PR_kwDOGNtpaM4teVas",
      "title": "add more illustration figures to path close, maybe need revisions",
      "url": "https://github.com/quicwg/multipath/pull/28",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "For -01"
      ],
      "body": "I added 2 illustration figures describing path close when null-length CIDs are used. This changes are based on the discussion of issue #1 . But I think it may need additional revision.  ",
      "createdAt": "2021-10-21T05:50:25Z",
      "updatedAt": "2022-01-20T08:28:56Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "30e9429950fb215400ed552fc9ea68e1509e9658",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path-close-figures",
      "headRefOid": "b949f72c933ad13a837ffe019a8327a9b2afd2f3",
      "closedAt": "2022-01-20T08:28:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I think it would be valuable to also update the description of the Path Identifier Type field of the PATH_ABANDON frame, as I find the current description a bit unclear.\r\n\r\nI have updated the path identifier description. Hope this makes things more clear.",
          "createdAt": "2021-10-23T07:46:55Z",
          "updatedAt": "2021-10-23T07:46:55Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@huitema Could you take a look and see if there are additional things we need to change here?",
          "createdAt": "2021-10-25T04:55:26Z",
          "updatedAt": "2021-10-25T04:55:26Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> My main issue is that I don't think the server should reply to a client's ABANDON with an ABANDON of its own. It should just stop sending on that path. The client MAY want to eter some kind of path closing state, during which it MAY repeat the ABANDON if it sees the server continuing to send traffic. After some time (3xRTO) the client just drops the path. If the server continues sending, the packets will be dropped, and the server will eventually close the path the hard way.\r\n> \r\n> OK, we need to publish in about 12 hours, so maybe it is too late to change the version 00 of the draft now. Maybe resolve that issue later, when we publish a new version?\r\n\r\nYes. I agree, we can fix this issue later. Shall we first keep path_abandons from both sides?",
          "createdAt": "2021-10-25T06:36:11Z",
          "updatedAt": "2021-10-25T06:36:11Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd be okay to merge but maybe it better to just leave this unmerged for -00 and merge later when we have decided how to handle path-abandon best? Otherwise having this example could be confusing.",
          "createdAt": "2021-10-25T08:58:35Z",
          "updatedAt": "2021-10-25T08:58:35Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IMHO we could leave that for -01 indeed.",
          "createdAt": "2021-10-25T11:26:43Z",
          "updatedAt": "2021-10-25T11:26:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u1l8v",
          "commit": {
            "abbreviatedOid": "1d9b085"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T14:39:49Z",
          "updatedAt": "2021-10-21T14:39:51Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "Isn't that always the case that if a single packet number space is used in one directly is also needs to be used in the other direction?\r\n\r\nAlso the assumption here is because there is a non-zero length CID in on direction, this has to use one packet number space? Maybe better so say this at the beginning of this paragraph.",
              "createdAt": "2021-10-21T14:39:50Z",
              "updatedAt": "2021-10-21T14:39:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1xXk",
          "commit": {
            "abbreviatedOid": "1d9b085"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I'm a bit confused by the second example, as I currently understand the path identifier type, I think there are typos there.",
          "createdAt": "2021-10-21T15:14:21Z",
          "updatedAt": "2021-10-21T15:27:22Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "I would say \"... use non-zero length CIDs. For the first path, the server's 1-RTT packets use DCID C1... Note that two paths use different packet number spaces.\" Then, I would complement by \"In this case, the client is going to close the first path. It identifies it by the sequence number of the DCID it uses over that path (path identifier type 0x00), hence using the path_id 1. In reply, the server confirms the path using the sequence number of the DCID it uses over that path (path identifier type 0x00), corresponding to path_id 2.",
              "createdAt": "2021-10-21T15:14:21Z",
              "updatedAt": "2021-10-21T15:27:22Z"
            },
            {
              "originalPosition": 108,
              "body": "I would precise that this is still the client that initiates the path closure.",
              "createdAt": "2021-10-21T15:17:20Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            },
            {
              "originalPosition": 110,
              "body": "Shouldn't the server use 0x01 as path_identifier_type instead? Maybe the figure should be updated as well.",
              "createdAt": "2021-10-21T15:18:50Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            },
            {
              "originalPosition": 112,
              "body": "As I understand the path identifier type, it should be 0x00 here",
              "createdAt": "2021-10-21T15:21:14Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            },
            {
              "originalPosition": 168,
              "body": "I suppose it can terminate using a path immediately and maybe send a PATH_ABANDON later, but I assume the use case here is to say that PATH_ABANDON is a kind of graceful path closure, but abrupt closures are also possible.",
              "createdAt": "2021-10-21T15:25:28Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u4K0i",
          "commit": {
            "abbreviatedOid": "1d9b085"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T06:39:59Z",
          "updatedAt": "2021-10-22T06:39:59Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "Good suggestion. Yes, moving it to the beginning of the paragraph is more clear.",
              "createdAt": "2021-10-22T06:39:59Z",
              "updatedAt": "2021-10-22T06:39:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u4usZ",
          "commit": {
            "abbreviatedOid": "db6d389"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I think it would be valuable to also update the description of the Path Identifier Type field of the PATH_ABANDON frame, as I find the current description a bit unclear.",
          "createdAt": "2021-10-22T09:25:05Z",
          "updatedAt": "2021-10-22T09:25:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u8rgG",
          "commit": {
            "abbreviatedOid": "b949f72"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "My main issue is that I don't think the server should reply to a client's ABANDON with an ABANDON of its own. It should just stop sending on that path. The client MAY want to eter some kind of path closing state, during which it MAY repeat the ABANDON if it sees the server continuing to send traffic. After some time (3xRTO) the client just drops the path. If the server continues sending, the packets will be dropped, and the server will eventually close the path the hard way.\r\n\r\nOK, we need to publish in about 12 hours, so maybe it is too late to change the version 00 of the draft now. Maybe resolve that issue later, when we publish a new version?",
          "createdAt": "2021-10-25T05:10:09Z",
          "updatedAt": "2021-10-25T05:17:21Z",
          "comments": [
            {
              "originalPosition": 169,
              "body": "Do we really need the server to send a Path Abandon? ",
              "createdAt": "2021-10-25T05:10:09Z",
              "updatedAt": "2021-10-25T05:17:21Z"
            },
            {
              "originalPosition": 149,
              "body": "I would personally not have the server send a PATH ABANDON in reply to the client message. The client may want to repeat the ABANDON if it sees the server continuing to send data, kind of like the \"closing\" state in RFC 9000, but we do not need a handshake.\r\n",
              "createdAt": "2021-10-25T05:12:13Z",
              "updatedAt": "2021-10-25T05:17:21Z"
            },
            {
              "originalPosition": 106,
              "body": "Not sure the server needs to send a path abandon. What is supposed to happen if it doesn't? Wouldn't the client close the path anyhow?",
              "createdAt": "2021-10-25T05:13:14Z",
              "updatedAt": "2021-10-25T05:17:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ynBUx",
          "commit": {
            "abbreviatedOid": "b949f72"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-11T12:18:15Z",
          "updatedAt": "2022-01-11T12:18:21Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "This is what we say in the dark currently:\r\n\r\n`The receiver of an PATH_ABANDON frame MAY also send an PATH_ABANDON frame to signal its own willingness to not send any packet on this path anymore.`\r\n\r\nI guess we could remove the abandon from from the server in this example or clarify in the text that this is optional.\r\n\r\n@yfmascgy can you update the PR accordingly?",
              "createdAt": "2022-01-11T12:18:15Z",
              "updatedAt": "2022-01-11T12:18:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 29,
      "id": "PR_kwDOGNtpaM4tidpQ",
      "title": "Update identification of packet number space identifier",
      "url": "https://github.com/quicwg/multipath/pull/29",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Attempt to address #27, probably more text will be needed afterwards.",
      "createdAt": "2021-10-22T09:12:05Z",
      "updatedAt": "2022-07-07T09:38:49Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "7bbb37fb2db5d8be017016badcc9fb2b312e1c7d",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "pnsi-zero-length",
      "headRefOid": "8df480190cdcb0b355920a236cbe5cce467dc9d1",
      "closedAt": "2022-07-07T09:38:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this might need a few more updates in the rest of the text. Thee abandon frame support this already but there might be more text needed on the PN space section.",
          "createdAt": "2021-10-22T17:04:54Z",
          "updatedAt": "2021-10-22T17:04:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Just as a matter of process: if we don't merge this PR (now) we need another PR (till Monday) that clearly specifies that in case of multipath_enabled=2 both endpoints MUST use connection IDs and if that is not the case the connection MUST be closed with an error. I guess that belongs in the negotiation section (as well as probably one sentence somewhere in the intro).",
          "createdAt": "2021-10-23T07:47:52Z",
          "updatedAt": "2021-10-23T07:47:52Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we have reach any conclusion here or do we want to bring this up for further discussion on the list/during the meeting?",
          "createdAt": "2022-03-03T13:59:36Z",
          "updatedAt": "2022-03-03T13:59:36Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Quentin has opened issue #96, which is a good place for this discussion. I would rather table this PR, and not change the text before we agree on a solution to #96.",
          "createdAt": "2022-03-03T18:46:10Z",
          "updatedAt": "2022-03-03T18:46:10Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema not sure if this is the right order of things. This is a change/improvement to the multiple PNS approach. I think we want to know if/how this works in order to be able to make an informed decision about which approach to choose. In other words I think we should resolve this issue before we address #96. However, not sure we did reach agreement yet if this is actually an improvement and therefore we might bring this up for more working group discussion on the list or the next meeting.",
          "createdAt": "2022-03-03T19:07:07Z",
          "updatedAt": "2022-03-03T19:07:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't believe that making decryption dependent on evaluation of IP addresses is a good idea. There are too many ways in which this can lead to trouble, e.g., variations of load balancer and NAT configurations. I would table this PR.",
          "createdAt": "2022-03-03T19:32:06Z",
          "updatedAt": "2022-03-03T19:32:06Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would personally like to have a decryption processing and ACK processing as simple ans straightforward as possible, to minimize risks of bugs, etc. Something like:\r\n\r\n* Number space is directly tied to DCID\r\n* MP-ACK are tied to number space, and identified by DCID of incoming packets\r\n\r\nThis leaves an ambiguity for the identifier in \"Abandon PATH\". I would be OK to simplify this to state either DCID used by peer, or some escape for \"this path\". That way we could see a simple reactive process:\r\n\r\n* receiver receives packet on path that it would rather not see in use anymore\r\n* if DCID in packet, receiver sends \"ABANDON PATH(this DCID)\"\r\n* else, receiver sends \"ABANDON_PATH(this path)\".",
          "createdAt": "2022-03-03T19:37:53Z",
          "updatedAt": "2022-03-03T19:37:53Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema I not sure I fully understand your proposal but it seems like a new/separate issue. Can you please open a new issue and if possible create an alternative PR?",
          "createdAt": "2022-03-04T10:05:05Z",
          "updatedAt": "2022-03-04T10:05:05Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this PR is OBE. @qdeconinck can we close it?",
          "createdAt": "2022-07-06T13:51:14Z",
          "updatedAt": "2022-07-06T13:51:14Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given that #103 is now merged, we can close this now.",
          "createdAt": "2022-07-07T09:38:49Z",
          "updatedAt": "2022-07-07T09:38:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u7jMY",
          "commit": {
            "abbreviatedOid": "8df4801"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I would rather keep it simple and require non null connection IDs for the MP variant. I think mixing 5 tuples into low level packet decryption and parsing is asking for trouble. Also, I am concerned that we are introducing here an untested variation, which might make the whole proposal weaker.\r\n\r\nIn any case, the text has to be specialized to the case in which the client, but not the server, use non null connection ID.",
          "createdAt": "2021-10-23T05:54:13Z",
          "updatedAt": "2021-10-23T05:57:57Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I do not agree that this works.\r\n\r\nFor starter, it does not work if the server uses a zero length CID. It that case, in order to create a new path, a client sends a probe with a zero length CID. It arrives at the server on a five tuple that the server has not yet seen. How can the server know which encryption context it should use? The same issue would also happen in the case of NAT rebinding. The server sees a new five tuple, does not know what encryption to apply.\r\n\r\nSo, the first request is to specialize this text to the case in which the client uses zero length CID but the server does not.\r\n\r\nEven in that case, using the five tuple is going to make client-side encryption offload significantly more complex. The offload engines will have to remember all the five tuples used in the connection, and the corresponding keys. This is a new requirement, and it may be difficult to meet by many implementations.\r\n\r\nI think it would be much simpler to accept the limitation: using multiple number spaces requires that both sides use non-null connection IDs.",
              "createdAt": "2021-10-23T05:54:13Z",
              "updatedAt": "2021-10-23T05:57:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ym_7a",
          "commit": {
            "abbreviatedOid": "8df4801"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-11T12:13:06Z",
          "updatedAt": "2022-01-11T12:13:06Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I definitely agree with your first point or to say it more generally, the host opening a new path needs to carry a CID. \r\n\r\nNot entirely sure about the second point: Why do you think it is more complicated to path to a 5-tuple instead of matching the CID? Or do you mean that current offload engines only use the CID and this would simply be a change? Are these kind of offload engines already deployed?\r\n",
              "createdAt": "2022-01-11T12:13:06Z",
              "updatedAt": "2022-01-11T12:13:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41lQLn",
          "commit": {
            "abbreviatedOid": "8df4801"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-03-03T13:58:47Z",
          "updatedAt": "2022-03-03T13:58:58Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nsequence number of the Connection ID used by its peer over the same 5-tuple. \r\nThis implies that if a connection ID is used by either host, only packets that carry\r\na connection ID can be used to open a new path. When both hosts\r\n```",
              "createdAt": "2022-03-03T13:58:48Z",
              "updatedAt": "2022-03-03T13:58:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41m087",
          "commit": {
            "abbreviatedOid": "8df4801"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T18:44:16Z",
          "updatedAt": "2022-03-03T18:44:17Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "The current API only uses the packet itself: look at the packet, find the number context, expand the number to 64 bits, attempt decryption. Using IP addresses makes this a bit more complicated, and introduces new failure modes such as variation of NAT. Using the peer's CID is also error prone. For example, in case of probes, the receiver has no idea of the value of the peer's CID.\r\n\r\nSee issue #96 for a discussion of options.",
              "createdAt": "2022-03-03T18:44:17Z",
              "updatedAt": "2022-03-03T18:44:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOGNtpaM4tjbV5",
      "title": "Editorial pass",
      "url": "https://github.com/quicwg/multipath/pull/30",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-22T14:39:22Z",
      "updatedAt": "2021-10-24T08:05:07Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "7bbb37fb2db5d8be017016badcc9fb2b312e1c7d",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-2",
      "headRefOid": "3686e07f1b2f08df8da9b008fc80968385d9d624",
      "closedAt": "2021-10-24T08:05:07Z",
      "mergedAt": "2021-10-24T08:05:07Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "0f3c9464445492926e9f1e4460a75ff4030fd368"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm still working on this but need to take a little break now.",
          "createdAt": "2021-10-22T14:42:20Z",
          "updatedAt": "2021-10-22T14:42:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u564N",
          "commit": {
            "abbreviatedOid": "8893fa4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T14:40:03Z",
          "updatedAt": "2021-10-22T14:40:04Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "This was moved to the next section and the section were the frame is specified.",
              "createdAt": "2021-10-22T14:40:03Z",
              "updatedAt": "2021-10-22T14:40:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u57Va",
          "commit": {
            "abbreviatedOid": "8893fa4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T14:41:38Z",
          "updatedAt": "2021-10-22T14:41:38Z",
          "comments": [
            {
              "originalPosition": 222,
              "body": "This part was removed as it is more implementation guidance. A sentence that the initial path has the path ID 0 was added to the previous section.\r\n\r\nSomething could be re-added later to the implementation guidance section. Please provide a PR if you think that is useful.  ",
              "createdAt": "2021-10-22T14:41:38Z",
              "updatedAt": "2021-10-22T14:41:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u6ejU",
          "commit": {
            "abbreviatedOid": "8893fa4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T16:59:05Z",
          "updatedAt": "2021-10-22T16:59:05Z",
          "comments": [
            {
              "originalPosition": 232,
              "body": "```suggestion\r\n## Using One Packet Number Space\r\n```",
              "createdAt": "2021-10-22T16:59:05Z",
              "updatedAt": "2021-10-22T16:59:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u6ers",
          "commit": {
            "abbreviatedOid": "8194d6e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T16:59:42Z",
          "updatedAt": "2021-10-22T16:59:42Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "I removed the experimental value for now. We should probably add a new one!",
              "createdAt": "2021-10-22T16:59:42Z",
              "updatedAt": "2021-10-22T16:59:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u6fB4",
          "commit": {
            "abbreviatedOid": "8194d6e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T17:01:20Z",
          "updatedAt": "2021-10-22T17:01:20Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "I removed this, as I understood that we don't support this case anymore. @Yanmei-Liu please confirm!",
              "createdAt": "2021-10-22T17:01:20Z",
              "updatedAt": "2021-10-23T07:25:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u7jRW",
          "commit": {
            "abbreviatedOid": "e554d06"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-23T06:00:49Z",
          "updatedAt": "2021-10-23T06:00:50Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "I think you wanted to remove lines 409, not line 407.",
              "createdAt": "2021-10-23T06:00:50Z",
              "updatedAt": "2021-10-23T06:00:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u7jit",
          "commit": {
            "abbreviatedOid": "4f2f228"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I think these are good editorial fixes. When reviewing, I fixed half a dozen typos, committing the edits directly. I also opened two issues: the text on allocating CID before opening paths should be moved from the introduction of \"multiple number spaces\" to a common section, maybe the introduction of both spaces; and, the option 2 of the syntax of the path identifier could be simplified. I had previously opened another issue about moving the text on RTT estimates from \"single space\" to a common section.",
          "createdAt": "2021-10-23T06:18:59Z",
          "updatedAt": "2021-10-23T06:37:43Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "Please disregard my previous comment. I agree with this edit.",
              "createdAt": "2021-10-23T06:18:59Z",
              "updatedAt": "2021-10-23T06:37:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u7kd9",
          "commit": {
            "abbreviatedOid": "3686e07"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-23T07:26:24Z",
          "updatedAt": "2021-10-23T07:26:25Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "Yes 407 was edited and keep; 409 was removed.",
              "createdAt": "2021-10-23T07:26:24Z",
              "updatedAt": "2021-10-23T07:26:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u8ACx",
          "commit": {
            "abbreviatedOid": "3686e07"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T07:57:38Z",
          "updatedAt": "2021-10-24T07:57:38Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "That's ok.",
              "createdAt": "2021-10-24T07:57:38Z",
              "updatedAt": "2021-10-24T07:57:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u8AOU",
          "commit": {
            "abbreviatedOid": "3686e07"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks, Mirja. Look good to me. ",
          "createdAt": "2021-10-24T08:04:52Z",
          "updatedAt": "2021-10-24T08:04:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOGNtpaM4tl8xM",
      "title": "[~] new code point for negotiation option ",
      "url": "https://github.com/quicwg/multipath/pull/36",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For issue #26 ",
      "createdAt": "2021-10-24T18:19:30Z",
      "updatedAt": "2021-10-28T08:12:45Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/new_option",
      "headRefOid": "826b8c41b35a22624e89b593352b994690769333",
      "closedAt": "2021-10-25T11:11:36Z",
      "mergedAt": "2021-10-25T11:11:36Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "d6ed0589e8e1499c87e8d128ca567af23be6434e"
      },
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok too.",
          "createdAt": "2021-10-25T11:39:42Z",
          "updatedAt": "2021-10-25T11:39:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u8TuC",
          "commit": {
            "abbreviatedOid": "1a47fa7"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T22:41:21Z",
          "updatedAt": "2021-10-24T22:41:27Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"babe\", uh? When I was at Microsoft, constants like would be auto-flagged as sexist in the code review. Can we pick something else, maybe 0xbabf ?",
              "createdAt": "2021-10-24T22:41:21Z",
              "updatedAt": "2021-10-24T22:41:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u8tB9",
          "commit": {
            "abbreviatedOid": "826b8c4"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T05:24:53Z",
          "updatedAt": "2021-10-25T05:24:54Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yes. We should be more careful. I fixed this issue.",
              "createdAt": "2021-10-25T05:24:53Z",
              "updatedAt": "2021-10-25T05:24:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9QOP",
          "commit": {
            "abbreviatedOid": "826b8c4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "@qdeconinck please confirm that this is okay and merge!",
          "createdAt": "2021-10-25T08:31:33Z",
          "updatedAt": "2021-10-25T08:31:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9qOg",
          "commit": {
            "abbreviatedOid": "826b8c4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T10:08:26Z",
          "updatedAt": "2021-10-25T10:08:26Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Very sorry for that. I didn't notice the trick. I'll pay attention next time.",
              "createdAt": "2021-10-25T10:08:26Z",
              "updatedAt": "2021-10-25T10:13:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 37,
      "id": "PR_kwDOGNtpaM4tl9On",
      "title": "[~] fix Path Identifier Content",
      "url": "https://github.com/quicwg/multipath/pull/37",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #35.",
      "createdAt": "2021-10-24T18:31:30Z",
      "updatedAt": "2021-10-28T08:12:39Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_id",
      "headRefOid": "dd84eaaf871f1f6e850f9143838a50487be8ab49",
      "closedAt": "2021-10-25T08:24:40Z",
      "mergedAt": "2021-10-25T08:24:40Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "71f7b0096f9d4afa46b27a6420d7e053c5cd5aea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u8WPH",
          "commit": {
            "abbreviatedOid": "dd84eaa"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Yes, perfect.",
          "createdAt": "2021-10-25T00:09:58Z",
          "updatedAt": "2021-10-25T00:09:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9OQy",
          "commit": {
            "abbreviatedOid": "dd84eaa"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T08:24:24Z",
          "updatedAt": "2021-10-25T08:24:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOGNtpaM4tmGuY",
      "title": "Description of RTT issue to common part of draft.",
      "url": "https://github.com/quicwg/multipath/pull/38",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This would resolve issue #18\r\n\r\nClose #18",
      "createdAt": "2021-10-24T22:57:30Z",
      "updatedAt": "2021-10-25T16:06:12Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "quicwg/multipath",
      "headRefName": "move-rtt-text",
      "headRefOid": "58fbcb4812002f0be1c194a8a84170060796e230",
      "closedAt": "2021-10-25T10:16:55Z",
      "mergedAt": "2021-10-25T10:16:54Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u9P5Q",
          "commit": {
            "abbreviatedOid": "58fbcb4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I guess could have move this in the implementation guidance section but this is fine as well.",
          "createdAt": "2021-10-25T08:30:21Z",
          "updatedAt": "2021-10-25T08:30:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9sRa",
          "commit": {
            "abbreviatedOid": "58fbcb4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T10:16:43Z",
          "updatedAt": "2021-10-25T10:16:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 41,
      "id": "PR_kwDOGNtpaM4tmIGM",
      "title": "Fix kramdown and xml2rfc warnings",
      "url": "https://github.com/quicwg/multipath/pull/41",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Close #39",
      "createdAt": "2021-10-24T23:29:34Z",
      "updatedAt": "2021-10-25T16:05:44Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "quicwg/multipath",
      "headRefName": "more-editorial-fixes",
      "headRefOid": "a8ca17962a830ac8c7ced1019afa142357631819",
      "closedAt": "2021-10-25T08:26:39Z",
      "mergedAt": "2021-10-25T08:26:39Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "a0eed5da5ccc555d90a075f9d63e0be6f21c6942"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 42,
      "id": "PR_kwDOGNtpaM4tm0eN",
      "title": "fix more than one experimental value of ACK MP",
      "url": "https://github.com/quicwg/multipath/pull/42",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Given the deadline, let's first have one set of values instead of two. We may want to decide a third value set later. ",
      "createdAt": "2021-10-25T07:07:27Z",
      "updatedAt": "2021-11-03T03:52:51Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/ack-mp-exp-value",
      "headRefOid": "3c4e13ec28dff5fd514770e800d4eccd1a817b75",
      "closedAt": "2021-10-25T11:06:09Z",
      "mergedAt": "2021-10-25T11:06:09Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "5a62c429b071fb3aa29ae6a6d9f2ce7e9b0a4e51"
      },
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok for me!",
          "createdAt": "2021-10-25T11:37:27Z",
          "updatedAt": "2021-10-25T11:37:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u9WOe",
          "commit": {
            "abbreviatedOid": "a59ef05"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "@qdeconinck please review and merge if you agree!",
          "createdAt": "2021-10-25T08:53:47Z",
          "updatedAt": "2021-10-25T08:53:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9tUm",
          "commit": {
            "abbreviatedOid": "a59ef05"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T10:21:06Z",
          "updatedAt": "2021-10-25T10:21:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u93i_",
          "commit": {
            "abbreviatedOid": "3c4e13e"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Fixed conflict.",
          "createdAt": "2021-10-25T11:05:59Z",
          "updatedAt": "2021-10-25T11:05:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 44,
      "id": "PR_kwDOGNtpaM4tnVFT",
      "title": "Clarify that multiple PN spaces require CID in both directions",
      "url": "https://github.com/quicwg/multipath/pull/44",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #43",
      "createdAt": "2021-10-25T09:52:44Z",
      "updatedAt": "2021-10-25T11:21:41Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "a0eed5da5ccc555d90a075f9d63e0be6f21c6942",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-pns-cids",
      "headRefOid": "06faf2664179bcbe92c9fda8a1739d64bcfba7c3",
      "closedAt": "2021-10-25T11:21:41Z",
      "mergedAt": "2021-10-25T11:21:41Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "b16e25959033d6d868d4e63e31074938b709d8da"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u9ybL",
          "commit": {
            "abbreviatedOid": "06faf26"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T10:43:09Z",
          "updatedAt": "2021-10-25T10:43:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u964h",
          "commit": {
            "abbreviatedOid": "06faf26"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:21:17Z",
          "updatedAt": "2021-10-25T11:21:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOGNtpaM4tncl7",
      "title": "Clarification of congestion control section",
      "url": "https://github.com/quicwg/multipath/pull/45",
      "state": "MERGED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some more text in the congestion control section explaining why coupled congestion control is suggested. We could later add SHOULD or MUST to request the utilization of coupled congestion control schemes for multipath QUIC.",
      "createdAt": "2021-10-25T10:26:53Z",
      "updatedAt": "2021-10-25T11:15:18Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "congestion",
      "headRefOid": "baa62e7b3fabc194f329ab5026ebce182263de59",
      "closedAt": "2021-10-25T11:15:18Z",
      "mergedAt": "2021-10-25T11:15:18Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "f7d22b7d88843be13491e40a6e0d0b71b875efe1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u948I",
          "commit": {
            "abbreviatedOid": "baa62e7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:12:16Z",
          "updatedAt": "2021-10-25T11:12:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u95jM",
          "commit": {
            "abbreviatedOid": "baa62e7"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:15:06Z",
          "updatedAt": "2021-10-25T11:15:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOGNtpaM4tnfLP",
      "title": "Clarifications on PATH_ABANDON",
      "url": "https://github.com/quicwg/multipath/pull/46",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #32 \r\n\r\nPlease carefully review the text about abandon frames on the last active path. This is new and maybe not what you intended, however, because of potential crossing of abandon frames from each direction (as mentioned by @huitema in the issue), I don't think receiving an abandon frame on the last active path should be a protocol violation.",
      "createdAt": "2021-10-25T10:40:39Z",
      "updatedAt": "2021-10-25T15:24:40Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-abandon",
      "headRefOid": "cc686c0228562aed817797a10932d1cca7981bac",
      "closedAt": "2021-10-25T12:22:37Z",
      "mergedAt": "2021-10-25T12:22:37Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "6391660f7b27757232ca0242a9bad9adea16da26"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u97hg",
          "commit": {
            "abbreviatedOid": "2d878bf"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:24:14Z",
          "updatedAt": "2021-10-25T11:24:14Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "that also _may_ trigger retransmission of data ...",
              "createdAt": "2021-10-25T11:24:14Z",
              "updatedAt": "2021-10-25T11:24:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u971X",
          "commit": {
            "abbreviatedOid": "2d878bf"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:25:39Z",
          "updatedAt": "2021-10-25T11:25:40Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nas ACK can still be received on other frame that also may trigger retransmission of data on another path.\r\n```",
              "createdAt": "2021-10-25T11:25:39Z",
              "updatedAt": "2021-10-25T11:25:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u99hb",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:33:22Z",
          "updatedAt": "2021-10-25T11:40:56Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "it is possible that the packet containing the PATH_ABANDON frame or\r\nthe packet containing the ACK for the PATH_ABANDON frame cannot _be_ received anymore",
              "createdAt": "2021-10-25T11:33:22Z",
              "updatedAt": "2021-10-25T11:40:56Z"
            },
            {
              "originalPosition": 28,
              "body": "The PATH_ABANDON frame therefore indicates to the receiving peer that the sender\r\ndoes not _intend_ to send any packets on that path anymore",
              "createdAt": "2021-10-25T11:34:08Z",
              "updatedAt": "2021-10-25T11:40:56Z"
            },
            {
              "originalPosition": 47,
              "body": "Would it be more clear that the endpoint just use CONNECTION_CLOSE frame immediately if the endpoint don't want to use the last path?",
              "createdAt": "2021-10-25T11:40:45Z",
              "updatedAt": "2021-10-25T11:40:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_gI",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:42:18Z",
          "updatedAt": "2021-10-25T11:42:18Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nthe packet containing the ACK for the PATH_ABANDON frame cannot be received anymore and the endpoint\r\n```",
              "createdAt": "2021-10-25T11:42:18Z",
              "updatedAt": "2021-10-25T11:42:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_l4",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:42:41Z",
          "updatedAt": "2021-10-25T11:42:42Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\ndoes not intend to send any packets on that path anymore but also recommends to the receiver that no \r\n```",
              "createdAt": "2021-10-25T11:42:42Z",
              "updatedAt": "2021-10-25T11:42:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-AMO",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:44:54Z",
          "updatedAt": "2021-10-25T11:44:54Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "Yes, that's what the client/sender should do. However this text is discussing what happens if you received a PATH_ABANDON on the last open path despite.\r\n\r\nWe could consider this as a protocol violation, however, as two PATH_ABANDON frames for each end could cross each other if both ends are allow to send PATH_ABANDON, I don't think it should be a protocol violation.\r\n\r\nWe could add one more sentence that usually CONNECTION_CLOSE should be used to close the last open path.",
              "createdAt": "2021-10-25T11:44:54Z",
              "updatedAt": "2021-10-25T11:44:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-Ahj",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:46:22Z",
          "updatedAt": "2021-10-25T11:46:22Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\n\r\nIf an endpoint wants to close the last open path of a connection, it MUST use the CONNECTION_CLOSE frame as specified in {{RFC9000}}.\r\n\r\n```",
              "createdAt": "2021-10-25T11:46:22Z",
              "updatedAt": "2021-10-25T11:56:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_f5",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Some suggestions to make the text ACK/ACK_MP agnostic and about retransmissions.",
          "createdAt": "2021-10-25T11:42:16Z",
          "updatedAt": "2021-10-25T11:48:42Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "\"as acknowledgment can still be received or other frame that...\"",
              "createdAt": "2021-10-25T11:42:17Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            },
            {
              "originalPosition": 19,
              "body": "\"when the packet that contained the PATH_ABANDON frame got acknowledged\"",
              "createdAt": "2021-10-25T11:43:11Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            },
            {
              "originalPosition": 36,
              "body": "\"the packet acknowledging the PATH_ABANDON frame\"",
              "createdAt": "2021-10-25T11:44:48Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            },
            {
              "originalPosition": 40,
              "body": "I would precise that the retransmittable frames (or content) of these packets should be retransmitted",
              "createdAt": "2021-10-25T11:47:00Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-Bs8",
          "commit": {
            "abbreviatedOid": "8f13055"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:51:25Z",
          "updatedAt": "2021-10-25T11:51:25Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nas acknowledgments can still be received or other frames that also may trigger retransmission of data on another path.\r\n```",
              "createdAt": "2021-10-25T11:51:25Z",
              "updatedAt": "2021-10-25T11:51:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-B-m",
          "commit": {
            "abbreviatedOid": "8f13055"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:52:39Z",
          "updatedAt": "2021-10-25T11:52:39Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nThe endpoint sending the PATH_ABANDON frame SHOULD consider a path as abandoned when the \r\npacket that contained the PATH_ABANDON frame is acknowledged. When releasing resources of a path,\r\n```",
              "createdAt": "2021-10-25T11:52:39Z",
              "updatedAt": "2021-10-25T11:52:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-CcT",
          "commit": {
            "abbreviatedOid": "8f13055"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:54:40Z",
          "updatedAt": "2021-10-25T11:54:41Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nRetransmittable frame, that have previously been send on the abandoned path and are considered lost, \r\nSHOULD be retransmitted on a different path.\r\n```",
              "createdAt": "2021-10-25T11:54:41Z",
              "updatedAt": "2021-10-25T11:54:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-DPN",
          "commit": {
            "abbreviatedOid": "cc686c0"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:58:01Z",
          "updatedAt": "2021-10-25T11:58:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u-I-k",
          "commit": {
            "abbreviatedOid": "cc686c0"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T12:21:05Z",
          "updatedAt": "2021-10-25T12:21:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u_DGX",
          "commit": {
            "abbreviatedOid": "cc686c0"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Sounds good. I think the next feedback will come once we have implemented and tested the feature.",
          "createdAt": "2021-10-25T15:24:40Z",
          "updatedAt": "2021-10-25T15:24:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 48,
      "id": "PR_kwDOGNtpaM4tnjAl",
      "title": "Clarification in the section on packet scheduling",
      "url": "https://github.com/quicwg/multipath/pull/48",
      "state": "MERGED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some more text for the scheduling section to clarify it.",
      "createdAt": "2021-10-25T10:59:12Z",
      "updatedAt": "2021-10-25T12:34:12Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "scheduling",
      "headRefOid": "0ab714af6208163d268b2c3bd525622840dc14e6",
      "closedAt": "2021-10-25T12:34:12Z",
      "mergedAt": "2021-10-25T12:34:11Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "31b2dfe01133d9433c042d9a3656d1d72d04ba4c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u93Rn",
          "commit": {
            "abbreviatedOid": "1496b8e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:04:45Z",
          "updatedAt": "2021-10-25T11:04:46Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\npackets can only be sent when the congestion window of at least one path is open.\r\n```\r\nNote that the previous section also talks about congestion control but I think that is okay.",
              "createdAt": "2021-10-25T11:04:45Z",
              "updatedAt": "2021-10-25T11:04:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u93s2",
          "commit": {
            "abbreviatedOid": "1496b8e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think you first change needs a revision. I left another clarifying edit for the rest of your text.",
          "createdAt": "2021-10-25T11:06:38Z",
          "updatedAt": "2021-10-25T11:07:55Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think we actually already agreed that this will be a different document and not path of a future version of this document (as indicated in the intro). Of course the wg can always revisit this decision but we should document what we agree to for now.",
              "createdAt": "2021-10-25T11:06:38Z",
              "updatedAt": "2021-10-25T11:07:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-CIv",
          "commit": {
            "abbreviatedOid": "1496b8e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "A suggestion to resolve Mirja's point, also agree on the proposed change in line 248.",
          "createdAt": "2021-10-25T11:53:20Z",
          "updatedAt": "2021-10-25T11:55:02Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nAfter completing the handshake, endpoints have agreed to enable multipath feature and can start using multiple paths. This document does not discuss when a client decides to initiate a new path. We delegate such discussion in separate documents.\r\n```",
              "createdAt": "2021-10-25T11:53:21Z",
              "updatedAt": "2021-10-25T11:55:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-DKU",
          "commit": {
            "abbreviatedOid": "0ab714a"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:57:43Z",
          "updatedAt": "2021-10-25T11:57:43Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Quentin replied faster than me",
              "createdAt": "2021-10-25T11:57:43Z",
              "updatedAt": "2021-10-25T11:57:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-DL8",
          "commit": {
            "abbreviatedOid": "0ab714a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:57:50Z",
          "updatedAt": "2021-10-25T11:57:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOGNtpaM4tnjCv",
      "title": "Add link to PN space slides from side meeting",
      "url": "https://github.com/quicwg/multipath/pull/49",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #26",
      "createdAt": "2021-10-25T10:59:25Z",
      "updatedAt": "2021-10-25T11:37:38Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-3",
      "headRefOid": "8ed32784b206073c5004445fc6b0643bf6164d32",
      "closedAt": "2021-10-25T11:36:07Z",
      "mergedAt": "2021-10-25T11:36:07Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "65fbd86ee4dfdc32e5eeedcd295140587c4ce2e3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u92d6",
          "commit": {
            "abbreviatedOid": "e615f84"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:01:11Z",
          "updatedAt": "2021-10-25T11:01:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u99lY",
          "commit": {
            "abbreviatedOid": "e615f84"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Ok with the PR, I can make a quick commit to fix the listed typos",
          "createdAt": "2021-10-25T11:33:39Z",
          "updatedAt": "2021-10-25T11:34:06Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"highly difference latencies\" -> \"highly different latencies\"\r\n\"an multipath extension\" -> \"a multipath extension\"\r\n\"before final publlication\" \"publication\"",
              "createdAt": "2021-10-25T11:33:39Z",
              "updatedAt": "2021-10-25T11:34:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOGNtpaM4tq_Y8",
      "title": "Some edits to the Introduction",
      "url": "https://github.com/quicwg/multipath/pull/52",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-26T09:17:17Z",
      "updatedAt": "2021-10-27T05:33:04Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "master",
      "headRefOid": "fe3fed0d9c078643487b3ad1f4ee43f786958bd5",
      "closedAt": "2021-10-27T05:33:04Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD2kN",
          "commit": {
            "abbreviatedOid": "fe3fed0"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't think we should approve this proposal. I have questions about both the specifics and the process. On the specific, the changes are a mix of suggested rewrite for clarity and subtle deviations from the original intent. The clarity part is a matter of taste; the subtle deviations need discussion.\r\n\r\nAnd thus, to process. Since the DPRIVE WG has not adopted a fully GitHub based process, the preferred method for requesting changes is by having a discussion on the WG mailing list. If we did adopt a GitHub based process, we should probably first migrate this depot to an IETF managed account. Then, we should make clear that discussions should start by opening an issue, not a pull request. Issues allow presentation of the problem before text changes and the archival of those discussions, pull requests are not designed for that. They should come later, when the issue has outlined a consensus for change.",
          "createdAt": "2021-10-26T15:04:54Z",
          "updatedAt": "2021-10-26T15:17:53Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I don't think we should mention scenarios like resource pooling in the introduction. I also don't think we should use loaded language like \"not optimal\". I like the original writing better.",
              "createdAt": "2021-10-26T15:04:54Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            },
            {
              "originalPosition": 32,
              "body": "This is the introduction, I don't think we need detailed quotes of QUIC section. If we do, however, we need to adopt the quoting format of XML2RFC v3.",
              "createdAt": "2021-10-26T15:07:06Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            },
            {
              "originalPosition": 35,
              "body": "No. WE are indeed speaking of path management in QUIC V1, including functions like path validation.",
              "createdAt": "2021-10-26T15:08:01Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            },
            {
              "originalPosition": 47,
              "body": "No. The packet number is also used in path that are not active.",
              "createdAt": "2021-10-26T15:09:32Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 54,
      "id": "PR_kwDOGNtpaM4trE70",
      "title": "Update the terminology section",
      "url": "https://github.com/quicwg/multipath/pull/54",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Add an entry for \"path\" and some minor tweaks.",
      "createdAt": "2021-10-26T09:43:19Z",
      "updatedAt": "2021-10-27T05:33:14Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-1",
      "headRefOid": "d2f399fe78f0c440bed46984f6f9423aca502929",
      "closedAt": "2021-10-27T05:33:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD8Jy",
          "commit": {
            "abbreviatedOid": "d2f399f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Same comments as Pr #52. This is not the right process. Please open an issue or have a discussion on the mailing list.",
          "createdAt": "2021-10-26T15:21:26Z",
          "updatedAt": "2021-10-26T15:21:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOGNtpaM4trzIL",
      "title": "Handshake Section",
      "url": "https://github.com/quicwg/multipath/pull/55",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-26T13:18:26Z",
      "updatedAt": "2021-10-27T05:32:52Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-2",
      "headRefOid": "0d9e002752f3f4453e7dd5a8ae846217555be24f",
      "closedAt": "2021-10-27T05:32:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD7qP",
          "commit": {
            "abbreviatedOid": "0d9e002"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "See comments on the other PR for the introduction session. This is not the right process. Please have the discussion on the mailing list first, or submit an issue to discuss specific problems.",
          "createdAt": "2021-10-26T15:19:52Z",
          "updatedAt": "2021-10-26T15:19:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOGNtpaM4tr7aN",
      "title": "Edits to \"Path Setup and Removal\" Section",
      "url": "https://github.com/quicwg/multipath/pull/57",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-26T13:51:37Z",
      "updatedAt": "2021-10-27T05:32:41Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-3",
      "headRefOid": "d9e890d458357185dc75379ef9e1c46a4634b327",
      "closedAt": "2021-10-27T05:32:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD9yF",
          "commit": {
            "abbreviatedOid": "d9e890d"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "As noted in the comments on PR #52 the changes mix some efforts at clarity and some subtle deviations from the consensus. Submitting a PR is NOT the proper process. Start with a discussion on the mailing list or open issues. I think there are valid issues here, such as inconsistent writing of \"multipath\" and \"multi-path\", or the formatting of section references, but these should be treated as specific issues, rather than intermingled with other changes.",
          "createdAt": "2021-10-26T15:26:23Z",
          "updatedAt": "2021-10-26T15:26:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOGNtpaM4tuCed",
      "title": "change MP_ACK to ACK_MP so that the name is unified",
      "url": "https://github.com/quicwg/multipath/pull/62",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This should be a simple fix. There was only one place where MP_ACK appeared.",
      "createdAt": "2021-10-27T04:58:48Z",
      "updatedAt": "2021-10-27T06:05:30Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/one-ack-name",
      "headRefOid": "1282b5f9447da92479bf41388dc14c2ad99fc4b4",
      "closedAt": "2021-10-27T06:05:30Z",
      "mergedAt": "2021-10-27T06:05:30Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "fd89c897a10bc57f1150df180d0e6348e5ed439c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vGNGl",
          "commit": {
            "abbreviatedOid": "ca3b5c1"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I added changes of the tag \"mp-ack-frame\" to \"ack-mp-frame\" for consistency...",
          "createdAt": "2021-10-27T05:10:10Z",
          "updatedAt": "2021-10-27T05:10:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vGUEN",
          "commit": {
            "abbreviatedOid": "1282b5f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-27T06:05:18Z",
          "updatedAt": "2021-10-27T06:05:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOGNtpaM4tuOlq",
      "title": "Improve text in handshake negotiation",
      "url": "https://github.com/quicwg/multipath/pull/67",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Close #66 \r\n",
      "createdAt": "2021-10-27T06:43:19Z",
      "updatedAt": "2021-10-28T07:06:45Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "fd89c897a10bc57f1150df180d0e6348e5ed439c",
      "headRepository": "quicwg/multipath",
      "headRefName": "clarify-handshake-nego",
      "headRefOid": "19a58c649413a6c2eacaef9e2136acad2a1d890f",
      "closedAt": "2021-10-28T07:06:45Z",
      "mergedAt": "2021-10-28T07:06:45Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "65ec23fc4de4ea896a229755be8aeff0b4fb1076"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vGauE",
          "commit": {
            "abbreviatedOid": "19a58c6"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-27T06:45:18Z",
          "updatedAt": "2021-10-27T06:45:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vGc4V",
          "commit": {
            "abbreviatedOid": "19a58c6"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-27T06:56:29Z",
          "updatedAt": "2021-10-27T06:56:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vK65O",
          "commit": {
            "abbreviatedOid": "19a58c6"
          },
          "author": "boucadair",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Looks good to me. Thanks.",
          "createdAt": "2021-10-28T05:40:10Z",
          "updatedAt": "2021-10-28T05:40:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vLI4i",
          "commit": {
            "abbreviatedOid": "19a58c6"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-28T07:06:33Z",
          "updatedAt": "2021-10-28T07:06:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 69,
      "id": "PR_kwDOGNtpaM4tyEqL",
      "title": "[~] replace QUIC v1 with QUIC version 1",
      "url": "https://github.com/quicwg/multipath/pull/69",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Be consistent with RFC9000",
      "createdAt": "2021-10-28T08:22:02Z",
      "updatedAt": "2021-11-03T03:52:32Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "65ec23fc4de4ea896a229755be8aeff0b4fb1076",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/quic_v1",
      "headRefOid": "0e357e9b02c55264a38d7be8299b0e8cb6d21be9",
      "closedAt": "2021-10-28T13:16:17Z",
      "mergedAt": "2021-10-28T13:16:17Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "99fbdfbd34c4ee98f783c954fea366a20e2c2be8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vMc-1",
          "commit": {
            "abbreviatedOid": "0e357e9"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-28T12:27:38Z",
          "updatedAt": "2021-10-28T12:27:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vMeB2",
          "commit": {
            "abbreviatedOid": "0e357e9"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-28T12:31:40Z",
          "updatedAt": "2021-10-28T12:31:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 70,
      "id": "PR_kwDOGNtpaM4ty8sJ",
      "title": "[~] Use structured references to section of other documents",
      "url": "https://github.com/quicwg/multipath/pull/70",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #58 ",
      "createdAt": "2021-10-28T13:07:37Z",
      "updatedAt": "2021-11-03T03:52:30Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "99fbdfbd34c4ee98f783c954fea366a20e2c2be8",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/section_ref",
      "headRefOid": "c805d33ac0a19eb247a65af43136a78486776ce6",
      "closedAt": "2021-10-29T15:00:05Z",
      "mergedAt": "2021-10-29T15:00:05Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "d4511eb97b3d1b3955b5e5dcd9099f234af0a5ab"
      },
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I went ahead and replaced the references to RFC9000 by QUIC-TRANSPORT, and RFC9001 by QUIC-TLS. I have checked that this produced the expected XML V3.",
          "createdAt": "2021-10-28T14:00:35Z",
          "updatedAt": "2021-10-28T14:00:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vMy7a",
          "commit": {
            "abbreviatedOid": "d827305"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "There is an issue of duplicate references. The modified text refers directly to RFC 9000; this leads to duplicate references to both [QUIC-TRANSPORT] and [RFC9000] in the reference section. We should try to only keep the \"QUIC-TRANSPORT\" form.",
          "createdAt": "2021-10-28T13:40:03Z",
          "updatedAt": "2021-10-28T13:40:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vM6g5",
          "commit": {
            "abbreviatedOid": "c805d33"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "With the fixed references, it works now...",
          "createdAt": "2021-10-28T14:01:52Z",
          "updatedAt": "2021-10-28T14:01:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vNABl",
          "commit": {
            "abbreviatedOid": "c805d33"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-28T14:15:50Z",
          "updatedAt": "2021-10-28T14:15:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 71,
      "id": "PR_kwDOGNtpaM4t5Ewz",
      "title": "[~] break long lines, no other modifications",
      "url": "https://github.com/quicwg/multipath/pull/71",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Each line is limited to 72 characters.",
      "createdAt": "2021-10-31T14:09:45Z",
      "updatedAt": "2021-11-05T07:48:42Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "d4511eb97b3d1b3955b5e5dcd9099f234af0a5ab",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/short_lines",
      "headRefOid": "7e2030aee318a7d5377aab96dd25e5684c30182c",
      "closedAt": "2021-11-02T12:32:11Z",
      "mergedAt": "2021-11-02T12:32:11Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "be62a93c8882aad30d399c1a77c9dd91bfe7ab88"
      },
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I verified that this PR produces the draft that we expect. I did one small change: remove spaces at the end of lines.",
          "createdAt": "2021-11-02T06:22:15Z",
          "updatedAt": "2021-11-02T06:22:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vYWn5",
          "commit": {
            "abbreviatedOid": "7e2030a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-02T06:22:31Z",
          "updatedAt": "2021-11-02T06:22:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vZslw",
          "commit": {
            "abbreviatedOid": "7e2030a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-02T12:32:04Z",
          "updatedAt": "2021-11-02T12:32:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOGNtpaM4uA9n_",
      "title": "[~] replace multi-path with multipath",
      "url": "https://github.com/quicwg/multipath/pull/72",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Be consistent with title.",
      "createdAt": "2021-11-03T04:02:20Z",
      "updatedAt": "2021-11-05T07:48:08Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "be62a93c8882aad30d399c1a77c9dd91bfe7ab88",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/multipath",
      "headRefOid": "94037fde7c2c9ee4f1cfb97020e6b6f801fc60c8",
      "closedAt": "2021-11-04T05:55:53Z",
      "mergedAt": "2021-11-04T05:55:53Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "2fb158afe5b8faeb492ac92ce561815e32c72614"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vdo9B",
          "commit": {
            "abbreviatedOid": "94037fd"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-03T09:46:43Z",
          "updatedAt": "2021-11-03T09:46:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ve9Br",
          "commit": {
            "abbreviatedOid": "94037fd"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-03T14:36:05Z",
          "updatedAt": "2021-11-03T14:36:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 73,
      "id": "PR_kwDOGNtpaM4uBGPy",
      "title": "[~] adjust the discussion for pros/cons of pn spaces to Section 7",
      "url": "https://github.com/quicwg/multipath/pull/73",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-03T05:34:45Z",
      "updatedAt": "2021-11-05T07:48:06Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "be62a93c8882aad30d399c1a77c9dd91bfe7ab88",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/pn_space",
      "headRefOid": "4419674dc75349c525e3d0aa5fe202ca47a6a3bc",
      "closedAt": "2021-11-04T15:39:42Z",
      "mergedAt": "2021-11-04T15:39:42Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "d23e5c1fa53f122b952052a311c804b35e26a640"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vdomj",
          "commit": {
            "abbreviatedOid": "2fe551a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-03T09:46:12Z",
          "updatedAt": "2021-11-03T09:46:13Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nconnection ID for less overhead, e.g., in highly constrained networks\r\n```",
              "createdAt": "2021-11-03T09:46:12Z",
              "updatedAt": "2021-11-03T09:46:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4vdoq2",
          "commit": {
            "abbreviatedOid": "2fe551a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-03T09:46:18Z",
          "updatedAt": "2021-11-03T09:46:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ve-91",
          "commit": {
            "abbreviatedOid": "9b05261"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-03T14:41:35Z",
          "updatedAt": "2021-11-03T14:46:06Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I would drop the example in the last sentence. It implies that overhead is only an issue in \"highly constrained\" networks, while in practice Chrome does it to minimize aggregated overhead regardless of network constraints. Dropping the text from \", e.g., \" to the final dot avoids speculation on why people do not like overhead.",
              "createdAt": "2021-11-03T14:41:35Z",
              "updatedAt": "2021-11-03T14:46:06Z"
            },
            {
              "originalPosition": 30,
              "body": "Note that there are really 2 arguments for the single space approach. Overhead is one, but \"fewer code changes\" is another. So I would say \"this approach requires the use of a connection ID and also more changes from QUIC version 1.\"",
              "createdAt": "2021-11-03T14:44:45Z",
              "updatedAt": "2021-11-03T14:46:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4vhwi0",
          "commit": {
            "abbreviatedOid": "4419674"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-04T06:15:01Z",
          "updatedAt": "2021-11-04T06:15:01Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I deleted the example after \"e.g.\". \r\n\r\n\"more changes from QUIC version 1\" depends on the specific implementation, as multiple PN spaces could keep the loss detect and ack arrangement part unchanged.\r\nSo maybe we can learn from more implementations and I prefer not to draw the conclusion too early.",
              "createdAt": "2021-11-04T06:15:01Z",
              "updatedAt": "2021-11-04T06:15:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4vjxRa",
          "commit": {
            "abbreviatedOid": "4419674"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-04T15:32:29Z",
          "updatedAt": "2021-11-04T15:32:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOGNtpaM4uBnCu",
      "title": "[~] avoid idle timeout of paths",
      "url": "https://github.com/quicwg/multipath/pull/74",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To fix #51 ",
      "createdAt": "2021-11-03T09:40:28Z",
      "updatedAt": "2021-11-05T07:48:04Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "be62a93c8882aad30d399c1a77c9dd91bfe7ab88",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_timeout",
      "headRefOid": "677a7c3578546dfa79fddf9dbe9d52086847d9de",
      "closedAt": "2021-11-05T06:30:23Z",
      "mergedAt": "2021-11-05T06:30:22Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "186af37cbe04db4db291df319a4daef2f7cde92d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vdn56",
          "commit": {
            "abbreviatedOid": "40ddba8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-03T09:44:43Z",
          "updatedAt": "2021-11-03T09:44:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vjyx2",
          "commit": {
            "abbreviatedOid": "677a7c3"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-04T15:37:12Z",
          "updatedAt": "2021-11-04T15:37:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOGNtpaM4uKUnH",
      "title": "Do not assume real time formatting of server TP",
      "url": "https://github.com/quicwg/multipath/pull/76",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current text assumes that the server transport parameters are composed after seeing the client's proposal. As pointed out in issue #75, this is a deviation from standard QUIC practice. The proposed text fixes that and specifies what happens if both endpoints select option 3, \"support both\". In that case, option 2 \"multiple number spaces\" is selected.\r\n\r\nClose #75",
      "createdAt": "2021-11-05T17:46:20Z",
      "updatedAt": "2021-11-06T08:30:49Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "186af37cbe04db4db291df319a4daef2f7cde92d",
      "headRepository": "quicwg/multipath",
      "headRefName": "tp-nego-uni",
      "headRefOid": "48ef911bf175c8a108b165e9848b0d0714716329",
      "closedAt": "2021-11-06T08:30:49Z",
      "mergedAt": "2021-11-06T08:30:48Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "1c0722d3b2dc99d0af02281203a19fb8147bcb03"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4voqh_",
          "commit": {
            "abbreviatedOid": "0dc4939"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LTGTM just 2 nits",
          "createdAt": "2021-11-05T18:02:25Z",
          "updatedAt": "2021-11-05T18:03:01Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nIf for any one of the endpoints the parameter is absent or set to 0,\r\nor if the two endpoints select incompatible values,\r\n```",
              "createdAt": "2021-11-05T18:02:26Z",
              "updatedAt": "2021-11-05T18:03:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4vo9Dw",
          "commit": {
            "abbreviatedOid": "48ef911"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-05T19:39:36Z",
          "updatedAt": "2021-11-05T19:39:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOGNtpaM4uMok2",
      "title": "type - \"None\" for \"nonce\"",
      "url": "https://github.com/quicwg/multipath/pull/78",
      "state": "MERGED",
      "author": "SpencerDawkins",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(OK, so it's not the biggest contribution I've ever made, but I DID notice it, while reading the master branch ...",
      "createdAt": "2021-11-07T22:37:51Z",
      "updatedAt": "2021-11-08T05:16:41Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "1c0722d3b2dc99d0af02281203a19fb8147bcb03",
      "headRepository": "SpencerDawkins/draft-lmbdhk-quic-multipath",
      "headRefName": "typo",
      "headRefOid": "518663c6f87a6d7649f713647cad7707fcb667d3",
      "closedAt": "2021-11-08T05:16:41Z",
      "mergedAt": "2021-11-08T05:16:41Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "ee830a8febe80218cbb7e8009a38c7cd30c61dcb"
      },
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This relates to only one typo, so I merge this PR.",
          "createdAt": "2021-11-08T05:15:59Z",
          "updatedAt": "2021-11-08T05:15:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vqmL6",
          "commit": {
            "abbreviatedOid": "518663c"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks for correcting this!",
          "createdAt": "2021-11-08T05:13:39Z",
          "updatedAt": "2021-11-08T05:13:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOGNtpaM4uk9N8",
      "title": "Fix typo in section \"path close\"",
      "url": "https://github.com/quicwg/multipath/pull/80",
      "state": "MERGED",
      "author": "iyangsj",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-16T08:35:39Z",
      "updatedAt": "2021-11-16T09:02:19Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "ee830a8febe80218cbb7e8009a38c7cd30c61dcb",
      "headRepository": "iyangsj/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-1",
      "headRefOid": "d1bfe9cff87c5ce31d042d924f0c1d0a0884ecb7",
      "closedAt": "2021-11-16T09:02:18Z",
      "mergedAt": "2021-11-16T09:02:18Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "87fdcb000389417f56c909c5d6a1412204712d28"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4wGaGe",
          "commit": {
            "abbreviatedOid": "d1bfe9c"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "That indeed should be \"path\".",
          "createdAt": "2021-11-16T08:43:51Z",
          "updatedAt": "2021-11-16T08:43:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4wGecq",
          "commit": {
            "abbreviatedOid": "d1bfe9c"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-16T08:59:56Z",
          "updatedAt": "2021-11-16T08:59:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDOGNtpaM4wDec6",
      "title": "Fix some TYPOs in Examples section",
      "url": "https://github.com/quicwg/multipath/pull/82",
      "state": "MERGED",
      "author": "iyangsj",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-20T02:37:46Z",
      "updatedAt": "2021-12-21T20:38:46Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "87fdcb000389417f56c909c5d6a1412204712d28",
      "headRepository": "iyangsj/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-2",
      "headRefOid": "b569d888c4c1e590eeb53453a15e47b19cf2c9da",
      "closedAt": "2021-12-21T20:38:46Z",
      "mergedAt": "2021-12-21T20:38:46Z",
      "mergedBy": "huitema",
      "mergeCommit": {
        "oid": "a60138ca509343f6c5495235006c34575d13856b"
      },
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the fixes, @iyangsj !",
          "createdAt": "2021-12-21T20:38:39Z",
          "updatedAt": "2021-12-21T20:38:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4x8Ji4",
          "commit": {
            "abbreviatedOid": "b569d88"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-21T20:37:50Z",
          "updatedAt": "2021-12-21T20:37:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOGNtpaM4wy4PY",
      "title": "Define path",
      "url": "https://github.com/quicwg/multipath/pull/83",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes issue #63",
      "createdAt": "2022-01-11T12:25:38Z",
      "updatedAt": "2022-01-12T08:12:23Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "a60138ca509343f6c5495235006c34575d13856b",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-4",
      "headRefOid": "54bd4ecb670bb294c5f8141f405f5d2d9be568b2",
      "closedAt": "2022-01-12T08:12:23Z",
      "mergedAt": "2022-01-12T08:12:23Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "f4bea859aca4d56e31d634ab671040f721bda543"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Good point but I guess this definition is inline with what's already specified for QUIC given NATs...",
          "createdAt": "2022-01-11T18:38:30Z",
          "updatedAt": "2022-01-11T18:38:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4yn8AK",
          "commit": {
            "abbreviatedOid": "54bd4ec"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-11T15:21:05Z",
          "updatedAt": "2022-01-11T15:21:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4yoR2J",
          "commit": {
            "abbreviatedOid": "54bd4ec"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Note that this definition is different from RFC6182 that required the utilization of at least one different addresses for different subflows. In practice, there were deployments where this requirement was not respected and it was overly conservative.",
          "createdAt": "2022-01-11T16:16:58Z",
          "updatedAt": "2022-01-11T16:16:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4yp6gV",
          "commit": {
            "abbreviatedOid": "54bd4ec"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-11T23:59:55Z",
          "updatedAt": "2022-01-11T23:59:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 84,
      "id": "PR_kwDOGNtpaM4wy7oO",
      "title": "add Yanmei and Quentin as editors",
      "url": "https://github.com/quicwg/multipath/pull/84",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-11T12:42:01Z",
      "updatedAt": "2022-01-11T23:17:46Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "a60138ca509343f6c5495235006c34575d13856b",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-5",
      "headRefOid": "fcb2232b1a485896cc711a3bbcd0c45d5fc330ac",
      "closedAt": "2022-01-11T23:17:45Z",
      "mergedAt": "2022-01-11T23:17:45Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "4ad903ddfd2e5f4303648028d798d3465567028e"
      },
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Confirmed, so I merge this PR.",
          "createdAt": "2022-01-11T23:17:41Z",
          "updatedAt": "2022-01-11T23:17:41Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4yoKpK",
          "commit": {
            "abbreviatedOid": "fcb2232"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-11T15:55:13Z",
          "updatedAt": "2022-01-11T15:55:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4yoR-h",
          "commit": {
            "abbreviatedOid": "fcb2232"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-11T16:17:23Z",
          "updatedAt": "2022-01-11T16:17:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4yp0fy",
          "commit": {
            "abbreviatedOid": "fcb2232"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-11T23:12:39Z",
          "updatedAt": "2022-01-11T23:12:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 85,
      "id": "PR_kwDOGNtpaM4wzr0l",
      "title": "SPNS: Ack delay considerations",
      "url": "https://github.com/quicwg/multipath/pull/85",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #79.",
      "createdAt": "2022-01-11T15:51:24Z",
      "updatedAt": "2022-01-19T11:20:53Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "a60138ca509343f6c5495235006c34575d13856b",
      "headRepository": "quicwg/multipath",
      "headRefName": "qdeconinck-fix-79",
      "headRefOid": "18c14847b2cb8ec415601e262807ea4978f9de04",
      "closedAt": "2022-01-19T11:20:53Z",
      "mergedAt": "2022-01-19T11:20:53Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "d7fee145bc6374b886a40909539f55796899d164"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ypjSA",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2022-01-11T21:36:26Z",
          "updatedAt": "2022-01-11T21:36:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4yrNEu",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T09:18:50Z",
          "updatedAt": "2022-01-12T09:18:50Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Maybe I'm missing something but why will it _mostly_ relate to the shortest path? Isn't it kind of random which path the highest ack'ed packet belongs to?",
              "createdAt": "2022-01-12T09:18:50Z",
              "updatedAt": "2022-01-12T09:18:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4yrXOM",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T09:45:57Z",
          "updatedAt": "2022-01-12T09:45:58Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Consider a scenario with two paths, A and B, where the latency of A is larger than the B's one. The sender wants to send two packets, spread on both paths. We have two cases.\r\n\r\n1. 1 sent on B, 2 sent on A\r\n\r\nThere are two sub-cases here.\r\n\r\n- The receiver sends an ACK before having received 2. `ACK(largest=1)` contains the ACK delay relative to path B. Then it receives 2, and sends `ACK(largest=2)` with ACK delay relative to path A. In this case, we have ACK delay for both paths.\r\n\r\n- The receiver waited for 2 before sending its ACK. Then, the ACK delay of `ACK(largest=2)` relates to path A, and we don't have the host delay of path B.\r\n\r\n2. 1 sent on A, 2 sent on B\r\n\r\nWhile we still have the two sub-cases, they both lead to the same result: `ACK(largest=2, missing=1)` and `ACK(largest=2)` have their ACK delay relative to the host delay of path B and not to the path A.\r\n\r\nIn general, if the largest packet number has been sent on the lowest latency path, it will prevent the receiver from advertising the host delay of higher latency paths. Note that the \"ideal case\" (where both paths have estimates) only works if the sender does not transmit further packets on the fast path, in which case we fall into case 2. As the fast path will get its packets acknowledged quicker, the sender will likely send further packets on fast path first. It might still be possible to get host delay estimates of slower paths, but most of the ACK delays will relate to the fast one.",
              "createdAt": "2022-01-12T09:45:58Z",
              "updatedAt": "2022-01-12T09:45:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4yrch0",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T10:02:58Z",
          "updatedAt": "2022-01-12T10:02:58Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Ah okay, the assumption is that you would basically receive all packets on the slow path \"out-of-order\". Got it now. Thanks!",
              "createdAt": "2022-01-12T10:02:58Z",
              "updatedAt": "2022-01-12T10:02:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4yvUab",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-13T05:33:30Z",
          "updatedAt": "2022-01-13T05:33:31Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I think the word \"mostly\" is a bit confusing. It could be that when someone uses a round-robin scheduler, unfortunately, it always measures the delay of the high latency path. ",
              "createdAt": "2022-01-13T05:33:31Z",
              "updatedAt": "2022-01-13T05:33:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4yvoYO",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-13T07:42:43Z",
          "updatedAt": "2022-01-13T07:42:43Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Would replacing \"mostly\" by \"most of the time\" be better?",
              "createdAt": "2022-01-13T07:42:43Z",
              "updatedAt": "2022-01-13T07:42:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDOGNtpaM4w3rOU",
      "title": "High level overview",
      "url": "https://github.com/quicwg/multipath/pull/88",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Here is an attempt to provide a high level overview that summarizes the main principles of multipath QUIC. This should be expanded as we improve the text to align it with the full extension.",
      "createdAt": "2022-01-12T16:59:21Z",
      "updatedAt": "2022-03-07T09:21:48Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "f4bea859aca4d56e31d634ab671040f721bda543",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "overview",
      "headRefOid": "7f5005822ab673f323f237c01edf4ae1276501c5",
      "closedAt": "2022-03-07T09:21:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Followed up by #108.",
          "createdAt": "2022-03-07T09:21:47Z",
          "updatedAt": "2022-03-07T09:21:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4zIvN4",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This overview puts a lot of emphasis on the algorithm side. I understand those algorithms eventually are integral parts if we want to make multipath quic work. But I feel this is a bit out of the scope of this very first draft. Maybe we should revisit this later on. ",
          "createdAt": "2022-01-20T08:44:58Z",
          "updatedAt": "2022-01-20T08:44:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41mNYv",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T16:50:31Z",
          "updatedAt": "2022-03-03T16:50:32Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nA multipath QUIC connection starts with a QUIC handshake as a regular QUIC connection.\r\nSee further Section {{nego}}.\r\n```",
              "createdAt": "2022-03-03T16:50:31Z",
              "updatedAt": "2022-03-03T16:50:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41mNwx",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T16:51:34Z",
          "updatedAt": "2022-03-03T16:51:34Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nthe chosen path, as further described in Section {{setup}}.\r\nIn this version of the document, a QUIC server does not initiate the creation\r\n```",
              "createdAt": "2022-03-03T16:51:34Z",
              "updatedAt": "2022-03-03T16:51:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41mOix",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T16:53:35Z",
          "updatedAt": "2022-03-03T16:53:35Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I think the above parts are fine as an overview. However, the later parts are to detailed and could rather go later in the doc. Can we break these out into new PRs?",
              "createdAt": "2022-03-03T16:53:35Z",
              "updatedAt": "2022-03-03T16:53:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41m2xf",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Please make it shorter...",
          "createdAt": "2022-03-03T18:48:24Z",
          "updatedAt": "2022-03-03T18:55:12Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "The active_connection_id_limit transport parameter *binds* the maximum number of paths",
              "createdAt": "2022-03-03T18:48:24Z",
              "updatedAt": "2022-03-03T18:55:12Z"
            },
            {
              "originalPosition": 16,
              "body": "The active CID limits binds the number of simultaneous paths. Or in fact, the number of simultaneous number spaces. It does not bind the total number of paths. When a path is abandoned, the CID is retired, the peer provides a new CID, and that new CID can be used on a new path.",
              "createdAt": "2022-03-03T18:51:01Z",
              "updatedAt": "2022-03-03T18:55:12Z"
            },
            {
              "originalPosition": 63,
              "body": "I agree with Mirja that this is a bit too detailed, probably too long. The path creation and packet scheduling functions are local functions defined by the implementation. We cannot really standardize what implementations do, so the best is to just have a mention that these functions exist, and leave it at that.",
              "createdAt": "2022-03-03T18:54:29Z",
              "updatedAt": "2022-03-03T18:55:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41mPCP",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-03-03T16:55:01Z",
          "updatedAt": "2022-03-03T19:14:03Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "It actually seems to me that path management might be out of scope for this document and maybe that all we need to say?",
              "createdAt": "2022-03-03T16:55:01Z",
              "updatedAt": "2022-03-03T19:14:03Z"
            },
            {
              "originalPosition": 54,
              "body": "I think the above text should many go in to the Packet Scheduling section and there is probably already some overlap. Also I think we should note that packet scheduling for a multi-stream protocol like QUIC additionally might to consider stream dependancies, e.g. sending all packets of one stream on the same paths.\r\n\r\nCan we move this to a separate PR?",
              "createdAt": "2022-03-03T16:58:44Z",
              "updatedAt": "2022-03-03T19:14:03Z"
            },
            {
              "originalPosition": 63,
              "body": "Can we also move this further down in an own section on recovery considerations (and an own PR)? Or maybe this is a subsection in the Implementation Considerations section?",
              "createdAt": "2022-03-03T17:00:33Z",
              "updatedAt": "2022-03-03T19:14:03Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nThe active_connection_id_limit transport parameter limits the maximum number of active paths\r\n```",
              "createdAt": "2022-03-03T19:12:25Z",
              "updatedAt": "2022-03-03T19:14:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41qQv8",
          "commit": {
            "abbreviatedOid": "f6a2d43"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "While the first part of the overview looks good, the second one is probably too detailed. I made some suggestions to simplify it.",
          "createdAt": "2022-03-04T14:10:30Z",
          "updatedAt": "2022-03-04T14:18:36Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "I agree. I will try to rephrase this.",
              "createdAt": "2022-03-04T14:10:31Z",
              "updatedAt": "2022-03-04T14:18:36Z"
            },
            {
              "originalPosition": 38,
              "body": "```suggestion\r\nIn addition to these core features, an application using Multipath QUIC will typically\r\nneed additional algorithms to handle the number of active paths and how they are used to\r\nsend packets. As these differ depending on the application's requirements, their\r\nspecification is out of scope of this document.\r\n```",
              "createdAt": "2022-03-04T14:13:20Z",
              "updatedAt": "2022-03-04T14:18:36Z"
            },
            {
              "originalPosition": 54,
              "body": "With the shortened version, I think the above paragraph can be moved in another PR that could indeed be placed in the scheduling section.",
              "createdAt": "2022-03-04T14:15:03Z",
              "updatedAt": "2022-03-04T14:18:36Z"
            },
            {
              "originalPosition": 56,
              "body": "```suggestion\r\nMultipath QUIC uses acknowledgments like regular QUIC. More details about these acknowledgments\r\n```",
              "createdAt": "2022-03-04T14:15:34Z",
              "updatedAt": "2022-03-04T14:18:36Z"
            },
            {
              "originalPosition": 63,
              "body": "There should be some recovery consideration too somewhere, although probably not in the overview.",
              "createdAt": "2022-03-04T14:17:04Z",
              "updatedAt": "2022-03-04T14:18:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41qio9",
          "commit": {
            "abbreviatedOid": "f6a2d43"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T15:09:28Z",
          "updatedAt": "2022-03-04T15:09:28Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "@qdeconinck can you create a new PR?",
              "createdAt": "2022-03-04T15:09:28Z",
              "updatedAt": "2022-03-04T15:09:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOGNtpaM4xvRE1",
      "title": "Rename I-D post WG adoption",
      "url": "https://github.com/quicwg/multipath/pull/93",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Renames the markdown document and updates the README. The new links in the README that point to github-hosted pages might be dead for a while during the process.",
      "createdAt": "2022-01-28T13:55:34Z",
      "updatedAt": "2022-02-14T14:02:16Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "d7fee145bc6374b886a40909539f55796899d164",
      "headRepository": "quicwg/multipath",
      "headRefName": "lucas/rename-draft",
      "headRefOid": "f4614881e8f5cd54ed82e3e65bf06739b8e3b71c",
      "closedAt": "2022-01-31T07:52:36Z",
      "mergedAt": "2022-01-31T07:52:36Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "3852c066d044326aac5f59fc6f9b4b34729a881b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4zoNlL",
          "commit": {
            "abbreviatedOid": "f461488"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-28T14:01:20Z",
          "updatedAt": "2022-01-28T14:01:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4zoNyh",
          "commit": {
            "abbreviatedOid": "f461488"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-28T14:01:43Z",
          "updatedAt": "2022-01-28T14:01:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4zpRFU",
          "commit": {
            "abbreviatedOid": "f461488"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2022-01-28T17:29:20Z",
          "updatedAt": "2022-01-28T17:29:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4zrGuj",
          "commit": {
            "abbreviatedOid": "f461488"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-29T10:16:50Z",
          "updatedAt": "2022-01-29T10:16:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 94,
      "id": "PR_kwDOGNtpaM4x9vEY",
      "title": "Text from Olivier about active paths",
      "url": "https://github.com/quicwg/multipath/pull/94",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #90",
      "createdAt": "2022-02-02T12:46:26Z",
      "updatedAt": "2022-03-07T07:55:19Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "3852c066d044326aac5f59fc6f9b4b34729a881b",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-6",
      "headRefOid": "a90283f5e4790e26c66130545d5e8a80ac9aeade",
      "closedAt": "2022-03-07T04:40:22Z",
      "mergedAt": "2022-03-07T04:40:22Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "cc7beaa88cbaf877374d684342c002640ee3fb55"
      },
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The old text was stating \"do not send if no non-probing packet received over 3 RTT\". The new text essentially adds \"do not send if no non-probing packet received or acknowledged over 3 RTT.\" At first sight it looks right, but there is a tension. Suppose that, as a receiver, I wish the sender would stop sending on a path. With the old rule, I can simply stop sending on that path. With the new rule, I would have to also stop acknowledging packets, even if those packets were received correctly. That's not natural, a tension between signalling path preference and creating artificial losses. All considered, I would rather keep the old text.\r\n\r\nMy understanding is that if I am a receiver that wants to proactively cause a sender to stop sending, I should use the explicit way of sending a path abandon frame. The idle timeout handles the case when a receiver is unaware of a path change that leads to communication failure. If that is the purpose, as long as the receiver can receive packets in the sender-to-receiver direction and acknowledge on another path, it looks to me that we should still allow the sender to use that path. But I feel if we do that, we are diverging from the bidirectional nature of a path described in the draft, which worths more discussion.",
          "createdAt": "2022-02-03T00:57:57Z",
          "updatedAt": "2022-02-03T00:57:57Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @yfmascgy that if you want to close a path, you should use the abandon frame. This sentence covers the case where a path was idle for a while and therefore should be closed silently as it might not work anymore anyway. However, if you have received packet on the path or have an indication that packets you've sent on the path were received by the other end, the path is clearly not idle and working. I also agree with @yfmascgy that that means you only know for sure that the path is still working in one direction and that might need further discussion.",
          "createdAt": "2022-02-03T09:46:28Z",
          "updatedAt": "2022-02-03T09:46:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4z6q7Q",
          "commit": {
            "abbreviatedOid": "70d29b4"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "The old text was stating \"do not send if no non-probing packet received over 3 RTT\". The new text essentially adds \"do not send if no non-probing packet received or acknowledged over 3 RTT.\" At first sight it looks right, but there is a tension. Suppose that, as a receiver, I wish the sender would stop sending on a path. With the old rule, I can simply stop sending on that path. With the new rule, I would have to also stop acknowledging packets, even if those packets were received correctly. That's not natural, a tension between signalling path preference and creating artificial losses. All considered, I would rather keep the old text.",
          "createdAt": "2022-02-02T19:36:07Z",
          "updatedAt": "2022-02-02T19:36:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4z81qY",
          "commit": {
            "abbreviatedOid": "70d29b4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T09:41:38Z",
          "updatedAt": "2022-02-03T09:41:39Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nin the last 3 path RTTs or (b) no non-probing packet sent over this\r\n```",
              "createdAt": "2022-02-03T09:41:38Z",
              "updatedAt": "2022-02-03T09:41:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4z-u8K",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T16:18:59Z",
          "updatedAt": "2022-02-03T16:19:00Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "The use of \"or\" is ambiguous. We want to say that receiving data in one direction proves that the receiving direction works, and receiving acknowledgements proves that the sending direction works. Stop sending should logically be tied to the sending direction. If packets sent on a path are not acked, then the node should stop sending because the path is probably broken. But isn't that already covered? \r\n\r\nI think the text mixes two issues: stop sending because the path is broken; and, stop sending because the peer would rather not use it anymore. The peer not sending \"non probing\" data on the path may be an indication that it does not want to use it anymore. Or it may be an indication that it has nothing to send right now. Which means the signal is ambiguous, and using ambiguous signals is a bad idea. I think we should come down to two simple ideas:\r\n\r\n* nodes should monitor the quality of paths. If packets sent on the path are not acked, that means the quality is bad and the path should probably not be used.\r\n* nodes that want they peer to stop using a specific path should signal it using \"abandon path\" frame.",
              "createdAt": "2022-02-03T16:19:00Z",
              "updatedAt": "2022-02-03T16:19:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40BIPd",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T06:26:51Z",
          "updatedAt": "2022-02-04T06:26:51Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I agree with the two simple ideas described above, I think it makes things much more clear.",
              "createdAt": "2022-02-04T06:26:51Z",
              "updatedAt": "2022-02-04T06:26:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40C-gJ",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T14:59:10Z",
          "updatedAt": "2022-02-04T14:59:11Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I also agree with the simpler ideas. The host should stop sending packets on a path if a) it experiences too many losses (i.e., they never got acknowledged), or b) a ABANDON_PATH frame has been sent/received concerning that path.",
              "createdAt": "2022-02-04T14:59:10Z",
              "updatedAt": "2022-02-04T14:59:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40DANN",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T15:04:28Z",
          "updatedAt": "2022-02-04T15:04:29Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "@qdeconinck @huitema are you saying a node should not consider a path a closed if it was idle for RTTs? This was the original intent of the text.",
              "createdAt": "2022-02-04T15:04:29Z",
              "updatedAt": "2022-02-04T15:04:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40DCkk",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T15:12:05Z",
          "updatedAt": "2022-02-04T15:12:05Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "My point here is to have clear signals. I think we could leave an \"idle timer\" per path, but idle means \"no sent packets acknowledged not received packets\" on that path, and the duration of the (local) path idle timer should have been advertised (e.g., we could reuse the max_idle_timeout transport parameter per path, or define a new one if needed).",
              "createdAt": "2022-02-04T15:12:05Z",
              "updatedAt": "2022-02-04T15:13:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40EB7h",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T19:04:02Z",
          "updatedAt": "2022-02-04T19:04:03Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Reusing the negotiated idle timer is the simpler solution for now.",
              "createdAt": "2022-02-04T19:04:03Z",
              "updatedAt": "2022-02-04T19:04:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40Ftt4",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-05T08:08:36Z",
          "updatedAt": "2022-02-05T08:08:36Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "This is linked to a previous discussion on issue #51 . At that time, we were wondering whether to we should use max_idle_timeout or define something like max_path_idle_timeout. The max_idle_timeout in RFC9000 is used to close the whole connection, so maybe we want something per-path?",
              "createdAt": "2022-02-05T08:08:36Z",
              "updatedAt": "2022-02-05T08:08:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40F45C",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-05T18:29:33Z",
          "updatedAt": "2022-02-05T18:29:34Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Defining an idle timer per path would make control more precise. It would also be one more parameter that administrators will have to worry about. How do you set up this new parameter? Should it be the same for every path? How would it relate to the globally negotiated idle timer? I am not sure that the complexity is worth it. If a node wants to abandon a path before the globally defined timer expires, they can always explicitly abandon the path before the timer expires. I would rather keep it simple and have just one timer.",
              "createdAt": "2022-02-05T18:29:34Z",
              "updatedAt": "2022-02-05T18:29:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40JJMJ",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-07T15:02:39Z",
          "updatedAt": "2022-02-07T15:02:39Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Okay, we can have more discussion on issues #51. For now and for this PR, is the proposal to replace \"in the last 3 path RTTs\" with \"for at least max_idle_timeout milliseconds\" or do we want some entirely different text? If so, please propose a new PR!",
              "createdAt": "2022-02-07T15:02:39Z",
              "updatedAt": "2022-02-07T15:02:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40RHIH",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T04:03:42Z",
          "updatedAt": "2022-02-09T04:03:43Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I think, for now, we can replace the 3-RTT with the max_idle_timeout as Mirja @mirjak proposed. Regarding whether we want something per-path, if the timeout value is large enough, I prefer what Christian @huitema suggested that we have one timer. However, if we want a shorter timeout (something like 3 times RTT), then we might want to have a per-path timer because of path heterogeneity (For example, a 5G path's RTT could be much smaller than that of the other paths).",
              "createdAt": "2022-02-09T04:03:43Z",
              "updatedAt": "2022-02-09T04:03:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40SCfe",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T09:14:15Z",
          "updatedAt": "2022-02-09T09:14:15Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nin {{QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2022-02-09T09:14:15Z",
              "updatedAt": "2022-02-09T09:14:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40SDVo",
          "commit": {
            "abbreviatedOid": "c8bbfb4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T09:16:59Z",
          "updatedAt": "2022-02-09T09:17:02Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nWhen more than one path is available, hosts shall monitor the arrival\r\nof non-probing packets and the acknowledgements \r\nfor the packets sent over each path. Hosts SHOULD stop\r\nsending traffic on a path if for at least max_idle_timeout milliseconds \r\n(a) no non-probing packet was received or (b) no non-probing\r\npacket sent over this path was acknowledged, but MAY ignore that\r\nrule if it would disqualify\r\n```",
              "createdAt": "2022-02-09T09:17:00Z",
              "updatedAt": "2022-02-09T09:17:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40ScW8",
          "commit": {
            "abbreviatedOid": "c8bbfb4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T10:31:19Z",
          "updatedAt": "2022-02-09T10:31:19Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "We can keep most of the max_idle_timeout definition, just provide an suggested version for the replacement of the origin paragraph without : \r\n\r\n\"Endpoints use the max_idle_timeout transport parameter to advertise \r\nthe idle timeout of each paths. When more than one path is available, \r\nendpoints shall monitor the arrival of non-probing packets on \r\nthe available paths. Endpoints SHOULD set the idle timers per path. \r\nAn endpoint restarts its path idle timer when a packet from its peer\r\nis received and processed successfully on this path, and endpoint also \r\nrestarts its idle timer when sending an ack-aliciting packet if no other\r\nack-eliciting packets have been sent since last receiving and processing \r\na packet on the current path. Endpoints SHOULD stop sending traffic \r\non the path if the path is idle timeout, but MAY ignore that rule \r\nif it would disqualify all available paths. \r\n\r\nTo avoid idle timeout of a path, endpoints can\r\nsend ack-eliciting packets such as packets containing PING frames\r\n{{Section 19.2 of QUIC-TRANSPORT}} on that path to keep it alive.\r\nSending periodic PING frames also helps prevent middlebox timeout,\r\nas discussed in {{Section 10.1.2 of QUIC-TRANSPORT}}.\r\n\r\nNotice that one path may become unavailable before the path idle timeout, \r\nendpoints can send a PING or other ack-eliciting frame to test a path \r\nfor liveness following {{QUIC-TRANSPORT}}. An endpoint SHOULD send \r\nPATH_ABANDON frame if it wants to stop using the path immediately, \r\ninstead of waiting for the path idle timeout.\"\r\n",
              "createdAt": "2022-02-09T10:31:19Z",
              "updatedAt": "2022-02-09T10:31:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41mXgV",
          "commit": {
            "abbreviatedOid": "a90283f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T17:18:14Z",
          "updatedAt": "2022-03-03T17:18:15Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "@Yanmei-Liu not sure where you propose to add this text. Can you create a PR?",
              "createdAt": "2022-03-03T17:18:15Z",
              "updatedAt": "2022-03-03T17:18:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41m8jB",
          "commit": {
            "abbreviatedOid": "a90283f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "The modified text looks good.",
          "createdAt": "2022-03-03T19:09:46Z",
          "updatedAt": "2022-03-03T19:09:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41nyst",
          "commit": {
            "abbreviatedOid": "a90283f"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The text looks good to me.",
          "createdAt": "2022-03-03T23:05:15Z",
          "updatedAt": "2022-03-03T23:05:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41p7j5",
          "commit": {
            "abbreviatedOid": "a90283f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T12:47:30Z",
          "updatedAt": "2022-03-04T12:47:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41t6bo",
          "commit": {
            "abbreviatedOid": "a90283f"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good to me",
          "createdAt": "2022-03-07T04:40:12Z",
          "updatedAt": "2022-03-07T04:40:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 97,
      "id": "PR_kwDOGNtpaM4z6NTw",
      "title": "New text on ECN handling with single PNS",
      "url": "https://github.com/quicwg/multipath/pull/97",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #87",
      "createdAt": "2022-03-03T18:29:44Z",
      "updatedAt": "2022-07-06T13:02:13Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-7",
      "headRefOid": "1dc888ad669c1d51ebf2537521968e50a718001d",
      "closedAt": "2022-07-06T13:02:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is included in PR #103, so closing this PR instead.",
          "createdAt": "2022-07-06T13:02:13Z",
          "updatedAt": "2022-07-06T13:02:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41m6_T",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-03-03T19:03:59Z",
          "updatedAt": "2022-03-03T19:07:21Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I would change to:\r\n\r\nRespectively, if an ACK frames acknowledges multiple\r\npackets from different paths, the ECN counters provide the sum of all signals received on those paths.",
              "createdAt": "2022-03-03T19:03:59Z",
              "updatedAt": "2022-03-03T19:07:21Z"
            },
            {
              "originalPosition": 23,
              "body": "Yes. There are many cases in which an aggregate counter is just fine -- this is indeed what we have in QUIC V1, in which ECN counters count the marks received on successive paths, or even the marks received in response to probe packets. We want to say that implementers should be cautious when using this kind of ECN feedback. But there are many scenarios in which this is just fine, e.g., when the bulk of traffic is sent on a single path and the other path is used for ACKs.",
              "createdAt": "2022-03-03T19:07:14Z",
              "updatedAt": "2022-03-03T19:07:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41m-bn",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:17:17Z",
          "updatedAt": "2022-03-03T19:17:17Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "not sure if that is better, because the problem is that you don't know anymore to which path the CE belong when you received the ACK. I think your text proposal makes that point less clear.",
              "createdAt": "2022-03-03T19:17:17Z",
              "updatedAt": "2022-03-03T19:17:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41m-lU",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:17:55Z",
          "updatedAt": "2022-03-03T19:17:55Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I agree but not sure what this mean for this PR. Do you think the text is okay as it is, or do we need to add additional notes. If so, what?",
              "createdAt": "2022-03-03T19:17:55Z",
              "updatedAt": "2022-03-03T19:17:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41nGSP",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:49:03Z",
          "updatedAt": "2022-03-03T19:49:04Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I think the acknowledgement process should be completely straightforward:\r\n\r\n* when ECN mark received, increment the counters for the number space of the packet\r\n* when sending ACK ECN, send the ECN for the number space of the ACK\r\n\r\nYes, in the case of single number space, that does mean single counter for all paths, and that makes the signal harder to use in congestion control. Implementers should be warned about that. But notice that the ACK-ECN are sent by the receiver, and the congestion control decisions are made by the sender. The sender does not have the option of \"not receiving ACK-ECN\" -- there is no parameter negotiation for that. The sender has different options:\r\n\r\n* just not use ECN, i.e., send all packets with ECN flags \"00\".\r\n* use ECN on only some path, e.g., the one path on which most data is sent, mark packets on this path with ECT-0 or ECT-1, mark packets on the other paths as \"00\".\r\n* use ECT-0 on one path, ECT-1 on the other, and use some logic to attribute ECN counts to either ECT-0 or ECT-1.\r\n* use ECT-0 or ECT-1 on all paths, and use correlation with other factors (e.g., losses, delays) to allocate the ECN marks to different paths.\r\n\r\nI would not preclude any of these options.",
              "createdAt": "2022-03-03T19:49:04Z",
              "updatedAt": "2022-03-03T19:49:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41pbUp",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T10:22:57Z",
          "updatedAt": "2022-03-04T10:22:57Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I think it would be better to discuss this in the issue #87 and not this PR but let me reply directly to a couple of points from you:\r\n\r\nFirst, as you note this problem only exists for the single PNS solution. Therefore please note that this PR proposes to add this text to the respective section for single PNS considerations. We can add more text about general ECN but that shouldn't be much different from normal QUIC operation and would be a separate PR for a different section of the document.  \r\n\r\n> Yes, in the case of single number space, that does mean single counter for all paths, and that makes the signal harder to use in congestion control.\r\n\r\nI don't think \"harder to use\" is right. If multiple packets from different paths are ack'ed in the same frame it's simply impossible to assign the signal to one path. As you never should just ignore a congestion signal, the most conservative but probably only correct reaction is unfortunately to reduce your cwnd on all paths where packet got ack'ed. \r\n\r\n> just not use ECN, i.e., send all packets with ECN flags \"00\".\r\n\r\nYes, that is an option and I can add this. This was actually my first thought (see my reply in issue #87). However, for me that would be a strong argument against the single PNS solution. But then I thought that if the receiver would send separate ACKs per path that could also address the problem and keeping ACKs separated per path (at least if the sender sends blocks of PNs on each path) might be beneficial anyway. I think that also something that Ian had in mind.\r\n\r\n> use ECN on only some path, e.g., the one path on which most data is sent, mark packets on this path with ECT-0 or ECT-1, mark packets on the other paths as \"00\".\r\n\r\nThat means you could only see ECN on one path. I don't think this an appropriate solution and again would be reason for me to not go for the single PNS solution.\r\n\r\n> use ECT-0 on one path, ECT-1 on the other, and use some logic to attribute ECN counts to either ECT-0 or ECT-1.\r\n\r\nI think this is out of scope for this document as it makes a different use of ECT1 against the recommendation in RFC8311 (and in conflict with L4S). So if you want to propose this, you have to go to tsvwg.\r\n\r\n> use ECT-0 or ECT-1 on all paths, and use correlation with other factors (e.g., losses, delays) to allocate the ECN marks to different paths.\r\n\r\nI don't think this could work. You don't have per packet delay information in the ACK, so that exactly the same ambiguity. And ideally loss should not be correlated with ECN - hopefully you have ECN instead of loss but that also not guaranteed as you might have multiple bottlenecks or other reason for loss.",
              "createdAt": "2022-03-04T10:22:57Z",
              "updatedAt": "2022-03-04T10:22:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41pbyz",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T10:24:49Z",
          "updatedAt": "2022-03-04T10:24:50Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n\r\nAlternatively, a sender MAY decide to disable ECN entirely when a single\r\npacket number space is used by marking all sent packets as Not-ECN capable.\r\n\r\n```",
              "createdAt": "2022-03-04T10:24:49Z",
              "updatedAt": "2022-03-04T10:25:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41p_pU",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The proposed text looks fine to me (with some minor rephrasing and typo suggestions).",
          "createdAt": "2022-03-04T13:05:20Z",
          "updatedAt": "2022-03-04T13:12:44Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nindication for all paths with packets that have been acknowledged in that\r\n```",
              "createdAt": "2022-03-04T13:05:20Z",
              "updatedAt": "2022-03-04T13:12:44Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nACK frame. An host that receives an ACK with an ECN counter increase\r\nacknowledging packets from different paths MAY disable ECN marking and\r\n```",
              "createdAt": "2022-03-04T13:05:56Z",
              "updatedAt": "2022-03-04T13:12:44Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\ncounter, hosts SHOULD only acknowledge packets from the same path where\r\n```",
              "createdAt": "2022-03-04T13:07:06Z",
              "updatedAt": "2022-03-04T13:12:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42u1dS",
          "commit": {
            "abbreviatedOid": "f76d47f"
          },
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-23T06:29:33Z",
          "updatedAt": "2022-03-23T06:29:34Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "There is no explanation about why a host MAY disable ECN when an ACK acknowledges packets from different paths. It would be good to add some reasoning for that.",
              "createdAt": "2022-03-23T06:29:34Z",
              "updatedAt": "2022-03-23T06:29:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42u2gy",
          "commit": {
            "abbreviatedOid": "f76d47f"
          },
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-23T06:34:47Z",
          "updatedAt": "2022-03-23T06:34:47Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This text seems to be addressing the generation of ECN counters at the data receiver. How about, \"Generating ACK with ECN feedback\"?",
              "createdAt": "2022-03-23T06:34:47Z",
              "updatedAt": "2022-03-23T06:34:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42xRxD",
          "commit": {
            "abbreviatedOid": "f76d47f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-23T14:35:14Z",
          "updatedAt": "2022-03-23T14:35:14Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nACK frame. Reducing the sending rate of all paths, even if congestion\r\npresumably occurred only one of the paths, will likely impact\r\nperformance negatively.  Alternatively to avoid this performance\r\npenalty, a host that receives an ACK with an ECN counter increase\r\nacknowledging packets from different paths MAY disable ECN marking and\r\nsend all subsequent packets as Not-ECN capable.\r\n```",
              "createdAt": "2022-03-23T14:35:14Z",
              "updatedAt": "2022-03-23T14:35:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49VELA",
          "commit": {
            "abbreviatedOid": "f76d47f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-05T16:50:04Z",
          "updatedAt": "2022-07-05T16:50:04Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n### Handling ECN Feedback {#ecn-handling}\r\n```",
              "createdAt": "2022-07-05T16:50:04Z",
              "updatedAt": "2022-07-05T16:50:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 98,
      "id": "PR_kwDOGNtpaM4z6PGj",
      "title": "cc must be per path",
      "url": "https://github.com/quicwg/multipath/pull/98",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #89",
      "createdAt": "2022-03-03T18:38:42Z",
      "updatedAt": "2022-03-07T07:54:57Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-8",
      "headRefOid": "54bc40b7bf2b0a069240a3e42ab132b254bdd9d1",
      "closedAt": "2022-03-07T07:54:53Z",
      "mergedAt": "2022-03-07T07:54:53Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "208653ee9c2ff81ad03399c4aafc56d5ee3b55a1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41m_Lj",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Please remove unnecessary text.",
          "createdAt": "2022-03-03T19:20:11Z",
          "updatedAt": "2022-03-03T19:20:38Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I would remove \"however, the minimum PMTU of all paths may be used on each paths\". Implementations can always send packets shorter than the path MTU, so we are not saying much here. Also, there is a minimum path MTU for QUIC, and implementations that don't do PMTUD can always use that, so again, no need to be too specific.",
              "createdAt": "2022-03-03T19:20:12Z",
              "updatedAt": "2022-03-03T19:20:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41nBf_",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:29:29Z",
          "updatedAt": "2022-03-03T19:29:30Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n  *  PMTU discovery should be performed per-path\r\n```",
              "createdAt": "2022-03-03T19:29:29Z",
              "updatedAt": "2022-03-03T19:29:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41n61h",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T23:48:40Z",
          "updatedAt": "2022-03-03T23:48:40Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "If I remember correctly, the purpose of the sentence, \"minimum PMTU of all paths may used ...\" is to say when forming a packet before inserting it in the send_queue, it's better to constrain the size of the packet so that it can be scheduled to any of the paths for the sake of flexibility in scheduling. For example, when we want to use re-injection in our packet scheduling, we need to make sure that a packet sent on path 1 can also be reinjected on path 2. Therefore, what we did was to use per-path PMTU discovery and the use the minimum PMTU of all paths for each individual path. But indeed, this choice may vary in a different implementation.",
              "createdAt": "2022-03-03T23:48:40Z",
              "updatedAt": "2022-03-03T23:48:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41oTry",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T03:01:30Z",
          "updatedAt": "2022-03-04T03:01:31Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "That's completely implementation specific. Picoquic, for example, schedules the path first and then formats the packet. There is no need to go to that level of detail in the specification.",
              "createdAt": "2022-03-04T03:01:30Z",
              "updatedAt": "2022-03-04T03:01:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41pdkk",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T10:32:03Z",
          "updatedAt": "2022-03-04T10:32:03Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "@yfmascgy yes the intention of adding this what to give a hit towards the implementation option you mentioned. However, as you both say this is implementation specific and doesn't need to be in the intro part. So I'm fine removing this and already create a change request for this where I only need to push \"commit\".\r\n\r\nIf we want to discussion these implementation options more, we could add text in the \"implementation consideration\" section. @yfmascgy feel free to prose a PR for that or we could open a new issue to address this later.",
              "createdAt": "2022-03-04T10:32:03Z",
              "updatedAt": "2022-03-04T10:32:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41qCJP",
          "commit": {
            "abbreviatedOid": "fa8cabf"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T13:16:05Z",
          "updatedAt": "2022-03-04T13:16:17Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n  * PMTU discovery should be performed per-path\r\n```",
              "createdAt": "2022-03-04T13:16:06Z",
              "updatedAt": "2022-03-04T13:16:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rH_Q",
          "commit": {
            "abbreviatedOid": "54bc40b"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T17:18:10Z",
          "updatedAt": "2022-03-04T17:18:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41rd_C",
          "commit": {
            "abbreviatedOid": "54bc40b"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T18:48:29Z",
          "updatedAt": "2022-03-04T18:48:29Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yes. I agree removing this from the intro and we can discuss this in the implementation consideration.",
              "createdAt": "2022-03-04T18:48:29Z",
              "updatedAt": "2022-03-04T18:48:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rePp",
          "commit": {
            "abbreviatedOid": "54bc40b"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T18:49:42Z",
          "updatedAt": "2022-03-04T18:49:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41tK5f",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-06T05:32:15Z",
          "updatedAt": "2022-03-06T05:32:15Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "@mirjak I have submitted PR #105 for the PMTU implementation considerations.",
              "createdAt": "2022-03-06T05:32:15Z",
              "updatedAt": "2022-03-06T05:32:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41t5SZ",
          "commit": {
            "abbreviatedOid": "54bc40b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T04:27:44Z",
          "updatedAt": "2022-03-07T04:27:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 99,
      "id": "PR_kwDOGNtpaM4z6TOz",
      "title": "transport parameters in RFC9000 are unchanged",
      "url": "https://github.com/quicwg/multipath/pull/99",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #91",
      "createdAt": "2022-03-03T18:58:00Z",
      "updatedAt": "2022-03-07T07:53:13Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-9",
      "headRefOid": "2ccbd3670862a451dbd8bf3c3ba27faba13c787b",
      "closedAt": "2022-03-07T04:25:25Z",
      "mergedAt": "2022-03-07T04:25:25Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "2c219170d494c05d2a1bdc7ff570614a999f1ae3"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@obonaventure you wrote:\r\n\r\n> When preferred address is not used, then the client can only establish multipath flows to the server address\r\n> When preferred address is used, then if a client migrates to one of the preferred addresses according to 9.6 of RFC9000, then it must consider this address as the endpoint of all multipath flows\r\n\r\nThat sounds like you want to restrict the multipath extension to only one server address (but potentially different paths from different clients address)...?\r\n\r\nI think this restriction is unnecessary. Yes we don't specify a way to learn server addresses but that doesn't means that the client doesn't know (e.g. based on higher layer information) multiple addresses of the server. What should we restrict that?",
          "createdAt": "2022-03-04T11:07:42Z",
          "updatedAt": "2022-03-04T11:07:42Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "However, can we maybe merge this PR as it is for now and you open a separate issue for your additional point @obonaventure ?    ",
          "createdAt": "2022-03-04T11:08:56Z",
          "updatedAt": "2022-03-04T11:08:56Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mirja,\r\n\r\n> > When preferred address is not used, then the client can only establish multipath flows to the server address\r\n> > When preferred address is used, then if a client migrates to one of the preferred addresses according to 9.6 of RFC9000, then it must consider this address as the endpoint of all multipath flows\r\n> \r\n> That sounds like you want to restrict the multipath extension to only one server address (but potentially different paths from different clients address)...?\r\n\r\nThat was my understanding of the sentences in the PR. Maybe I got it wrong.\r\n\r\n> \r\n> I think this restriction is unnecessary. Yes we don't specify a way to learn server addresses but that doesn't means that the client doesn't know (e.g. based on higher layer information) multiple addresses of the server. What should we restrict that?\r\n\r\nI think that we should discuss the role of preferred address in section 3 where we explain how paths can be opened. \r\n",
          "createdAt": "2022-03-04T17:03:56Z",
          "updatedAt": "2022-03-04T17:03:56Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> However, can we maybe merge this PR as it is for now and you open a separate issue for your additional point @obonaventure ?\r\n\r\nFine, let's do it this way.",
          "createdAt": "2022-03-04T17:04:52Z",
          "updatedAt": "2022-03-04T17:04:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41nBaJ",
          "commit": {
            "abbreviatedOid": "67c94b5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-03T19:29:06Z",
          "updatedAt": "2022-03-03T19:29:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41pjum",
          "commit": {
            "abbreviatedOid": "67c94b5"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "There are two parts in this PR.\r\n\r\nFirst, the following sentences:\r\n\r\nThis extension does not change the definition of any transport parameter\r\ndefined in {{Section 18.2. of QUIC-TRANSPORT}}. \r\nInline with the definition in {{QUIC-TRANSPORT}} disable_active_migration\r\nalso disables multipath support, except \"after a client has acted on a\r\npreferred_address transport parameter\" {{Section 18.2. of QUIC-TRANSPORT}}.\r\n\r\nThese sentences are at the right place. I would replace \"any\" by \"all the\" but that's a detail.\r\n\r\nFor the second part, I think that we should solve this problem differently. The current text is the following:\r\n\r\nFurther, it is out of scope for\r\nthis document if the old address can also be used for multipath\r\nafter a client has migrated to the address provided in the preferred_address\r\ntransport parameter. However, it SHOULD NOT be assumed that it is\r\npossible to use both addresses simultaneously without further confirmation\r\nfrom the other host.\r\n\r\nI would suggest to discuss somewhere in the document how the client learns the server address and how preferred address is used. Since we do not have a way for the server to convey the list of \"multipath-capable\" addresses in this document, I would suggest a simple approach:\r\n- When preferred address is not used, then the client can only establish multipath flows to the server address\r\n- When preferred address is used, then if a client migrates to one of the preferred addresses according to 9.6 of RFC9000, then it must consider this address as the endpoint of all multipath flows\r\n\r\nI guess that we'll need to define later a transport parameter that provides the list of \"multipath-capable\" addresses of a given server. In the mean time, we should opt for a simple solution.",
          "createdAt": "2022-03-04T10:57:56Z",
          "updatedAt": "2022-03-04T10:57:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41p619",
          "commit": {
            "abbreviatedOid": "67c94b5"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The proposed PR sounds good to me, with the slight addition I mentioned.",
          "createdAt": "2022-03-04T12:44:09Z",
          "updatedAt": "2022-03-04T12:45:01Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nthis document to specify if the old address can also be used for multipath\r\n```",
              "createdAt": "2022-03-04T12:44:09Z",
              "updatedAt": "2022-03-04T12:45:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41p9j8",
          "commit": {
            "abbreviatedOid": "67c94b5"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T12:56:29Z",
          "updatedAt": "2022-03-04T12:56:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41rDxB",
          "commit": {
            "abbreviatedOid": "2ccbd36"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T17:05:20Z",
          "updatedAt": "2022-03-04T17:05:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41tJ85",
          "commit": {
            "abbreviatedOid": "2ccbd36"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-06T04:06:00Z",
          "updatedAt": "2022-03-06T04:06:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 100,
      "id": "PR_kwDOGNtpaM4z9gaV",
      "title": "new text on recovery",
      "url": "https://github.com/quicwg/multipath/pull/100",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This text is mostly taken from PR #88 but with some edits",
      "createdAt": "2022-03-04T15:19:03Z",
      "updatedAt": "2022-03-07T08:18:59Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-10",
      "headRefOid": "8a1d33255bc632963f43c082520344733d368c7a",
      "closedAt": "2022-03-07T07:04:04Z",
      "mergedAt": "2022-03-07T07:04:04Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "b05b5cf826bbff849dbfb8b2926c338775ab8138"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41qr3v",
          "commit": {
            "abbreviatedOid": "8bc640b"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I found the text quite hard to read when describing strategies. I made some suggestions but feel free to merge the ones that you prefer.",
          "createdAt": "2022-03-04T15:40:27Z",
          "updatedAt": "2022-03-04T15:54:37Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nSimultaneous use of multiple paths enables new techniques to cope with packet losses.\r\n```",
              "createdAt": "2022-03-04T15:40:28Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nIn {{QUIC-TRANSPORT}}, a lost packet can either be abandoned or retransmitted over the\r\nsame path. However, when multiple paths are available QUIC implementation can use\r\ndifferent retransmission strategies to cope with losses.\r\n```",
              "createdAt": "2022-03-04T15:43:22Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\napplication needs another strategy could also be to simultaneously\r\n```",
              "createdAt": "2022-03-04T15:44:06Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nthe overhead but could be particularly beneficial for certain kind\r\n```",
              "createdAt": "2022-03-04T15:45:07Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nAnother strategy would be to use the best path, e.g. in terms of latency,\r\n```",
              "createdAt": "2022-03-04T15:45:27Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nhowever, more detailed specification of any such strategy is out of scope.\r\n```",
              "createdAt": "2022-03-04T15:46:12Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 18,
              "body": "I think this might make the text more easy to read.\r\n```suggestion\r\nPossible strategies include: a) retransmitting lost frames over the\r\nsame path, b) retransmitting lost frames on a different or\r\ndedicated path, and c) duplicate lost frames on several paths (not\r\nrecommended for general purpose use due to the network\r\noverhead). While this document does not preclude a specific\r\nstrategy, more detailed specification is out of scope.\r\n```",
              "createdAt": "2022-03-04T15:53:00Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rAv7",
          "commit": {
            "abbreviatedOid": "8461ce8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T16:54:11Z",
          "updatedAt": "2022-03-04T16:54:13Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n\r\nPossible strategies include: a) retransmitting lost frames over the\r\nsame path, b) retransmitting lost frames on a different or\r\ndedicated path, and c) duplicate lost frames on several paths (not\r\nrecommended for general purpose use due to the network\r\noverhead). While this document does not preclude a specific\r\nstrategy, more detailed specification is out of scope.\r\n```",
              "createdAt": "2022-03-04T16:54:12Z",
              "updatedAt": "2022-03-04T16:54:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rBoG",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T16:57:13Z",
          "updatedAt": "2022-03-04T16:57:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41rGAG",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "At this stage, we know that the best strategy will be a function of the application and of its traffic pattern and requirements, but we cannot specify it. ",
          "createdAt": "2022-03-04T17:13:01Z",
          "updatedAt": "2022-03-04T17:13:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41rhuj",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2022-03-04T19:05:50Z",
          "updatedAt": "2022-03-04T19:05:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41rsWF",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I agree with the intent, but please simplify the heading text and avoid making debatable statements about QUIC-TRANSPORT.",
          "createdAt": "2022-03-04T19:50:19Z",
          "updatedAt": "2022-03-04T19:51:36Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "That's not actually true. In {{QUIC-TRANSPORT}}, packets sent on a path before a migration can be resent on the new path after migration. Or, actually, \"frames of packets sent on an old path and presumed lost may be resent in new packets on a new path after migration.\" I think that rather than making comments on QUIc-TRANSPORT, we should just keep the last sentence, \"When multiple paths are available QUIC implementation can use\r\ndifferent retransmission strategies to cope with losses.\"",
              "createdAt": "2022-03-04T19:50:19Z",
              "updatedAt": "2022-03-04T19:51:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rzOl",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T20:08:27Z",
          "updatedAt": "2022-03-04T20:08:27Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Agreed.",
              "createdAt": "2022-03-04T20:08:27Z",
              "updatedAt": "2022-03-04T20:08:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rzVU",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T20:08:59Z",
          "updatedAt": "2022-03-04T20:08:59Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nWhen multiple paths are available, QUIC implementation can use\r\ndifferent retransmission strategies to cope with losses.\r\n```",
              "createdAt": "2022-03-04T20:08:59Z",
              "updatedAt": "2022-03-04T20:08:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41r0Jd",
          "commit": {
            "abbreviatedOid": "6f58cd3"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T20:13:08Z",
          "updatedAt": "2022-03-04T20:13:09Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nSimultaneous use of multiple paths enables different \r\nretransmission strategies to cope with losses such as:\r\na) retransmitting lost frames over the\r\n```",
              "createdAt": "2022-03-04T20:13:08Z",
              "updatedAt": "2022-03-04T20:13:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41t50u",
          "commit": {
            "abbreviatedOid": "8a1d332"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T04:33:45Z",
          "updatedAt": "2022-03-07T04:33:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 102,
      "id": "PR_kwDOGNtpaM4z-HbP",
      "title": "Moving second part of PR#99 to section 3",
      "url": "https://github.com/quicwg/multipath/pull/102",
      "state": "MERGED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Attempt at moving \r\n\r\nFurther, it is out of scope for\r\nthis document if the old address can also be used for multipath\r\nafter a client has migrated to the address provided in the preferred_address\r\ntransport parameter. However, it SHOULD NOT be assumed that it is\r\npossible to use both addresses simultaneously without further confirmation\r\nfrom the other host.\r\n\r\nIn the beginning of section where I think it would be more appropriate.\r\n",
      "createdAt": "2022-03-04T18:50:40Z",
      "updatedAt": "2022-03-07T09:12:53Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-1",
      "headRefOid": "1ad987a65dd8fdbfa5886f91b6b290eb536793f0",
      "closedAt": "2022-03-07T09:12:53Z",
      "mergedAt": "2022-03-07T09:12:53Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "29a9fb4f9e871a8ad8fcf534ab1a4baafb59275a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41t9a0",
          "commit": {
            "abbreviatedOid": "661f70f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good, except for the typo.",
          "createdAt": "2022-03-07T05:10:31Z",
          "updatedAt": "2022-03-07T05:11:09Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "addresses -> addresses",
              "createdAt": "2022-03-07T05:10:31Z",
              "updatedAt": "2022-03-07T05:11:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uBhg",
          "commit": {
            "abbreviatedOid": "661f70f"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T05:47:23Z",
          "updatedAt": "2022-03-07T05:47:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41uVJw",
          "commit": {
            "abbreviatedOid": "661f70f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T07:56:39Z",
          "updatedAt": "2022-03-07T07:57:23Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nSHOULD NOT assume that the initial server address and the addresses \r\n```",
              "createdAt": "2022-03-07T07:56:39Z",
              "updatedAt": "2022-03-07T07:57:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 103,
      "id": "PR_kwDOGNtpaM4z-o0v",
      "title": "First shot at a unified proposal",
      "url": "https://github.com/quicwg/multipath/pull/103",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This derives from the discussions on issue #96 ",
      "createdAt": "2022-03-04T22:24:40Z",
      "updatedAt": "2022-07-07T09:19:18Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "huitema/multipath",
      "headRefName": "unified",
      "headRefOid": "0aec409c6f118515b6c8f1b547eba51570417407",
      "closedAt": "2022-07-07T09:19:18Z",
      "mergedAt": "2022-07-07T09:19:17Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "71de7b625e2d1faac4329d2b6dee7ec404288123"
      },
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The commit [a230bc1](https://github.com/quicwg/multipath/pull/103/commits/a230bc17db0eabf78dffb6e0d02224ad851197da) applies the changes suggested in the previous reviews. With those changes, I think we have a good basis for discussing a unified solution in the working group.",
          "createdAt": "2022-03-17T18:38:52Z",
          "updatedAt": "2022-03-17T18:38:52Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks @boucadair for the review. I have applied the editorial changes. You are asking for something more regarding the \"specific logic\" required when supporting zero-length CID. There are in fact two pieces to that: logic at the receiver, i.e., the node that chose to receive packets with zero-length CID; and logic at the sender, i.e., the node that accepts to send data on multiple paths towards a node that uses zero-length CID. This is explained in details in the section \"Using Zero-Length connection ID\", so I guess what we need is a reference to that section.",
          "createdAt": "2022-06-09T16:00:45Z",
          "updatedAt": "2022-06-09T16:00:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41uKTW",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2022-03-07T06:53:50Z",
          "updatedAt": "2022-03-07T07:01:22Z",
          "comments": [
            {
              "originalPosition": 150,
              "body": "... The _senders_ MUST use that information to ...",
              "createdAt": "2022-03-07T06:53:50Z",
              "updatedAt": "2022-03-07T07:01:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uWlc",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I believe this PR is a good first proposal for such a unified solution. If such a solution can fit all the use cases, I'm happy to further work on this.",
          "createdAt": "2022-03-07T08:03:37Z",
          "updatedAt": "2022-03-07T08:17:11Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "This seems more related to the discussion in #101, not sure if it should be part of this PR.",
              "createdAt": "2022-03-07T08:03:37Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            },
            {
              "originalPosition": 141,
              "body": "I don't think per-path congestion control is specific to NULL CID case.",
              "createdAt": "2022-03-07T08:05:32Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            },
            {
              "originalPosition": 146,
              "body": "Actually, the beginning of this paragraph is not specific to the NULL CID case.",
              "createdAt": "2022-03-07T08:07:04Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            },
            {
              "originalPosition": 150,
              "body": "```suggestion\r\nwhich packet was sent to what path. The sender MUST use that information to\r\n```",
              "createdAt": "2022-03-07T08:07:29Z",
              "updatedAt": "2022-03-17T16:31:46Z"
            },
            {
              "originalPosition": 180,
              "body": "```suggestion\r\nto a number space. When sending to NULL CID receivers, the same number space is\r\n```",
              "createdAt": "2022-03-07T08:11:00Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            },
            {
              "originalPosition": 204,
              "body": "why \"mostly\"?",
              "createdAt": "2022-03-07T08:13:01Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            },
            {
              "originalPosition": 139,
              "body": "```suggestion\r\n### Congestion Control, Loss Recovery and NULL CID Considerations\r\n```",
              "createdAt": "2022-03-07T08:16:14Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cGEj",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T16:29:08Z",
          "updatedAt": "2022-03-17T16:29:09Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nSome deployments of QUIC use zero-length connection ID.\r\nWhen a node elects to use zero-length connection IDs, it is not\r\n```\r\nI believe we call it \"zero-length\" everywhere else...",
              "createdAt": "2022-03-17T16:29:08Z",
              "updatedAt": "2022-03-17T16:29:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cpz4",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T17:58:10Z",
          "updatedAt": "2022-03-17T17:58:10Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Correct. I wanted to have a complete view of the finished text once #101 was checked in, but that's probably not useful.",
              "createdAt": "2022-03-17T17:58:10Z",
              "updatedAt": "2022-03-17T17:58:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cqV7",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T17:59:54Z",
          "updatedAt": "2022-03-17T17:59:54Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "Correct. Need to state that correctly. The point is, in the absence of CID, implementations must track the path over which the packet loss or the RTT measurement occurred, because the number space is shared.",
              "createdAt": "2022-03-17T17:59:54Z",
              "updatedAt": "2022-03-17T17:59:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cqd4",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:00:18Z",
          "updatedAt": "2022-03-17T18:00:18Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "Yes.",
              "createdAt": "2022-03-17T18:00:18Z",
              "updatedAt": "2022-03-17T18:00:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cq2C",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:01:34Z",
          "updatedAt": "2022-03-17T18:01:34Z",
          "comments": [
            {
              "originalPosition": 204,
              "body": ":-)\r\nneed to find another way of saying that without a number space per path this is harder to get right.",
              "createdAt": "2022-03-17T18:01:34Z",
              "updatedAt": "2022-03-17T18:01:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42crIf",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:02:35Z",
          "updatedAt": "2022-03-17T18:02:36Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "Let's first apply @mirjak's suggestion to replace NULL by zero-length...",
              "createdAt": "2022-03-17T18:02:36Z",
              "updatedAt": "2022-03-17T18:02:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cz3-",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:28:38Z",
          "updatedAt": "2022-03-17T18:28:38Z",
          "comments": [
            {
              "originalPosition": 204,
              "body": "Removed \"mostly\"",
              "createdAt": "2022-03-17T18:28:38Z",
              "updatedAt": "2022-03-17T18:28:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cz7U",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:28:51Z",
          "updatedAt": "2022-03-17T18:28:51Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "Fixed.",
              "createdAt": "2022-03-17T18:28:51Z",
              "updatedAt": "2022-03-17T18:28:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42c0F2",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:29:27Z",
          "updatedAt": "2022-03-17T18:29:27Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "Fixed, per next comment.",
              "createdAt": "2022-03-17T18:29:27Z",
              "updatedAt": "2022-03-17T18:29:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42c0JF",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:29:37Z",
          "updatedAt": "2022-03-17T18:29:38Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Reverted.",
              "createdAt": "2022-03-17T18:29:37Z",
              "updatedAt": "2022-03-17T18:29:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42c0Ou",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:29:56Z",
          "updatedAt": "2022-03-17T18:29:56Z",
          "comments": [
            {
              "originalPosition": 150,
              "body": "Fixed",
              "createdAt": "2022-03-17T18:29:56Z",
              "updatedAt": "2022-03-17T18:29:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42efFr",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-18T05:35:16Z",
          "updatedAt": "2022-03-18T05:35:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM42fx3j",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Some suggestions to remove NULL CID mentions, but overall this seems a good basis for further discussion.",
          "createdAt": "2022-03-18T12:32:24Z",
          "updatedAt": "2022-03-18T12:40:13Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nsent to that node over different paths. All packets sent to a zero-length\r\n```",
              "createdAt": "2022-03-18T12:32:24Z",
              "updatedAt": "2022-03-18T12:40:13Z"
            },
            {
              "originalPosition": 37,
              "body": "```suggestion\r\nuse multiple paths when sending to a node using zero-length CID will\r\n```",
              "createdAt": "2022-03-18T12:32:51Z",
              "updatedAt": "2022-03-18T12:40:13Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\ndelivery on loss detection and congestion controller. If the receiver\r\n```",
              "createdAt": "2022-03-18T12:33:49Z",
              "updatedAt": "2022-03-18T12:40:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47rJ7Q",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Some very minor comments. ",
          "createdAt": "2022-06-09T11:33:17Z",
          "updatedAt": "2022-06-09T12:04:15Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\nSome deployments of QUIC use zero-length connection IDs.\r\n```",
              "createdAt": "2022-06-09T11:33:18Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\npossible to use different connection IDs for distinguishing packets\r\n```",
              "createdAt": "2022-06-09T11:33:36Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 38,
              "body": "is that \"special logic\" hinted somewhere or this is left as implementation-specific? I would be explicit about the intent here. Thanks. ",
              "createdAt": "2022-06-09T11:37:23Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\ndelivery on loss detection and congestion control. If the receiver\r\n```",
              "createdAt": "2022-06-09T11:38:19Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 52,
              "body": "```suggestion\r\n0x1      | supports multipath as defined in this document\r\n```",
              "createdAt": "2022-06-09T11:39:09Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 109,
              "body": "```suggestion\r\nIf a node elects to use zero-length connection IDs, it MUST implement the\r\n```",
              "createdAt": "2022-06-09T11:39:45Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 111,
              "body": "```suggestion\r\nThe peer node using zero-length connection IDs SHOULD implement a\r\n```",
              "createdAt": "2022-06-09T11:40:19Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 149,
              "body": "Can a pointer be provided for \"getting good results\"? Thanks",
              "createdAt": "2022-06-09T11:44:20Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 29,
              "body": "RFC9000 says the following:\r\n\r\n```\r\n  An endpoint SHOULD NOT initiate migration with a peer that has\r\n   requested a zero-length connection ID, because traffic over the new\r\n   path might be trivially linkable to traffic over the old one.\r\n```\r\n\r\nI wonder if the above behavior has implications on maintaining multiple paths when  zero-length connection IDs are in used.",
              "createdAt": "2022-06-09T12:01:09Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 41,
              "body": "Again, the \"specific\" thing is worth be exemplified.",
              "createdAt": "2022-06-09T12:02:17Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nreports ECN counters, they will contain the sum of markings received on all\r\n```",
              "createdAt": "2022-06-09T12:02:33Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47tC74",
          "commit": {
            "abbreviatedOid": "05199f8"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-09T16:34:24Z",
          "updatedAt": "2022-06-09T16:34:25Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "This lines were added to address review by @boucadair ",
              "createdAt": "2022-06-09T16:34:25Z",
              "updatedAt": "2022-06-09T16:34:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47tDpj",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-09T16:36:47Z",
          "updatedAt": "2022-06-09T16:36:48Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I added a forward reference to the section describing that logic. I hope it addresses the concerns of  @boucadair .",
              "createdAt": "2022-06-09T16:36:48Z",
              "updatedAt": "2022-06-09T16:36:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47tGqI",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-09T16:46:46Z",
          "updatedAt": "2022-06-09T16:46:46Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "The new title is \"Loss and Congestion Handling With Zero-Length CID\". I hope it works.",
              "createdAt": "2022-06-09T16:46:46Z",
              "updatedAt": "2022-06-09T16:46:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47tMKT",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-09T17:05:22Z",
          "updatedAt": "2022-06-09T17:05:22Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "The RFC 9000 text suggests that only the node that is choosing to use zero length CID will initiate a new path -- typically a client. That seems fine. Third parties will be able to observe packets flowing between client and server as follow:\r\n\r\n* path 1: between address 1 and port 1 on client, and server address and server port on server.\r\n* path 2: between address 2 and port 2 on client, and server address and server port on server.\r\n\r\nThe addresses and ports will be visible whether the client uses null-length CID or not. We may want to say to point out that using different port numbers for each path may remove 16 bits of possible correlation data, but that applies to RFC 9000 just as well.\r\n",
              "createdAt": "2022-06-09T17:05:22Z",
              "updatedAt": "2022-06-09T17:05:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47vq1D",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-10T07:22:46Z",
          "updatedAt": "2022-06-10T07:22:46Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "I agree this is OK in typical scenarios. \r\n\r\nI leave it up to you to decide if it is worth to include a mention about this in the draft. Thanks, @huitema.\r\n\r\n\r\n",
              "createdAt": "2022-06-10T07:22:46Z",
              "updatedAt": "2022-06-10T07:22:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47x3wD",
          "commit": {
            "abbreviatedOid": "177b643"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Small typo; for the remaining, LGTM.",
          "createdAt": "2022-06-10T15:00:41Z",
          "updatedAt": "2022-06-10T15:05:33Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nthe size of ACK frames. This proposal specifies algorithms for\r\n```",
              "createdAt": "2022-06-10T15:00:42Z",
              "updatedAt": "2022-06-10T15:05:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49VBYi",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I made an editorial pass but am not done yet. @huitema maybe you can merge (or reject) already these changes and I finish my review tomorrow.",
          "createdAt": "2022-07-05T16:39:49Z",
          "updatedAt": "2022-07-05T17:04:55Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nThis extension uses multiple packet number spaces.\r\n```",
              "createdAt": "2022-07-05T16:39:49Z",
              "updatedAt": "2022-07-06T12:46:46Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nWhen a node selects to use zero-length connection IDs, it is not\r\n```",
              "createdAt": "2022-07-05T16:40:20Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nsent to that node over different paths. All packets sent with a zero-length\r\n```",
              "createdAt": "2022-07-05T16:41:09Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nCID are numbered in the same number space. When using the same packet number space\r\non multiple paths, out of order delivery is likely. This causes inflation of the number of \r\nacknowledgement ranges and therefore of the\r\n```",
              "createdAt": "2022-07-05T16:43:00Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\nthe size of ACK frames. Senders that accept to use a single number\r\nspace on multiple paths when sending to a node using zero-length CID need\r\nto take special care to minimize the impact of multipath\r\ndelivery on loss detection, congestion control, and ECN handling. \r\nThis proposal specifies algorithms for\r\ncontrolling the size of acknowledgement packets and ECN handling in\r\nSection {{using-zero-length}} and {{ecn-handling}}.\r\n```",
              "createdAt": "2022-07-05T16:50:28Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 126,
              "body": "```suggestion\r\n### Sending Acknowledgements and Handling Ranges {#sending-acknowledgements-and-handling-ranges}\r\n```",
              "createdAt": "2022-07-05T16:52:43Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 136,
              "body": "```suggestion\r\nreceiver, senders may receive acknowledgements that combine packet\r\n```",
              "createdAt": "2022-07-05T16:54:49Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 123,
              "body": "I don't think the MUST and SHOULD here make a lot of sense, given there are more/other normative language later in this section. Also ice think your removed too much.... here is an alternative proposal for this section intro part:\r\n```suggestion\r\nIf a zero-length connection ID is used, one packet number space\r\n for all paths. That means the packet sequence numbers are allocated\r\n from the common\r\n number space, so that, for example, packet number N could be sent\r\n on one path and packet number N+1 on another.\r\n \r\n In this case, ACK frames report the numbers of packets that have been\r\n received so far,\r\n regardless of the path on which they have been received. That means\r\n the senders needs to maintain an association between sent packet numbers\r\n and the path over which these packets were sent. This is necessary\r\n to implement per path congestion control, as explained\r\nin {{zero-length-cid-loss-and-congestion}}.\r\n\r\nFurther, the receiver of packets with zero-length connection IDs should\r\nimplement handling of acknowledgements as defined in\r\n{{sending-acknowledgements-and-handling-ranges}}.\r\n\r\nECN handing is specified in {{ecn-handling}}, and\r\nmitigation of the RTT measurement is further explained\r\nin {{ack-delay-and-zero-length-cid-considerations}}. \r\n\r\nIf a node\r\ndoes not want to implement this logic, it MAY instead limit its use of multiple paths\r\nas explained in {{restricted-sending-to-zero-length-cid-peer}}.\r\n```",
              "createdAt": "2022-07-05T17:02:13Z",
              "updatedAt": "2022-07-06T13:33:06Z"
            },
            {
              "originalPosition": 165,
              "body": "```suggestion\r\n### ECN and Zero-Length CID Considerations {#ecn-handing}\r\n```",
              "createdAt": "2022-07-05T17:03:33Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZTLN",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T12:52:41Z",
          "updatedAt": "2022-07-06T12:52:42Z",
          "comments": [
            {
              "originalPosition": 171,
              "body": "```suggestion\r\nECN feedback in QUIC is provided based on counters in the ACK frame\r\n(see {{Section  19.3.2. of QUIC-TRANSPORT}}). That means if an ACK\r\n frame acknowledges multiple packets, the ECN feedback cannot be accounted\r\n to a specific packet.\r\n\r\nThere are separate counters for each packet number space. However, sending\r\nto zero-length CID receivers, the same number space is used for multiple paths.\r\nRespectively, if an ACK frames acknowledges multiple packets from different paths,\r\nthe ECN feedback cannot unambiguously be assigned to a path.\r\n```",
              "createdAt": "2022-07-06T12:52:42Z",
              "updatedAt": "2022-07-06T12:53:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZUGR",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T12:55:19Z",
          "updatedAt": "2022-07-06T12:55:20Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "```suggestion\r\ntransmission on the sending path. If zero-length CID is used, \r\nthe sending path is however ambiguous. Therefore, the sender MUST\r\ntreat a CE marking as a congestion signal on all sending paths that\r\nhave been by a packet that was acknowledged in the ACK frame signaling\r\nthe CE counter increase.\r\n```",
              "createdAt": "2022-07-06T12:55:19Z",
              "updatedAt": "2022-07-06T12:57:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZVx0",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T12:59:46Z",
          "updatedAt": "2022-07-06T12:59:46Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "Note that this change is not only editorial as I added the clause that you only MUST decrease those paths where you actually got a packet acknowledged. This is slightly more complicated but you should have saved the information where which packet was sent anyway and this allows for optimisation in the ACK creation. Given this is a MUST, I think we need this clause.",
              "createdAt": "2022-07-06T12:59:46Z",
              "updatedAt": "2022-07-06T12:59:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZW89",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:02:55Z",
          "updatedAt": "2022-07-06T13:02:55Z",
          "comments": [
            {
              "originalPosition": 187,
              "body": "```suggestion\r\na peer using zero-length CID. The simplest posture is to only send\r\n```",
              "createdAt": "2022-07-06T13:02:55Z",
              "updatedAt": "2022-07-06T13:02:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZXMX",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:03:35Z",
          "updatedAt": "2022-07-06T13:03:35Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "Why vast majority? Isn't it all?",
              "createdAt": "2022-07-06T13:03:35Z",
              "updatedAt": "2022-07-06T13:03:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZaVh",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:12:07Z",
          "updatedAt": "2022-07-06T13:12:08Z",
          "comments": [
            {
              "originalPosition": 138,
              "body": "```suggestion\r\nnumbers received over multiple paths. \r\nHowever, even if one packet number space is used on multiple path\r\nthe sender MUST maintain separate congestion control state for each\r\npath. Therefore, senders MUST be able to infer the\r\nsending path from the acknowledged packet numbers, for example by remembering\r\n```",
              "createdAt": "2022-07-06T13:12:08Z",
              "updatedAt": "2022-07-06T13:12:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZcL9",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:17:04Z",
          "updatedAt": "2022-07-06T13:17:04Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "```suggestion\r\n\r\nIf zero-length CID and therefore also a single packet number space\r\nis used by the sender, the receiver MAY send ACK frames instead\r\nof ACK_MPframes to reduce overhead as the additional path ID field\r\nwill anyway always carry the same value.\r\n\r\n```",
              "createdAt": "2022-07-06T13:17:04Z",
              "updatedAt": "2022-07-06T13:18:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZggH",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:28:14Z",
          "updatedAt": "2022-07-06T13:28:15Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "```suggestion\r\nbased on timers and on sequence numbers. When packets are sent over\r\nmultiple paths, loss detection must be adapted to allow for different RTTs\r\non different paths. When sending to zero-length CID receivers, packets sent\r\non different paths may not be received in order. Therefore senders cannot\r\ndirectly use the packet sequence numbers to\r\n```",
              "createdAt": "2022-07-06T13:28:14Z",
              "updatedAt": "2022-07-06T13:28:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49Zg_R",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:29:23Z",
          "updatedAt": "2022-07-06T13:29:23Z",
          "comments": [
            {
              "originalPosition": 155,
              "body": "I don't think I fully understand these last couple of sentences. Can you clarify?",
              "createdAt": "2022-07-06T13:29:23Z",
              "updatedAt": "2022-07-06T13:29:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZlPL",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:40:21Z",
          "updatedAt": "2022-07-06T13:40:22Z",
          "comments": [
            {
              "originalPosition": 202,
              "body": "```suggestion\r\n## Using non-zero length CID and Multiple Packet Number Spaces\r\n\r\nIf packets contain a non-zero CID, each path has\r\n```",
              "createdAt": "2022-07-06T13:40:21Z",
              "updatedAt": "2022-07-06T13:40:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49Z6xX",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T14:31:43Z",
          "updatedAt": "2022-07-06T14:31:43Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "The \"may not be received in order\" in your text is a bit too negative. Can you change that to \"may be received out of order\"?",
              "createdAt": "2022-07-06T14:31:43Z",
              "updatedAt": "2022-07-06T14:31:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49Z7Rl",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T14:32:54Z",
          "updatedAt": "2022-07-06T14:32:55Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "This is outdated.",
              "createdAt": "2022-07-06T14:32:54Z",
              "updatedAt": "2022-07-06T14:32:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aIZh",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:03:29Z",
          "updatedAt": "2022-07-06T15:03:29Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "There is always the occasional probe, etc.",
              "createdAt": "2022-07-06T15:03:29Z",
              "updatedAt": "2022-07-06T15:03:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49af1J",
          "commit": {
            "abbreviatedOid": "928710a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:06:56Z",
          "updatedAt": "2022-07-06T16:06:57Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "```suggestion\r\non different paths may be received out of order. Therefore senders cannot\r\n```",
              "createdAt": "2022-07-06T16:06:57Z",
              "updatedAt": "2022-07-06T16:06:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ahsx",
          "commit": {
            "abbreviatedOid": "928710a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:12:38Z",
          "updatedAt": "2022-07-06T16:12:39Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\nsent to that node over different paths. This extension also specifies a way to use\r\nzero-length CID by using the same packet number space on all paths. \r\nHowever, when using the same packet number space\r\n```",
              "createdAt": "2022-07-06T16:12:38Z",
              "updatedAt": "2022-07-06T16:12:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ajVQ",
          "commit": {
            "abbreviatedOid": "928710a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:17:53Z",
          "updatedAt": "2022-07-06T16:17:54Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\non multiple paths, out of order delivery is likely. This causes inflation of the number of\r\n```",
              "createdAt": "2022-07-06T16:17:53Z",
              "updatedAt": "2022-07-06T16:17:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ajbB",
          "commit": {
            "abbreviatedOid": "928710a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:18:10Z",
          "updatedAt": "2022-07-06T16:18:11Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\ndelivery on loss detection, congestion control, and ECN handling.\r\n```",
              "createdAt": "2022-07-06T16:18:10Z",
              "updatedAt": "2022-07-06T16:18:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49alDM",
          "commit": {
            "abbreviatedOid": "4c08976"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:23:15Z",
          "updatedAt": "2022-07-06T16:23:15Z",
          "comments": [
            {
              "originalPosition": 192,
              "body": "```suggestion\r\n### ECN and Zero-Length CID Considerations {#ecn-handling}\r\n```",
              "createdAt": "2022-07-06T16:23:15Z",
              "updatedAt": "2022-07-06T16:23:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49alKF",
          "commit": {
            "abbreviatedOid": "4c08976"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:23:36Z",
          "updatedAt": "2022-07-06T16:23:36Z",
          "comments": [
            {
              "originalPosition": 168,
              "body": "```suggestion\r\n{{ecn-handling}} for issues on using ECN marks.)\r\n```",
              "createdAt": "2022-07-06T16:23:36Z",
              "updatedAt": "2022-07-06T16:23:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49alMI",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:23:42Z",
          "updatedAt": "2022-07-06T16:23:42Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "Fixed.",
              "createdAt": "2022-07-06T16:23:42Z",
              "updatedAt": "2022-07-06T16:23:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49alQT",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:23:55Z",
          "updatedAt": "2022-07-06T16:23:56Z",
          "comments": [
            {
              "originalPosition": 155,
              "body": "Fixed.",
              "createdAt": "2022-07-06T16:23:56Z",
              "updatedAt": "2022-07-06T16:23:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49altu",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:25:23Z",
          "updatedAt": "2022-07-06T16:25:24Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "Closing, comments are outdated.",
              "createdAt": "2022-07-06T16:25:24Z",
              "updatedAt": "2022-07-06T16:25:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49apYV",
          "commit": {
            "abbreviatedOid": "cc7c4c7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:32:57Z",
          "updatedAt": "2022-07-06T16:32:57Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\nzero-length CID by using the same packet number space on all paths.\r\n```",
              "createdAt": "2022-07-06T16:32:57Z",
              "updatedAt": "2022-07-06T16:32:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42iW0u",
          "commit": {
            "abbreviatedOid": "0aec409"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-19T06:43:53Z",
          "updatedAt": "2022-07-07T07:11:19Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "To be clear, assuming that peer A only supports multiple PN while peer B sends packets with zero-length CID, do you mean B elects to send packets on all available paths but A chooses only one path to send packets or reply ACKs? ",
              "createdAt": "2022-03-19T06:43:53Z",
              "updatedAt": "2022-07-07T07:11:19Z"
            },
            {
              "originalPosition": 163,
              "body": "I think we should expand this section a bit as we found getting the delay right was non-trivial. QUIC time-stamp would work for sure. But if one decides not to use QUIC timestamp, we probably want to explain what is needed to be done here.",
              "createdAt": "2022-06-13T07:24:08Z",
              "updatedAt": "2022-07-07T07:11:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49dq0H",
          "commit": {
            "abbreviatedOid": "0aec409"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T08:27:54Z",
          "updatedAt": "2022-07-07T08:27:55Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "That is what I understand from the current text, yes.",
              "createdAt": "2022-07-07T08:27:54Z",
              "updatedAt": "2022-07-07T08:27:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49drJE",
          "commit": {
            "abbreviatedOid": "0aec409"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T08:28:49Z",
          "updatedAt": "2022-07-07T08:28:49Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "Maybe should we create an issue referencing this and create a specific PR afterwards?",
              "createdAt": "2022-07-07T08:28:49Z",
              "updatedAt": "2022-07-07T08:28:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49d6Uv",
          "commit": {
            "abbreviatedOid": "0aec409"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T09:14:09Z",
          "updatedAt": "2022-07-07T09:14:09Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "Created issue #125 ",
              "createdAt": "2022-07-07T09:14:09Z",
              "updatedAt": "2022-07-07T09:14:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49d726",
          "commit": {
            "abbreviatedOid": "0aec409"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T09:18:50Z",
          "updatedAt": "2022-07-07T09:18:50Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "Yes, that's the meaning. For me the text is clear. I will merge the PR now, however, if you think further clarification is needed please propose a separate PR.",
              "createdAt": "2022-07-07T09:18:50Z",
              "updatedAt": "2022-07-07T09:18:50Z"
            }
          ]
        }
      ]
    },
    {
      "number": 104,
      "id": "PR_kwDOGNtpaM4z_Obu",
      "title": "update path closure figure and add one case for single PN",
      "url": "https://github.com/quicwg/multipath/pull/104",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR is to resolve issue #1. The description of the path-closing figure is rephrased for better clarity. The path_id_type field in the PATH_ABANDON frame is also added in the figure to give an idea how the type is used. Moreover, one case for single PN is added (where the client receives zero-length CID while the server receives long CID). According to previous discussion, in the single PN case, only the client needs to send out a PATH_ABANDON. The server SHOULD stop sending new data on the path indicated by the PATH_ABANDON frame after receiving it. However, The client may want to repeat the\r\nPATH_ABANDON frame if it sees the server continuing to send data. It is optional for the server to respond with a PATH_ABANDON after it receives a PATH_ABANDON frame from the client. ",
      "createdAt": "2022-03-05T08:39:22Z",
      "updatedAt": "2022-03-07T09:54:31Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/path-close-figure-update",
      "headRefOid": "84c82e5f5dfc8ed771579799797cc8596f76505a",
      "closedAt": "2022-03-07T09:54:31Z",
      "mergedAt": "2022-03-07T09:54:31Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "35d07499a4d1e6ae715ba973b1124cc4354f7ed7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41ucUQ",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think there is still a mismatch between the proposed examples and the definition of the path_id_type in Section 11.1 (definition of PATH_ABANDON frame).",
          "createdAt": "2022-03-07T08:29:10Z",
          "updatedAt": "2022-03-07T08:45:53Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nof 3. Note that the paths use different packet number spaces. In this case, the\r\n```",
              "createdAt": "2022-03-07T08:29:10Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n0x00), hence using the path_id 1. In reply, the server confirms the path using\r\n```",
              "createdAt": "2022-03-07T08:31:21Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nidentifier type 0x00), which corresponds to the path_id 2. Both the client and\r\n```",
              "createdAt": "2022-03-07T08:31:39Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 55,
              "body": "Just highlighting this in case the \"unified proposal\" makes further progress.",
              "createdAt": "2022-03-07T08:33:38Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nnumber of 2; the client's 1-RTT packets use DCID S3, which has a sequence number\r\n```",
              "createdAt": "2022-03-07T08:36:24Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 36,
              "body": "I'm still puzzled by this example. If I read the definition of the path_id_type in the frame definition, it says\r\n\r\n```\r\nType 0: Refer to the connection identifier used by the sender of the control frame when sending\r\ndata over the specified path. This method SHOULD be used if this connection identifier is\r\nnon-zero length. This method MUST NOT be used if this connection identifier is zero-length.\r\n```\r\nAs the sender of the frame is the client, it should thus refer to the connection identifier used by the client to send packets on the first path (DCID S2), thus the path_id should be 2.",
              "createdAt": "2022-03-07T08:41:02Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 61,
              "body": "Similarly, Section 11.1 currently states\r\n\r\n```\r\nType 1: Refer to the connection identifier used by the receiver of the control frame\r\nwhen sending data over the specified path. This method MUST NOT be used if this\r\nconnection identifier is zero-length.\r\n```\r\n\r\nAs I understand this, the example should use type 0, no?",
              "createdAt": "2022-03-07T08:44:19Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41ugkQ",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T08:46:05Z",
          "updatedAt": "2022-03-07T08:46:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41uhuy",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T08:50:48Z",
          "updatedAt": "2022-03-07T08:50:48Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Yes, I think the text says it correctly, only the figure is wrong. Good catch!",
              "createdAt": "2022-03-07T08:50:48Z",
              "updatedAt": "2022-03-07T08:50:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uh-j",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T08:51:43Z",
          "updatedAt": "2022-03-07T08:51:44Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=0, path_id=2]->\r\n```",
              "createdAt": "2022-03-07T08:51:43Z",
              "updatedAt": "2022-03-07T08:51:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uitJ",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T08:54:36Z",
          "updatedAt": "2022-03-07T08:54:36Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "I think this question was already there in the original PR: The PATH_ABONDON frame from the server is optional. I think we should either remove this step or mention in the text that this is optional.",
              "createdAt": "2022-03-07T08:54:36Z",
              "updatedAt": "2022-03-07T08:54:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uiyI",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T08:54:54Z",
          "updatedAt": "2022-03-07T08:54:55Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "In this case, the path_id is the sequence number of the CID issued by the client for this path and thus, it is 1.",
              "createdAt": "2022-03-07T08:54:55Z",
              "updatedAt": "2022-03-07T08:54:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41ukFs",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T08:59:52Z",
          "updatedAt": "2022-03-07T08:59:52Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Yes. We should add a sentence for that.",
              "createdAt": "2022-03-07T08:59:52Z",
              "updatedAt": "2022-03-07T08:59:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uyVh",
          "commit": {
            "abbreviatedOid": "9ef2c91"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:50:37Z",
          "updatedAt": "2022-03-07T09:50:38Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n0x00), hence using the path_id 1. Optionally, the server confirms the path closure \r\nby sending an PATH_ABANDON frame using\r\n```",
              "createdAt": "2022-03-07T09:50:37Z",
              "updatedAt": "2022-03-07T09:52:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uyvI",
          "commit": {
            "abbreviatedOid": "9ef2c91"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:52:00Z",
          "updatedAt": "2022-03-07T09:52:00Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nidentifier type 0x00) as path identifier, which corresponds to the path_id 2. Both the client and\r\n```",
              "createdAt": "2022-03-07T09:52:00Z",
              "updatedAt": "2022-03-07T09:52:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 105,
      "id": "PR_kwDOGNtpaM4z_6Mt",
      "title": "Add implementation considerations to handle different PMTU sizes",
      "url": "https://github.com/quicwg/multipath/pull/105",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add some implementation considerations to handle different PMTU sizes following the discussion on #98 . Feel free to add different implementation options here. ",
      "createdAt": "2022-03-06T05:29:52Z",
      "updatedAt": "2022-03-07T09:33:32Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/pmtu-implementation-consideration",
      "headRefOid": "1c74c1508a0eb13e30d66723fee763080f83c65a",
      "closedAt": "2022-03-07T09:33:32Z",
      "mergedAt": "2022-03-07T09:33:32Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "97fa88e72ff116e7c70ec04a4e2119fc75c0058d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41uT1c",
          "commit": {
            "abbreviatedOid": "4e0482d"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks ok to me, just a small suggestion to avoid talking about packet retransmission.",
          "createdAt": "2022-03-07T07:49:50Z",
          "updatedAt": "2022-03-07T07:51:01Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nprocessing as the content of lost packets initially sent on one path can be sent\r\non another path without further frame scheduling adaptations.\r\n```",
              "createdAt": "2022-03-07T07:49:50Z",
              "updatedAt": "2022-03-07T07:51:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41ufwy",
          "commit": {
            "abbreviatedOid": "48b4cbf"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T08:42:59Z",
          "updatedAt": "2022-03-07T08:42:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41uh2_",
          "commit": {
            "abbreviatedOid": "48b4cbf"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T08:51:16Z",
          "updatedAt": "2022-03-07T08:51:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41ushk",
          "commit": {
            "abbreviatedOid": "48b4cbf"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:30:13Z",
          "updatedAt": "2022-03-07T09:30:14Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n\r\n## Handling different PMTU sizes\r\n```",
              "createdAt": "2022-03-07T09:30:13Z",
              "updatedAt": "2022-03-07T09:30:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41us3Z",
          "commit": {
            "abbreviatedOid": "48b4cbf"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:31:22Z",
          "updatedAt": "2022-03-07T09:31:23Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nmultiple paths. One simple option if the PMTUs are relatively similar is to apply the minimum PMTU of all paths to\r\neach path. The benefit of such an approach is to simplify retransmission\r\nprocessing as the content of lost packets initially sent on one path can be sent\r\non another path without further frame scheduling adaptations.\r\n```",
              "createdAt": "2022-03-07T09:31:22Z",
              "updatedAt": "2022-03-07T09:31:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 106,
      "id": "PR_kwDOGNtpaM40Bo4r",
      "title": "Removing text about preferred_address",
      "url": "https://github.com/quicwg/multipath/pull/106",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This text will be moved to the next section in PR #102. Therefore this PR needs to be merged together with PR #102.",
      "createdAt": "2022-03-07T08:41:03Z",
      "updatedAt": "2022-03-07T09:13:25Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "208653ee9c2ff81ad03399c4aafc56d5ee3b55a1",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-6",
      "headRefOid": "61b2f8734b07c07f32b4b3ec7f7faf8df1f522f1",
      "closedAt": "2022-03-07T09:13:25Z",
      "mergedAt": "2022-03-07T09:13:25Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "5daa2a0d1dd01700dbc403a222fe1bb3dddb2f25"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41uhBT",
          "commit": {
            "abbreviatedOid": "61b2f87"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T08:47:58Z",
          "updatedAt": "2022-03-07T08:47:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41uhe0",
          "commit": {
            "abbreviatedOid": "61b2f87"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T08:49:46Z",
          "updatedAt": "2022-03-07T08:49:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 108,
      "id": "PR_kwDOGNtpaM40ByIM",
      "title": "Overview section",
      "url": "https://github.com/quicwg/multipath/pull/108",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-07T09:21:19Z",
      "updatedAt": "2022-03-07T09:31:54Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "5daa2a0d1dd01700dbc403a222fe1bb3dddb2f25",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-8",
      "headRefOid": "fe326a26a51cbe5811e96784eb0b06263d891311",
      "closedAt": "2022-03-07T09:31:50Z",
      "mergedAt": "2022-03-07T09:31:50Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "07e2a13436606c492b928db69480fcfdccfbdae2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 109,
      "id": "PR_kwDOGNtpaM40B09p",
      "title": "[+] fix path_abandon type statement",
      "url": "https://github.com/quicwg/multipath/pull/109",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-07T09:33:11Z",
      "updatedAt": "2022-03-09T07:25:19Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07e2a13436606c492b928db69480fcfdccfbdae2",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/type",
      "headRefOid": "27d7f0e9807b43803764896d725e9b79379cde71",
      "closedAt": "2022-03-07T09:54:48Z",
      "mergedAt": "2022-03-07T09:54:48Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "fe95d4f752f44f8ab99feff9049265af9bf5bbe2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41uw81",
          "commit": {
            "abbreviatedOid": "478d7c7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:45:50Z",
          "updatedAt": "2022-03-07T09:45:50Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n    the control frame. \r\n    Note that this is the connection identifier used by the peer \r\n    when sending packets on the to-be-closed path.\r\n```",
              "createdAt": "2022-03-07T09:45:50Z",
              "updatedAt": "2022-03-07T09:47:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uxEF",
          "commit": {
            "abbreviatedOid": "478d7c7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:46:11Z",
          "updatedAt": "2022-03-07T09:46:11Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n    the control frame.\r\n    Note that this is the connection identifier used by the sender \r\n    when sending packets on the to-be-closed path.\r\n```",
              "createdAt": "2022-03-07T09:46:11Z",
              "updatedAt": "2022-03-07T09:46:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 110,
      "id": "PR_kwDOGNtpaM40NjCS",
      "title": "[~] fix server MUST validate paths before using them",
      "url": "https://github.com/quicwg/multipath/pull/110",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #101 ",
      "createdAt": "2022-03-10T03:40:36Z",
      "updatedAt": "2022-07-06T15:50:15Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "3d367b87caaa2f3c047ddfc96c0933b68278fd2f",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_validation",
      "headRefOid": "4ce365aeacbfe1c0b256272c5244c48bcedc99f6",
      "closedAt": "2022-07-06T15:50:14Z",
      "mergedAt": "2022-07-06T15:50:14Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "71174a3b45d3d83c6b5e87999a340b4e63465a71"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM42FkE5",
          "commit": {
            "abbreviatedOid": "e7f1ecb"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-11T16:10:15Z",
          "updatedAt": "2022-03-11T16:10:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM42boo9",
          "commit": {
            "abbreviatedOid": "e7f1ecb"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-17T14:37:01Z",
          "updatedAt": "2022-03-17T14:37:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM42iXTS",
          "commit": {
            "abbreviatedOid": "e7f1ecb"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-19T07:18:01Z",
          "updatedAt": "2022-03-19T07:18:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49aQNI",
          "commit": {
            "abbreviatedOid": "ad48d27"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:24:00Z",
          "updatedAt": "2022-07-06T15:24:01Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nunless it has previously validated that address.\r\n```",
              "createdAt": "2022-07-06T15:24:00Z",
              "updatedAt": "2022-07-06T15:24:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aQw7",
          "commit": {
            "abbreviatedOid": "ad48d27"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-06T15:25:29Z",
          "updatedAt": "2022-07-06T15:25:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 113,
      "id": "PR_kwDOGNtpaM40fwuj",
      "title": "Add in-solidarity-bot config",
      "url": "https://github.com/quicwg/multipath/pull/113",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This will fix the CI issues",
      "createdAt": "2022-03-15T21:59:16Z",
      "updatedAt": "2022-03-16T07:38:52Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "fe95d4f752f44f8ab99feff9049265af9bf5bbe2",
      "headRepository": "quicwg/multipath",
      "headRefName": "solidarity-fix",
      "headRefOid": "b5fe13a3a483175065b969d251ad114b330a4b57",
      "closedAt": "2022-03-16T07:38:51Z",
      "mergedAt": "2022-03-16T07:38:51Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "3d367b87caaa2f3c047ddfc96c0933b68278fd2f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM42Tvb4",
          "commit": {
            "abbreviatedOid": "b5fe13a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-16T06:24:09Z",
          "updatedAt": "2022-03-16T06:24:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM42T8rn",
          "commit": {
            "abbreviatedOid": "b5fe13a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-16T07:38:32Z",
          "updatedAt": "2022-03-16T07:38:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 116,
      "id": "PR_kwDOGNtpaM40uX8w",
      "title": "[~] modification for path states in Section 4.3",
      "url": "https://github.com/quicwg/multipath/pull/116",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #112 and #115 ",
      "createdAt": "2022-03-21T09:09:27Z",
      "updatedAt": "2022-07-08T08:27:37Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71de7b625e2d1faac4329d2b6dee7ec404288123",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_state",
      "headRefOid": "59673b35c0b789a5630026dae6d4f9d005fad6dc",
      "closedAt": "2022-07-08T08:27:37Z",
      "mergedAt": "2022-07-08T08:27:37Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "99bd044dd4c3e249bcd04ad5fe8cebd9e5c07469"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49aRV-",
          "commit": {
            "abbreviatedOid": "e9137d9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:27:01Z",
          "updatedAt": "2022-07-06T15:27:02Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nof new data on a path. Note that if a path became idle due to a timeout, \r\n```",
              "createdAt": "2022-07-06T15:27:01Z",
              "updatedAt": "2022-07-06T15:27:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aRlQ",
          "commit": {
            "abbreviatedOid": "e9137d9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:27:37Z",
          "updatedAt": "2022-07-06T15:27:38Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nEndpoints SHOULD send RETIRE_CONNECTION_ID frames before releasing the\r\n```",
              "createdAt": "2022-07-06T15:27:38Z",
              "updatedAt": "2022-07-06T15:27:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aSiX",
          "commit": {
            "abbreviatedOid": "e9137d9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:30:12Z",
          "updatedAt": "2022-07-06T15:30:12Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nassociated Connection IDs following {{Section 19.16. of QUIC-TRANSPORT}}. Considering \r\n```",
              "createdAt": "2022-07-06T15:30:12Z",
              "updatedAt": "2022-07-06T15:30:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aS7v",
          "commit": {
            "abbreviatedOid": "e9137d9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:31:17Z",
          "updatedAt": "2022-07-06T15:31:18Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\nendpoints are not intended to send packets on the current path in the \"Closed\" \r\nstate, endpoints SHOULD send RETIRE_CONNECTION_ID frames on other \r\n```",
              "createdAt": "2022-07-06T15:31:17Z",
              "updatedAt": "2022-07-06T15:31:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aTBR",
          "commit": {
            "abbreviatedOid": "e9137d9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-06T15:31:31Z",
          "updatedAt": "2022-07-06T15:31:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49f6k_",
          "commit": {
            "abbreviatedOid": "e2c6d05"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T15:30:40Z",
          "updatedAt": "2022-07-07T15:30:45Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Is this a SHOULD NOT or a MUST NOT?",
              "createdAt": "2022-07-07T15:30:41Z",
              "updatedAt": "2022-07-07T15:30:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49gTPN",
          "commit": {
            "abbreviatedOid": "e2c6d05"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T16:42:39Z",
          "updatedAt": "2022-07-07T16:42:39Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Actually this should not be normative here as this is just the reasoning. So maybe s/SHOULD NOT/are not expected to/",
              "createdAt": "2022-07-07T16:42:39Z",
              "updatedAt": "2022-07-07T16:42:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49gTdr",
          "commit": {
            "abbreviatedOid": "e2c6d05"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T16:43:23Z",
          "updatedAt": "2022-07-07T16:43:24Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nendpoints are not expected to send packets on the current path in the \"Closed\"\r\n```",
              "createdAt": "2022-07-07T16:43:24Z",
              "updatedAt": "2022-07-07T16:43:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49i8-b",
          "commit": {
            "abbreviatedOid": "59673b3"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T08:27:15Z",
          "updatedAt": "2022-07-08T08:27:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 117,
      "id": "PR_kwDOGNtpaM41s45M",
      "title": "[+] add stand-by status for path management",
      "url": "https://github.com/quicwg/multipath/pull/117",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For issue #22",
      "createdAt": "2022-04-06T04:12:48Z",
      "updatedAt": "2022-07-11T12:19:39Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b692f4bae6381c23fca051a0cf7026609a7d2c",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_standby",
      "headRefOid": "5abb88200431967913b69606969d3b11efb28464",
      "closedAt": "2022-07-11T12:19:39Z",
      "mergedAt": "2022-07-11T12:19:38Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "269195b3d1dbefcc87b45ae009b2633eeea9622a"
      },
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I think this is nearly ready. I just wonder what should be the behaviour of the PATH_STATUS receiver if all the existing paths are marked as Standby. Should we add something regarding this?\r\n\r\nI agree with this point. For the receiver side, endpoint MAY ignore this frame if it would cause all the paths unavailable.\r\nI updated the description. ",
          "createdAt": "2022-07-08T14:00:28Z",
          "updatedAt": "2022-07-08T14:00:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49ZrgT",
          "commit": {
            "abbreviatedOid": "d725ce4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:55:17Z",
          "updatedAt": "2022-07-06T13:55:17Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Actually I don't think we need to maintain the sequence number per path on the sender side. As long as the sequence number is larger than the last received for that path, you should apply it.",
              "createdAt": "2022-07-06T13:55:17Z",
              "updatedAt": "2022-07-06T13:55:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49Zro3",
          "commit": {
            "abbreviatedOid": "d725ce4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:55:35Z",
          "updatedAt": "2022-07-06T13:55:36Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "```suggestion\r\nEndpoints use PATH_STATUS frame to inform the peer whether it prefers to \r\n```",
              "createdAt": "2022-07-06T13:55:35Z",
              "updatedAt": "2022-07-06T13:55:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49fpAS",
          "commit": {
            "abbreviatedOid": "a19a414"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T14:45:21Z",
          "updatedAt": "2022-07-07T14:45:22Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "It's ok that we maintain only one monotonically increasing sequence number for all the Path Status frame under the same connection.",
              "createdAt": "2022-07-07T14:45:22Z",
              "updatedAt": "2022-07-07T14:45:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49fxlw",
          "commit": {
            "abbreviatedOid": "d725ce4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T15:06:40Z",
          "updatedAt": "2022-07-07T15:06:41Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Updated the definition of sequence number.",
              "createdAt": "2022-07-07T15:06:41Z",
              "updatedAt": "2022-07-07T15:06:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49f7JK",
          "commit": {
            "abbreviatedOid": "cc9fdef"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-07T15:32:18Z",
          "updatedAt": "2022-07-07T15:40:58Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nPATH_STATUS frames are used by endpoints to inform the peer of the current\r\n```",
              "createdAt": "2022-07-07T15:32:18Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 8,
              "body": "I think I would be useful to explicitly state that these are indications, i.e., the peer might not follow the endhost advertisements.",
              "createdAt": "2022-07-07T15:35:21Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 59,
              "body": "```suggestion\r\n  the definition of Path Identifier in {{path-abandon-frame}}.\r\n```",
              "createdAt": "2022-07-07T15:36:05Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 64,
              "body": "Maybe we should state that the scope of the sequence number is relative to the Path Identifier? Having a single space for the whole connection might cause issues if we have different paths with different latencies.",
              "createdAt": "2022-07-07T15:38:08Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 74,
              "body": "```suggestion\r\non the corresponding path, until it receives a new PATH_STATUS frame\r\n```",
              "createdAt": "2022-07-07T15:38:40Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 64,
              "body": "Actually later this is explained, but I think it could be useful to explicitly state that here.",
              "createdAt": "2022-07-07T15:39:58Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 83,
              "body": "Do we want to state that PATH_STATUS is ack-eliciting?",
              "createdAt": "2022-07-07T15:40:45Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49iNiP",
          "commit": {
            "abbreviatedOid": "cc9fdef"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T04:07:11Z",
          "updatedAt": "2022-07-08T04:07:11Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Actually the receiver should maintain the largest received sequence number for each path. The receiver should accept the Path Status Frame if and only if its sequence number is larger than the largest received sequence number of the Path Identifier. The latencies of different paths doesn't matter, because the receiver can distinguish Status Frames for different paths with Path Identifier field, and compares the sequence numbers independently.",
              "createdAt": "2022-07-08T04:07:11Z",
              "updatedAt": "2022-07-08T04:07:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49iNrr",
          "commit": {
            "abbreviatedOid": "cc9fdef"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T04:08:41Z",
          "updatedAt": "2022-07-08T04:08:41Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "The acknowledgement of PATH_STATUS frame is important for the sender to check whether the receiver got the path status change or not.",
              "createdAt": "2022-07-08T04:08:41Z",
              "updatedAt": "2022-07-08T04:08:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jPeJ",
          "commit": {
            "abbreviatedOid": "7d68d77"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T09:28:22Z",
          "updatedAt": "2022-07-08T09:28:23Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "I fully agree with your description, I just suggested to make it clearer here.\r\n```suggestion\r\n  the sequence number assigned for this PATH_STATUS frame. The sequence\r\n  number is relative to the Path Identifier and MUST be monotonically increasing\r\n  for the sender of the Path Status frame in the same connection.\r\n```",
              "createdAt": "2022-07-08T09:28:22Z",
              "updatedAt": "2022-07-08T09:28:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jQow",
          "commit": {
            "abbreviatedOid": "7d68d77"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T09:30:42Z",
          "updatedAt": "2022-07-08T09:30:43Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "```suggestion\r\nPATH_STATUS frames are ack-eliciting. If a packet containing\r\n```",
              "createdAt": "2022-07-08T09:30:42Z",
              "updatedAt": "2022-07-08T09:30:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jc7b",
          "commit": {
            "abbreviatedOid": "cc9fdef"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T10:13:07Z",
          "updatedAt": "2022-07-08T10:13:08Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "I updated the description to make it clearer, and it's different for the sender and receiver side. ",
              "createdAt": "2022-07-08T10:13:08Z",
              "updatedAt": "2022-07-08T10:13:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jer9",
          "commit": {
            "abbreviatedOid": "c463880"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T10:19:30Z",
          "updatedAt": "2022-07-08T10:19:30Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Added note for that.",
              "createdAt": "2022-07-08T10:19:30Z",
              "updatedAt": "2022-07-08T10:19:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49kBK7",
          "commit": {
            "abbreviatedOid": "c463880"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I think this is nearly ready. I just wonder what should be the behaviour of the PATH_STATUS receiver if all the existing paths are marked as Standby. Should we add something regarding this?",
          "createdAt": "2022-07-08T12:36:41Z",
          "updatedAt": "2022-07-08T12:36:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49khYs",
          "commit": {
            "abbreviatedOid": "5abb882"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2022-07-08T14:20:03Z",
          "updatedAt": "2022-07-08T14:20:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49kjSW",
          "commit": {
            "abbreviatedOid": "5abb882"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Sounds good to me.",
          "createdAt": "2022-07-08T14:25:53Z",
          "updatedAt": "2022-07-08T14:25:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 121,
      "id": "PR_kwDOGNtpaM45inSp",
      "title": "fix grammar error as suggested by Kulsk in issue 119",
      "url": "https://github.com/quicwg/multipath/pull/121",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It's a grammar error fix in the aead section.",
      "createdAt": "2022-06-13T07:36:22Z",
      "updatedAt": "2022-07-05T11:32:50Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "3d367b87caaa2f3c047ddfc96c0933b68278fd2f",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/fix-grammar-in-aead",
      "headRefOid": "e674f386551fafac842129cbf8206ada045ec9b5",
      "closedAt": "2022-07-05T11:32:50Z",
      "mergedAt": "2022-07-05T11:32:50Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "1db1bd16afc79cfbf18de06782c5e167a09de7d9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 124,
      "id": "PR_kwDOGNtpaM47AJMm",
      "title": "fix max_idle_timeout issue in issue #95",
      "url": "https://github.com/quicwg/multipath/pull/124",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Replace \"max_idle_timeout\" with \"a path's idle_period\" in the Idle_Timeout Section and make sure that the idle_period is larger than 3 times the path's PTO.\r\n",
      "createdAt": "2022-07-07T09:00:58Z",
      "updatedAt": "2022-07-08T09:18:54Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "f3a20915bd5b326918bfadf9dc6f304d3b009c37",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/fix-max-idle-timeout",
      "headRefOid": "abd6d16f7569670857138d048997f12489e369ce",
      "closedAt": "2022-07-08T09:18:54Z",
      "mergedAt": "2022-07-08T09:18:54Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "a4283cf44ce7ee1e832b680b3440610936d15cdc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49eCCz",
          "commit": {
            "abbreviatedOid": "bf2a0d2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T09:37:25Z",
          "updatedAt": "2022-07-07T09:37:26Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\npath. Hosts SHOULD stop sending traffic on a path if for at least the period of the\r\nidle timeout as specified in {{Section 10.1. of QUIC-TRANSPORT}} \r\n(a) no non-probing packet was received or (b) no\r\nnon-probing packet sent over this path was acknowledged, but MAY ignore that\r\nrule if it would disqualify all available paths. To avoid idle timeout of a path, endpoints\r\n```",
              "createdAt": "2022-07-07T09:37:25Z",
              "updatedAt": "2022-07-07T09:37:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49eCdo",
          "commit": {
            "abbreviatedOid": "bf2a0d2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Proposing to rather reference to RFC9000 instead of specifying this here separate again.",
          "createdAt": "2022-07-07T09:38:42Z",
          "updatedAt": "2022-07-07T09:38:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49ibpX",
          "commit": {
            "abbreviatedOid": "abd6d16"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Just modified \"...at least _max_idle_timeout milliseconds_ (a)...\" \r\ninto \"... at least _the period of the idle timeout_  as specified in {{Section 10.1 of QUIC-TRANSPORT}} (a)...\"\r\n\r\nIt's better to just modify the corresponding 2 lines, but it's ok for me.",
          "createdAt": "2022-07-08T06:02:55Z",
          "updatedAt": "2022-07-08T06:02:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49jGpU",
          "commit": {
            "abbreviatedOid": "abd6d16"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T09:00:24Z",
          "updatedAt": "2022-07-08T09:00:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49jLwo",
          "commit": {
            "abbreviatedOid": "abd6d16"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T09:18:45Z",
          "updatedAt": "2022-07-08T09:18:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 126,
      "id": "PR_kwDOGNtpaM47AOHD",
      "title": "Clarify path closure and stateless reset reception",
      "url": "https://github.com/quicwg/multipath/pull/126",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #107, #118.",
      "createdAt": "2022-07-07T09:20:16Z",
      "updatedAt": "2022-07-08T14:05:06Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71de7b625e2d1faac4329d2b6dee7ec404288123",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-118",
      "headRefOid": "99ca8a2ad04816b19ad6788059c627e41268f53f",
      "closedAt": "2022-07-08T11:10:15Z",
      "mergedAt": "2022-07-08T11:10:14Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "4e7695b8f3eaeec8883d786b2b7d5ce8a2e969c0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49eC11",
          "commit": {
            "abbreviatedOid": "99ca8a2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T09:39:55Z",
          "updatedAt": "2022-07-07T09:39:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49jsWN",
          "commit": {
            "abbreviatedOid": "99ca8a2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-07-08T11:10:01Z",
          "updatedAt": "2022-07-08T11:10:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49kcTB",
          "commit": {
            "abbreviatedOid": "99ca8a2"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Careful with implicit actions!",
          "createdAt": "2022-07-08T14:04:42Z",
          "updatedAt": "2022-07-08T14:05:06Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I would not suggest that ABANDON \"implies\" CID retirement. It is true that after ABANDON the CID SHOULD be retired, but I don't think the spec states that the effect is mechanical or implicit. Or if it is, then we should clearly say so in the description of the abandon frame.",
              "createdAt": "2022-07-08T14:04:42Z",
              "updatedAt": "2022-07-08T14:05:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 127,
      "id": "PR_kwDOGNtpaM47BIVw",
      "title": "Add discussion about retiring DCID when there are still in-flight packets",
      "url": "https://github.com/quicwg/multipath/pull/127",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #122.",
      "createdAt": "2022-07-07T12:26:43Z",
      "updatedAt": "2022-07-08T11:40:00Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71de7b625e2d1faac4329d2b6dee7ec404288123",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-122",
      "headRefOid": "e5feb80d6916dfb918d66dc5621f1c8b3aabe174",
      "closedAt": "2022-07-08T11:40:00Z",
      "mergedAt": "2022-07-08T11:40:00Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "07b692f4bae6381c23fca051a0cf7026609a7d2c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49e1kt",
          "commit": {
            "abbreviatedOid": "9c2faa5"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T12:32:11Z",
          "updatedAt": "2022-07-07T12:32:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49jCIo",
          "commit": {
            "abbreviatedOid": "9c2faa5"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Just little gramma fix",
          "createdAt": "2022-07-08T08:44:54Z",
          "updatedAt": "2022-07-08T09:02:26Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nConnection ID, then wait for all in-flight packets to be either\r\n```",
              "createdAt": "2022-07-08T08:44:54Z",
              "updatedAt": "2022-07-08T09:02:26Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nendpoint should first stop sending packets with the to-be-retired\r\n```",
              "createdAt": "2022-07-08T08:46:05Z",
              "updatedAt": "2022-07-08T09:02:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jsrb",
          "commit": {
            "abbreviatedOid": "e5feb80"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T11:11:29Z",
          "updatedAt": "2022-07-08T11:11:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 129,
      "id": "PR_kwDOGNtpaM47Bbkb",
      "title": "Add some guidance for ACK scheduling",
      "url": "https://github.com/quicwg/multipath/pull/129",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #123.",
      "createdAt": "2022-07-07T13:21:21Z",
      "updatedAt": "2022-07-11T12:30:49Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71de7b625e2d1faac4329d2b6dee7ec404288123",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-123",
      "headRefOid": "e374c495696bd6ebdcf24bc5d4d79d399bb9b047",
      "closedAt": "2022-07-11T12:30:49Z",
      "mergedAt": "2022-07-11T12:30:48Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "dad1f457fb66fcb8dfc4e8937b621cba103e3c0b"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe we can merge this now as it is. If we want to add more guidance later we should open a separate issue and another PR.",
          "createdAt": "2022-07-11T12:24:55Z",
          "updatedAt": "2022-07-11T12:24:55Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49jxmP",
          "commit": {
            "abbreviatedOid": "4943796"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T11:33:18Z",
          "updatedAt": "2022-07-08T11:33:18Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Sending ACK_(MP) frames on the fastest path is one of the ACK scheduling strategies, but IMO the most common strategy is sending ACK_(MP) frames on the same path of the packet was sent. By the way, as QUIC-TRANSPORT doesn't contain a mechanism to calculate one-way-delay on a certain path, it's very important that we need to add some guidance for one-way-delay calculation(e.g. [QUIC-Timestamp]) with the fastest path ACK scheduling strategy, and some guidance for the potential impact on congestion control.",
              "createdAt": "2022-07-08T11:33:18Z",
              "updatedAt": "2022-07-08T11:33:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jyIQ",
          "commit": {
            "abbreviatedOid": "4943796"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Need to add guidance for one-way-delay calculation and impact on congestion control, if we want to recommend the fastest path ACK scheduling strategy.",
          "createdAt": "2022-07-08T11:35:43Z",
          "updatedAt": "2022-07-08T11:35:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49o9DS",
          "commit": {
            "abbreviatedOid": "e374c49"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T10:48:12Z",
          "updatedAt": "2022-07-11T10:48:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 130,
      "id": "PR_kwDOGNtpaM47F46r",
      "title": "Minor editorial changes",
      "url": "https://github.com/quicwg/multipath/pull/130",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Mostly fixing some English spellings and sentences, \"Figure Figure\"\r\nand \"Section Section\" occurrences. There is no content change here.",
      "createdAt": "2022-07-08T09:13:35Z",
      "updatedAt": "2022-07-08T11:37:50Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "99bd044dd4c3e249bcd04ad5fe8cebd9e5c07469",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-english",
      "headRefOid": "197f61df3407783c6f9ff044e96e04020ee93c8c",
      "closedAt": "2022-07-08T11:37:50Z",
      "mergedAt": "2022-07-08T11:37:49Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "daae7450544329fe0f44653e7deae0122d030141"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49jRKo",
          "commit": {
            "abbreviatedOid": "197f61d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T09:31:42Z",
          "updatedAt": "2022-07-08T09:31:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49jyix",
          "commit": {
            "abbreviatedOid": "197f61d"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T11:37:39Z",
          "updatedAt": "2022-07-08T11:37:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 131,
      "id": "PR_kwDOGNtpaM47GEgm",
      "title": "Add more explanation on ACK delay, RTT computation for single PNS",
      "url": "https://github.com/quicwg/multipath/pull/131",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For issue #125 , add some considerations for RTT computation in our single pns implementation. Not sure if it is easy enough to understand. Please feel free to change.",
      "createdAt": "2022-07-08T09:49:57Z",
      "updatedAt": "2022-10-24T11:19:50Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "a4283cf44ce7ee1e832b680b3440610936d15cdc",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/rtt-spns-consideration",
      "headRefOid": "a208472a402b25e972599305777b99d7368f952e",
      "closedAt": "2022-10-24T11:19:50Z",
      "mergedAt": "2022-10-24T11:19:50Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "c5fb91a22e318cc1465b0e4d531830c76cd47c31"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, this needs more discussion. Also maybe we want to move this text rather in the \"Implementation Considerations\" section?",
          "createdAt": "2022-07-11T12:30:48Z",
          "updatedAt": "2022-07-11T12:30:48Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema, @yfmascgy updated this PR. Can we merge it?\r\n\r\nNote that this PR is only for SPNS and part of that respective section. Based on his report, the strategy seems reasonable.\r\n\r\nFor ACK_MP we have the following text in the packet scheduling section (7.):\r\n\r\n> Note that the receiver could use a different scheduling strategy to send ACK(_MP) frames. The recommended default behaviour consists in sending ACK(_MP) frames on the path they acknowledge packets.",
          "createdAt": "2022-10-24T07:40:00Z",
          "updatedAt": "2022-10-24T07:40:00Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49j3TQ",
          "commit": {
            "abbreviatedOid": "2e9433e"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "The mechanism is ok, but we need to make it a little clearer by distinguishing actions for the sender and receiver side.",
          "createdAt": "2022-07-08T11:58:24Z",
          "updatedAt": "2022-07-08T12:06:47Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n* The sender also keeps track of a list of sent packets for each path that are acknowledged by\r\n```",
              "createdAt": "2022-07-08T11:58:24Z",
              "updatedAt": "2022-07-08T12:06:47Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  ACKs received from the same path. A path's RTT sample is generated on receving ACK\r\n```",
              "createdAt": "2022-07-08T11:59:52Z",
              "updatedAt": "2022-07-08T12:06:47Z"
            },
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n* The receiver side counts the number of ACK-eliciting packets received for each paths,\r\n```",
              "createdAt": "2022-07-08T12:01:38Z",
              "updatedAt": "2022-07-08T12:06:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49moyE",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2022-07-09T13:57:06Z",
          "updatedAt": "2022-07-09T13:57:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49nmjX",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T04:49:50Z",
          "updatedAt": "2022-07-11T04:49:50Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I am trying to understand your algorithm. I guess it sums up as:\r\n\r\n* For each path, the sender maintains knowledge of the largest PN acknowledged on path.\r\n* The sender also keeps track of a list of sent packets for each path that are not yet acknowledged by\r\n  ACKs received from the same path.\r\n  \r\nWhen a same path ACK is received:\r\n\r\n* process the acknowledged ranges until finding a packet that:\r\n      1) Was sent on the path\r\n      2) Has a packet number larger than the largest PN acknowledged on path\r\n* if several packets match the criteria above, retain only the one with the largest PN\r\n* the remaining list may be empty, in which case do nothing\r\n* if one packet matches the criteria above:\r\n      1) Compute the RTT sample as the difference between the ACK received time and the packet sent time.\r\n      2) Update RTT average, etc.\r\n      3) Set the largest PN acknowledged on path to the PN that was just processed\r\n      3) Remove all packets with PN lower or equal than this largest acknowledged PN from the list of sent packets for each path that are not yet acknowledged by ACKs received from the same path\r\n\r\nThe downside of that method is that the RTT sample may include some or all of the ACK Delay of the ACK frame. The possible rule is:\r\n\r\n* if the largest acknowledged number in the ACK frame matches the largest acknowledged number on path, remove the ACK Delay from the RTT sample.\r\n* if not, accept that the measurement may be imprecise.\r\n\r\nDo I understand correctly?",
              "createdAt": "2022-07-11T04:49:50Z",
              "updatedAt": "2022-07-11T04:49:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49nn8g",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T05:01:32Z",
          "updatedAt": "2022-07-11T05:01:32Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Of course, we need to also specify the receiver behavior. Specifying that behavior may help deal with the \"ACK Delay\" issue. I assume that this why you write:\r\n\r\n* The receiver counts the number of ACK-eliciting packets received for each paths,\r\n  and keeps a per-path ACK timer. An ACK from that path is triggered when the\r\n  number of ACK-eliciting packets received on that path surpasses the path's\r\n  ACK-eliciting threshold or the path's ACK-timer expires.\r\n\r\nI am not too sure about that, because the net effect of that rule is to get at least one new ACK **for each path** per ACK Timer. If the goal is to provide accurate measurement of RTT, we don't need that many \"on path ACK\". One per RTT would be enough. Maybe 2 per RTT to be safe. Or the max value of \"ACK Timer\" and \"Path RTT / 2\". Reset that timer for each path after sending an on path RTT. Then, trigger an on path ACK as soon as (1) the timer has expired and (2) a packet has been received. (Ack eliciting or not does not matter.)\r\n\r\nThat way, the sender can assume that for the on-path packet, the ACK delay is set to zero.",
              "createdAt": "2022-07-11T05:01:32Z",
              "updatedAt": "2022-07-11T05:01:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49nrao",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T05:29:03Z",
          "updatedAt": "2022-07-11T05:29:03Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Correction. My concern about ACK Delay is misplaced. We are speaking about ACK_(MP), so the largest packet acknowledged is always a packet sent on that same path. See the modification that I propose on PR #129, a simple guidance for always sending at least some ACK on the same path. If we accept that guidance, then the text becomes simpler -- no need to specify a receiver side strategy. So the entire addition becomes:\r\n\r\n\r\n* For each path, the sender maintains knowledge of the largest PN acknowledged on path.\r\n\r\n* The sender also keeps track of a list of sent packets for each path that are not yet acknowledged by ACKs received from the same path.\r\n\r\n* When a same path ACK is received, the sender checks whether the largest packet acknowledged is larger than the largest PN acknowledged on path. If it is, the sender will:\r\n\r\n    - Compute a new path RTT sample using the ACK arrival time, the ACK delay indication, and the time at which the packet with this largest PN was sent.\r\n    - Set the largest PN acknowledged on path to the PN that was just processed\r\n    - Remove all packets with PN lower or equal than this largest acknowledged PN from the list of packets sent on this path that are not yet acknowledged by ACKs received from the same path.\r\n\r\n\r\n ",
              "createdAt": "2022-07-11T05:29:03Z",
              "updatedAt": "2022-07-11T05:29:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49nr42",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T05:32:30Z",
          "updatedAt": "2022-07-11T05:32:30Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Of course, there is the issue of packets sent with zero-length CID. In that case, the simple algorithm above does not work very well. The ACK_(MP) will contain ack ranges received on many paths. Instead of using the largest number in the ACK_(MP) frame, the sender needs to filter the ACK ranges and retrieve the largest number acknowledged for the path.",
              "createdAt": "2022-07-11T05:32:30Z",
              "updatedAt": "2022-07-11T05:32:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49oGFh",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T07:41:51Z",
          "updatedAt": "2022-07-11T08:23:51Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n  and keeps a per-path ACK timer. An ACK from that path is triggered when either\r\n  a) the number of ACK-eliciting packets received on that path surpasses the path's\r\n  ACK-eliciting threshold or b) the path's ACK-timer expires.\r\n```",
              "createdAt": "2022-07-11T07:41:51Z",
              "updatedAt": "2022-07-11T08:23:51Z"
            },
            {
              "originalPosition": 22,
              "body": "Which parts of the \"largest packet (number ?) received\" should be recorded in addition to the reception time?",
              "createdAt": "2022-07-11T07:42:41Z",
              "updatedAt": "2022-07-11T08:23:51Z"
            },
            {
              "originalPosition": 24,
              "body": "It sounds odd to me to change the meaning of the ACK Delay field for a particular use case...",
              "createdAt": "2022-07-11T08:21:24Z",
              "updatedAt": "2022-07-11T08:23:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49o-jW",
          "commit": {
            "abbreviatedOid": "1e5852b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Need more discussion about the mechanism.",
          "createdAt": "2022-07-11T10:54:03Z",
          "updatedAt": "2022-07-11T10:54:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5EsyWc",
          "commit": {
            "abbreviatedOid": "2a6cbe2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I'm ok with the current version, just a few editorial hints.",
          "createdAt": "2022-10-24T06:34:19Z",
          "updatedAt": "2022-10-24T06:56:24Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "... and the resulted RTT sample may be the sum of _the one way delay of two different paths._",
              "createdAt": "2022-10-24T06:34:19Z",
              "updatedAt": "2022-10-24T06:56:24Z"
            },
            {
              "originalPosition": 34,
              "body": "A path should send an ACK _frame_ when it receives ack-eliciting threshold number of ack-eliciting\r\npackets (e.g., two) _on the current path_.",
              "createdAt": "2022-10-24T06:37:57Z",
              "updatedAt": "2022-10-24T06:56:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EtDdz",
          "commit": {
            "abbreviatedOid": "a208472"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Seems like a reasonable tradeoff, easy to implement.",
          "createdAt": "2022-10-24T07:46:23Z",
          "updatedAt": "2022-10-24T07:46:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 133,
      "id": "PR_kwDOGNtpaM47GtJs",
      "title": "add some text to refuse path initiation",
      "url": "https://github.com/quicwg/multipath/pull/133",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Should fix #120.",
      "createdAt": "2022-07-08T12:32:43Z",
      "updatedAt": "2022-07-11T12:23:05Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b692f4bae6381c23fca051a0cf7026609a7d2c",
      "headRepository": "quicwg/multipath",
      "headRefName": "refuse-path",
      "headRefOid": "f081e77d44c52eea1cacac7ad808c5845f3bb0c2",
      "closedAt": "2022-07-11T12:23:05Z",
      "mergedAt": "2022-07-11T12:23:05Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "f54fe39a7b7a98dfe2cfbec7985312acde79428a"
      },
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I rewrote the text based on the suggestion from @huitema to discuss the case of zero-length CIDs.",
          "createdAt": "2022-07-11T07:38:04Z",
          "updatedAt": "2022-07-11T07:38:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49mckX",
          "commit": {
            "abbreviatedOid": "ff0471f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Yes, good idea. Specifying \"on another path\" is indeed the key, because otherwise the responder needs to consume a CID. \r\n\r\nThere is a corner case when the Path Challenge arrives with a NULL CID. What happens then?",
          "createdAt": "2022-07-09T07:06:58Z",
          "updatedAt": "2022-07-09T07:06:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49nC7-",
          "commit": {
            "abbreviatedOid": "ff0471f"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I'm ok with the new text, but I agree with Christian that we need to explain what would happen when endpoints use NULL CID.",
          "createdAt": "2022-07-10T14:38:51Z",
          "updatedAt": "2022-07-10T14:38:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49nFoM",
          "commit": {
            "abbreviatedOid": "ff0471f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-10T16:34:46Z",
          "updatedAt": "2022-07-10T16:34:46Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Hw about the following text:\r\n\r\nThe standard way to deny the establishment of a path, according to {{RFC9000}}, is\r\nto not send a PATH_RESPONSE  in response to the peer's\r\nPATH_CHALLENGE. An endpoint that has negotiated use of multipath can\r\nuse a more direct method, but only if the PATH_CHALLENGE arrives with\r\na non-zero length CID. This endpoint MAY send  on another active path\r\na PATH_ABANDON frame containing the Path Identifier of the refused path.\r\n\r\n",
              "createdAt": "2022-07-10T16:34:46Z",
              "updatedAt": "2022-07-10T16:36:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49o8mk",
          "commit": {
            "abbreviatedOid": "f081e77"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good to me.",
          "createdAt": "2022-07-11T10:46:27Z",
          "updatedAt": "2022-07-11T10:46:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49pV6F",
          "commit": {
            "abbreviatedOid": "f081e77"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T12:22:46Z",
          "updatedAt": "2022-07-11T12:22:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 134,
      "id": "PR_kwDOGNtpaM47HHW6",
      "title": "Do not imply",
      "url": "https://github.com/quicwg/multipath/pull/134",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Minor tweak. The text says that a path abandon \"implies\" retirement of the CID. Readers could be mislead and assume that they don't need to send a retire frame after sending abandon, when in fact they do.",
      "createdAt": "2022-07-08T14:16:31Z",
      "updatedAt": "2022-07-08T16:34:32Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b692f4bae6381c23fca051a0cf7026609a7d2c",
      "headRepository": "huitema/multipath",
      "headRefName": "do-not-imply",
      "headRefOid": "e523da51315a7ae9ceb48a00aeec2b15e0e1ff90",
      "closedAt": "2022-07-08T14:26:35Z",
      "mergedAt": "2022-07-08T14:26:35Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "a6126f4ab1e3df1deca8c5517fbe974ffaf29e5d"
      },
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@Yanmei-Liu , @qdeconinck, @mirjak please review.",
          "createdAt": "2022-07-08T14:21:09Z",
          "updatedAt": "2022-07-08T14:21:09Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This Github setting is pretty annoying. @LPardue I understand why only the selected authors would be able to merge a pull request, but as it stands I am also blocked from requesting reviews of a PR that I just created.",
          "createdAt": "2022-07-08T14:25:01Z",
          "updatedAt": "2022-07-08T14:25:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49kiV9",
          "commit": {
            "abbreviatedOid": "e523da5"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-07-08T14:22:58Z",
          "updatedAt": "2022-07-08T14:22:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49kifJ",
          "commit": {
            "abbreviatedOid": "e523da5"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The proposed text is indeed clearer.",
          "createdAt": "2022-07-08T14:23:26Z",
          "updatedAt": "2022-07-08T14:23:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49kivI",
          "commit": {
            "abbreviatedOid": "e523da5"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T14:24:13Z",
          "updatedAt": "2022-07-08T14:24:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 135,
      "id": "PR_kwDOGNtpaM47HITr",
      "title": "[~] Receiving old packet number space identifier in ACK_MP",
      "url": "https://github.com/quicwg/multipath/pull/135",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #128 ",
      "createdAt": "2022-07-08T14:20:15Z",
      "updatedAt": "2022-07-11T12:57:37Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b692f4bae6381c23fca051a0cf7026609a7d2c",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/proto_violation",
      "headRefOid": "57700dc1d34f7c9435c72e6d358f7c965629e172",
      "closedAt": "2022-07-11T12:57:37Z",
      "mergedAt": "2022-07-11T12:57:37Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "68e5e02c4cca6057c8181a22e8fc9f3084791de0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49kj8Y",
          "commit": {
            "abbreviatedOid": "ffa3afd"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Minor English nit.",
          "createdAt": "2022-07-08T14:27:55Z",
          "updatedAt": "2022-07-08T14:29:08Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nspace ID which was never issued by endpoints, it MUST treat this as\r\n```",
              "createdAt": "2022-07-08T14:27:55Z",
              "updatedAt": "2022-07-08T14:29:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49mcms",
          "commit": {
            "abbreviatedOid": "ffa3afd"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-09T07:08:59Z",
          "updatedAt": "2022-07-09T07:09:05Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Why SHOULD? Is there an exception? What else could the receiver do?",
              "createdAt": "2022-07-09T07:08:59Z",
              "updatedAt": "2022-07-09T07:09:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49mo9I",
          "commit": {
            "abbreviatedOid": "cf794b2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-09T14:04:45Z",
          "updatedAt": "2022-07-09T14:04:46Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Replaced with _MUST_",
              "createdAt": "2022-07-09T14:04:45Z",
              "updatedAt": "2022-07-09T14:04:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49pfid",
          "commit": {
            "abbreviatedOid": "cf794b2"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T12:54:10Z",
          "updatedAt": "2022-07-11T12:54:15Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nIf an endpoint receives an ACK_MP frame with a packet number\r\nspace ID which was never issued by endpoints (i.e., with a Connection ID\r\nsequence number larger than the largest one advertised), it MUST treat\r\nthis as a connection error of type MP_PROTOCOL_VIOLATION and close\r\nthe connection. If an endpoint receives an ACK_MP frame with a packet\r\nnumber space ID which is no more active (e.g., retired by a\r\nRETIRE_CONNECTION_ID frame or belonging to closed paths), it MUST\r\nignore the ACK_MP frame without causing a connection error.\r\n```",
              "createdAt": "2022-07-11T12:54:10Z",
              "updatedAt": "2022-07-11T12:55:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 141,
      "id": "PR_kwDOGNtpaM4_Vm2S",
      "title": "[~] replace MP_CONNECTION_ERROR with TRANSPORT_PARAMETER_ERROR",
      "url": "https://github.com/quicwg/multipath/pull/141",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #136 ",
      "createdAt": "2022-09-21T10:00:17Z",
      "updatedAt": "2022-09-23T09:27:19Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "68e5e02c4cca6057c8181a22e8fc9f3084791de0",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/error_code",
      "headRefOid": "cfb679c3dca5b23cff8ecad51375b70cda04323e",
      "closedAt": "2022-09-23T09:27:19Z",
      "mergedAt": "2022-09-23T09:27:19Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "2f11fdb410dc1ab46eb15be309b07cd0be6f5d99"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5CfKSU",
          "commit": {
            "abbreviatedOid": "bfac69d"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Minor modification, otherwise LGTM.",
          "createdAt": "2022-09-21T13:50:10Z",
          "updatedAt": "2022-09-21T13:51:55Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nTRANSPORT_PARAMETER_ERROR (specified in {{Section 20.1 of QUIC-TRANSPORT}})\r\nand close the connection.\r\n```",
              "createdAt": "2022-09-21T13:50:10Z",
              "updatedAt": "2022-09-21T13:51:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5CpZ0w",
          "commit": {
            "abbreviatedOid": "cfb679c"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-23T09:15:33Z",
          "updatedAt": "2022-09-23T09:15:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Cpcb9",
          "commit": {
            "abbreviatedOid": "cfb679c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-23T09:24:34Z",
          "updatedAt": "2022-09-23T09:24:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 143,
      "id": "PR_kwDOGNtpaM4_m0aw",
      "title": "Fix enable_multipath values",
      "url": "https://github.com/quicwg/multipath/pull/143",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #142.",
      "createdAt": "2022-09-26T13:20:45Z",
      "updatedAt": "2022-10-21T10:21:21Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "2f11fdb410dc1ab46eb15be309b07cd0be6f5d99",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-enable_multipath-values",
      "headRefOid": "1d4f0a8e8945c6cdf72ba2cf2a135788ff3826fc",
      "closedAt": "2022-10-21T10:21:21Z",
      "mergedAt": "2022-10-21T10:21:21Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "8e37e4706d2806bc073fce1096eae351a122c012"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5C2P1J",
          "commit": {
            "abbreviatedOid": "88f5359"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-27T08:23:56Z",
          "updatedAt": "2022-09-27T08:23:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 145,
      "id": "PR_kwDOGNtpaM5BAZmM",
      "title": "Update of affiliation",
      "url": "https://github.com/quicwg/multipath/pull/145",
      "state": "MERGED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-18T11:12:35Z",
      "updatedAt": "2022-10-18T11:13:51Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "2f11fdb410dc1ab46eb15be309b07cd0be6f5d99",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-2",
      "headRefOid": "c9050325c7df566eac559c337f4fb54673563c64",
      "closedAt": "2022-10-18T11:13:51Z",
      "mergedAt": "2022-10-18T11:13:51Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "07b315c04991840a1bf5171e5779f4ca123c88cf"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 146,
      "id": "PR_kwDOGNtpaM5BQBOR",
      "title": "Add Alibaba SPNS implementation and experiment report",
      "url": "https://github.com/quicwg/multipath/pull/146",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-21T03:13:53Z",
      "updatedAt": "2022-10-21T21:25:02Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b315c04991840a1bf5171e5779f4ca123c88cf",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/alibaba-spns-report",
      "headRefOid": "28495256d6f55b4a87b3532c4e81a12726ff5d5c",
      "closedAt": "2022-10-21T21:25:02Z",
      "mergedAt": "2022-10-21T21:25:02Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "95f787bde9207c86946a7a8b6a2d9972a6a0f747"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 147,
      "id": "PR_kwDOGNtpaM5BQ_10",
      "title": "Add entry for the PATH_STATUS frame in IANA",
      "url": "https://github.com/quicwg/multipath/pull/147",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #138.",
      "createdAt": "2022-10-21T08:08:28Z",
      "updatedAt": "2022-10-21T08:55:56Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b315c04991840a1bf5171e5779f4ca123c88cf",
      "headRepository": "quicwg/multipath",
      "headRefName": "qdeconinck-fix-138",
      "headRefOid": "bb081aa9e4304e901bd5fc3cce2e97cac60110c0",
      "closedAt": "2022-10-21T08:55:56Z",
      "mergedAt": "2022-10-21T08:55:56Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "2f7cfb3bddda1d35d20d0370ebb9973d53827027"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 148,
      "id": "PR_kwDOGNtpaM5BRpTN",
      "title": "New implementation consideration on keep alives",
      "url": "https://github.com/quicwg/multipath/pull/148",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #144",
      "createdAt": "2022-10-21T10:37:41Z",
      "updatedAt": "2022-10-24T12:45:31Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "8e37e4706d2806bc073fce1096eae351a122c012",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-8",
      "headRefOid": "a717fc7bfc966d96fb631ad95ad6d5de1757ebc6",
      "closedAt": "2022-10-24T12:45:31Z",
      "mergedAt": "2022-10-24T12:45:31Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "749aa03ec09471f0ba5b533ac540bfdec7ab8e6b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Emq1G",
          "commit": {
            "abbreviatedOid": "5f18489"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T13:44:33Z",
          "updatedAt": "2022-10-21T13:44:34Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nThe QUIC specification defines an optional keep alive process, see {{Section 5.3 of QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2022-10-21T13:44:33Z",
              "updatedAt": "2022-10-21T13:44:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Enc_C",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I'm fine with the proposed addition.",
          "createdAt": "2022-10-21T15:50:32Z",
          "updatedAt": "2022-10-21T15:50:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5EtJh9",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Looks good. A bit redundant with other parts, but does not hurt.",
          "createdAt": "2022-10-24T08:03:47Z",
          "updatedAt": "2022-10-24T08:03:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5EtKAm",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T08:04:11Z",
          "updatedAt": "2022-10-24T08:04:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5EtPYC",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T08:14:06Z",
          "updatedAt": "2022-10-24T08:14:07Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "> Implementations should jitter their timers to avoid sending Ping frames at the same time over different paths.\r\n\r\nDo we really need this last sentence or can we remove it?",
              "createdAt": "2022-10-24T08:14:07Z",
              "updatedAt": "2022-10-24T08:14:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Et1Mc",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T09:54:26Z",
          "updatedAt": "2022-10-24T09:54:26Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I'm ok with the previous parts.  We could remove the last sentence as it depends on the implementation.",
              "createdAt": "2022-10-24T09:54:26Z",
              "updatedAt": "2022-10-24T09:54:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EuQsQ",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T11:20:21Z",
          "updatedAt": "2022-10-24T11:20:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Eumu6",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T12:37:54Z",
          "updatedAt": "2022-10-24T12:37:55Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\non each of these paths before the idle timeout expires.\r\n```",
              "createdAt": "2022-10-24T12:37:54Z",
              "updatedAt": "2022-10-24T12:37:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 149,
      "id": "PR_kwDOGNtpaM5BTAft",
      "title": "First proposal to \"remove\" single packet number space option",
      "url": "https://github.com/quicwg/multipath/pull/149",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR removes the use of a single packet number space on multiple paths as a fully supported option. However, it currently doesn't remove it entirely.\r\nSpecifically, it moves the respective text for now into the appendix but still allows the reception of packets without a Connection ID on multiple validated paths, similarly as path migration is not strictly forbidden without connection ID.",
      "createdAt": "2022-10-21T15:46:36Z",
      "updatedAt": "2023-01-22T12:20:20Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "749aa03ec09471f0ba5b533ac540bfdec7ab8e6b",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-rm-spns",
      "headRefOid": "ebb1a36453eeda6c04d378c2b2b7d5878e756a06",
      "closedAt": "2023-01-22T12:20:20Z",
      "mergedAt": "2023-01-22T12:20:20Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "7ae9ca752468438613029fdb4d30d6197de13cb4"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema yes I also opened issue #152 for discussion!",
          "createdAt": "2022-10-24T08:21:51Z",
          "updatedAt": "2022-10-24T08:21:51Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I updated the PR and removed the appendix for SPNP. Further this PR threats the use of the multipath extension without CID as an error new text is the following:\r\n\r\n```\r\nIf the parameter is set to 1, both endpoints MUST use non-zero connection\r\nIDs. If an enable_multipath parameter set to 1 is received and the carrying packet\r\ndoes not contain a non-zero legnth connection, the receiver MUST treat this as a connection error of type\r\nTRANSPORT_PARAMETER_ERROR (specified in {{Section 20.1 of QUIC-TRANSPORT}})\r\nand close the connection.\r\n```",
          "createdAt": "2022-11-21T18:59:06Z",
          "updatedAt": "2022-11-21T18:59:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Enm-H",
          "commit": {
            "abbreviatedOid": "9b1efae"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:21:33Z",
          "updatedAt": "2022-10-21T16:21:33Z",
          "comments": [
            {
              "originalPosition": 291,
              "body": "```suggestion\r\n# Sending packets on multiple paths with zero length connection ID {#using-zero-length}\r\n```",
              "createdAt": "2022-10-21T16:21:33Z",
              "updatedAt": "2022-10-21T16:22:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EnnT7",
          "commit": {
            "abbreviatedOid": "9b1efae"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:22:43Z",
          "updatedAt": "2022-10-21T16:22:44Z",
          "comments": [
            {
              "originalPosition": 308,
              "body": "```suggestion\r\n{{ecn-handling}}.\r\n```",
              "createdAt": "2022-10-21T16:22:43Z",
              "updatedAt": "2022-10-21T16:22:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Ennze",
          "commit": {
            "abbreviatedOid": "4bb13a8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:24:16Z",
          "updatedAt": "2022-10-21T16:24:17Z",
          "comments": [
            {
              "originalPosition": 235,
              "body": "```suggestion\r\nthese packets MUST either be acknowledged using ACK_MP frames with packet number space ID 0,\r\n```",
              "createdAt": "2022-10-21T16:24:17Z",
              "updatedAt": "2022-10-21T16:24:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Enn9R",
          "commit": {
            "abbreviatedOid": "ba1146b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:24:50Z",
          "updatedAt": "2022-10-21T16:24:51Z",
          "comments": [
            {
              "originalPosition": 248,
              "body": "```suggestion\r\nHowever, even if packets without a Connection ID are successfully received\r\n```",
              "createdAt": "2022-10-21T16:24:50Z",
              "updatedAt": "2022-10-21T16:24:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EnoMS",
          "commit": {
            "abbreviatedOid": "dffb5e9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:25:35Z",
          "updatedAt": "2022-10-21T16:25:35Z",
          "comments": [
            {
              "originalPosition": 251,
              "body": "```suggestion\r\navoids large ACK frames and ambiguity in loss detection and RTT estimation\r\n```",
              "createdAt": "2022-10-21T16:25:35Z",
              "updatedAt": "2022-10-21T16:25:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EnqM1",
          "commit": {
            "abbreviatedOid": "dadca89"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:32:32Z",
          "updatedAt": "2022-10-21T16:32:32Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "```suggestion\r\nif only the source address or port are different or if a specific\r\n```",
              "createdAt": "2022-10-21T16:32:32Z",
              "updatedAt": "2022-10-21T16:32:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EnqVy",
          "commit": {
            "abbreviatedOid": "dadca89"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:33:01Z",
          "updatedAt": "2022-10-21T16:33:01Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "```suggestion\r\nThe path ID for 1-RTT packets is the sequence number of the Connection ID\r\n```",
              "createdAt": "2022-10-21T16:33:01Z",
              "updatedAt": "2022-10-21T16:33:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EnqbX",
          "commit": {
            "abbreviatedOid": "dadca89"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:33:19Z",
          "updatedAt": "2022-10-21T16:33:20Z",
          "comments": [
            {
              "originalPosition": 362,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2022-10-21T16:33:19Z",
              "updatedAt": "2022-10-21T16:33:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EtPTc",
          "commit": {
            "abbreviatedOid": "ab1cc20"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I don't think this is ready yet. We may need to agree on the broad lines first.",
          "createdAt": "2022-10-24T08:13:56Z",
          "updatedAt": "2022-10-24T08:13:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5G252x",
          "commit": {
            "abbreviatedOid": "1e719cb"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T18:57:19Z",
          "updatedAt": "2022-11-21T18:57:20Z",
          "comments": [
            {
              "originalPosition": 288,
              "body": "```suggestion\r\nas identified by the Path Identifier. However, an ACK_MP frame can be returned via either a\r\n```",
              "createdAt": "2022-11-21T18:57:20Z",
              "updatedAt": "2022-11-21T18:57:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5G27n_",
          "commit": {
            "abbreviatedOid": "849025f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T19:03:52Z",
          "updatedAt": "2022-11-21T19:03:52Z",
          "comments": [
            {
              "originalPosition": 287,
              "body": "```suggestion\r\nACK_MP frame (defined in {{ack-mp-frame}}) SHOULD be send on the same path\r\n```",
              "createdAt": "2022-11-21T19:03:52Z",
              "updatedAt": "2022-11-21T19:03:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5G273v",
          "commit": {
            "abbreviatedOid": "cde2cbc"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T19:04:49Z",
          "updatedAt": "2022-11-21T19:04:49Z",
          "comments": [
            {
              "originalPosition": 289,
              "body": "```suggestion\r\nas identified by the Path Identifier. However, an ACK_MP frame can be returned via a\r\ndifferent path, based on different strategies of sending ACK_MP frames.\r\n```",
              "createdAt": "2022-11-21T19:04:49Z",
              "updatedAt": "2022-11-21T19:04:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5G2-nm",
          "commit": {
            "abbreviatedOid": "eda6ba1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T19:14:58Z",
          "updatedAt": "2022-11-21T19:14:59Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "```suggestion\r\n  particular path.\r\n```",
              "createdAt": "2022-11-21T19:14:58Z",
              "updatedAt": "2022-11-21T19:14:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5KSaoj",
          "commit": {
            "abbreviatedOid": "d728ddb"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-12T19:19:41Z",
          "updatedAt": "2023-01-12T19:19:41Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "```suggestion\r\ndoes not contain a non-zero length connection ID, the receiver MUST treat this as a connection error of type\r\n```",
              "createdAt": "2023-01-12T19:19:41Z",
              "updatedAt": "2023-01-12T19:19:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5KVidg",
          "commit": {
            "abbreviatedOid": "1cb4df8"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Globally good to go, a few nits to fix before merging. Also, given the interoperability changes it involves, I suggest to already change the transport parameter value in this PR (see my specific comment below).",
          "createdAt": "2023-01-13T09:03:19Z",
          "updatedAt": "2023-01-13T09:48:57Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\ndue to a NAT rebinding), this is considered as a migration event and not\r\nas a new path.\r\n```",
              "createdAt": "2023-01-13T09:03:19Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 67,
              "body": "Maybe it can be addressed later, but given that the Path Identifier and the PNS ID are now always the same, we may simplify this section and only introduce one concept (i.e., the Path Identifier).",
              "createdAt": "2023-01-13T09:09:40Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 73,
              "body": "Given that we drop support for single packet number space and zero-length CID, we need to change the value of `enable_multipath`. Running a random generator gave me `0x0f739bbc1b666db9`, but we can of course choose another value (for instance, `0x0f739bbc1b666dXX` where `XX` is the draft version; the next version 04 of this document could use  `0x0f739bbc1b666d04`). The IANA table should be updated as well.",
              "createdAt": "2023-01-13T09:21:31Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 294,
              "body": "The added text conflicts with the latter one saying \"endpoints SHOULD use ACK_MP frames instead of ACK\", and I don't think receiving ACK frames to acknowledge path 0 is actually an issue. Maybe this would be better?\r\n```suggestion\r\nThe ACK_MP frame, as specified in {{ack-mp-frame}}, is used to\r\nacknowledge 1-RTT packets.\r\n```",
              "createdAt": "2023-01-13T09:27:01Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 306,
              "body": "Maybe clearer?\r\n```suggestion\r\nendpoints SHOULD use ACK_MP frames instead of ACK frames to acknowledge application\r\ndata packets, including 0-RTT packets, received on path ID 0 after the handshake concluded.\r\n```",
              "createdAt": "2023-01-13T09:34:01Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 318,
              "body": "No strong opinion here, but should the \"an ACK_MP frame can be returned\" be instead \"an ACK_MP frame MAY be returned\"?",
              "createdAt": "2023-01-13T09:35:42Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 337,
              "body": "```suggestion\r\nas specified in {{QUIC-TRANSPORT}}.  {{Section 19 of QUIC-TRANSPORT}}\r\n```",
              "createdAt": "2023-01-13T09:36:16Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 412,
              "body": "We can of course delegate this on a subsequent PR, but I think we should get rid of the `Identifier Type` for the PATH_ABANDON and PATH_STATUS frames. Also, I wonder it the value 1 should rather be the default (given #137).",
              "createdAt": "2023-01-13T09:38:21Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5KbpsX",
          "commit": {
            "abbreviatedOid": "1cb4df8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-14T12:53:01Z",
          "updatedAt": "2023-01-14T12:53:02Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Yes, I was planning to raise a separate issue and PR after this one is merged. I think that would be cleaner.",
              "createdAt": "2023-01-14T12:53:02Z",
              "updatedAt": "2023-01-14T12:53:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Kbptz",
          "commit": {
            "abbreviatedOid": "1cb4df8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-14T12:53:40Z",
          "updatedAt": "2023-01-14T12:53:41Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "Yes, I agree that we need to change. Just need to decide which number.",
              "createdAt": "2023-01-14T12:53:41Z",
              "updatedAt": "2023-01-18T14:31:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5KbpyN",
          "commit": {
            "abbreviatedOid": "1cb4df8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-14T12:55:40Z",
          "updatedAt": "2023-01-14T12:55:41Z",
          "comments": [
            {
              "originalPosition": 318,
              "body": "No, the normative part is the active part (\"SHOULD send\"). This other sentence should not be normative because it's just explaining that this can happen and needs to be considered.",
              "createdAt": "2023-01-14T12:55:41Z",
              "updatedAt": "2023-01-14T12:55:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Kbpz4",
          "commit": {
            "abbreviatedOid": "1cb4df8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-14T12:56:28Z",
          "updatedAt": "2023-01-14T12:56:29Z",
          "comments": [
            {
              "originalPosition": 412,
              "body": "Yes, I was also planning to raise a separate issue and PR on this one after the merge.",
              "createdAt": "2023-01-14T12:56:28Z",
              "updatedAt": "2023-01-14T12:56:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5LLtCd",
          "commit": {
            "abbreviatedOid": "13e6610"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-19T09:00:04Z",
          "updatedAt": "2023-01-19T09:00:04Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "Just committed 13e6610576 to address this.",
              "createdAt": "2023-01-19T09:00:04Z",
              "updatedAt": "2023-01-19T09:00:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5LLtQz",
          "commit": {
            "abbreviatedOid": "13e6610"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "With my added commit (13e661057), LGTM. @mirjak, could you just double-check it? If this is ok, I think we can merge.",
          "createdAt": "2023-01-19T09:00:41Z",
          "updatedAt": "2023-01-19T09:03:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5LKt3X",
          "commit": {
            "abbreviatedOid": "13e6610"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-19T04:30:01Z",
          "updatedAt": "2023-01-20T04:35:55Z",
          "comments": [
            {
              "originalPosition": 356,
              "body": "The figure needs to be modified. Now we only have one path ID type, which I think is cleaner. I will submit another PR to update the figure accordingly once this PR is merged",
              "createdAt": "2023-01-19T04:30:01Z",
              "updatedAt": "2023-01-20T04:35:55Z"
            },
            {
              "originalPosition": 50,
              "body": "I agree. Now we remove zero-length CID and the path ID's definition is more clear and we don't need to consider alternative definitions.",
              "createdAt": "2023-01-19T04:34:26Z",
              "updatedAt": "2023-01-20T04:35:55Z"
            },
            {
              "originalPosition": 67,
              "body": "> Maybe it can be addressed later, but given that the Path Identifier and the PNS ID are now always the same, we may simplify this section and only introduce one concept (i.e., the Path Identifier).\r\n\r\nI agree. This will further simplify the concepts people need to digest.",
              "createdAt": "2023-01-19T04:35:39Z",
              "updatedAt": "2023-01-20T04:35:55Z"
            },
            {
              "originalPosition": 317,
              "body": "SHOULD be send -> SHOULD be sent",
              "createdAt": "2023-01-19T04:40:35Z",
              "updatedAt": "2023-01-20T04:35:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5LYDAM",
          "commit": {
            "abbreviatedOid": "ebb1a36"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Yes, I approve. It looks very much like I remember of my first review of this PR, with nice fixes.",
          "createdAt": "2023-01-21T06:39:19Z",
          "updatedAt": "2023-01-21T06:39:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 156,
      "id": "PR_kwDOGNtpaM5IRppS",
      "title": "Remove identifier type",
      "url": "https://github.com/quicwg/multipath/pull/156",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #155",
      "createdAt": "2023-01-22T12:37:53Z",
      "updatedAt": "2023-01-31T03:16:53Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "7ae9ca752468438613029fdb4d30d6197de13cb4",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-9",
      "headRefOid": "a663f5acf6a396f12811ca3fd4c625f62c3cd161",
      "closedAt": "2023-01-31T03:16:53Z",
      "mergedAt": "2023-01-31T03:16:53Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9e53ad51ce2762555bb18f0f73f93a310b4947fb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5LYr2d",
          "commit": {
            "abbreviatedOid": "62f3452"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-22T12:39:41Z",
          "updatedAt": "2023-01-22T12:39:42Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "```suggestion\r\nPath Identifier:\r\n```",
              "createdAt": "2023-01-22T12:39:41Z",
              "updatedAt": "2023-01-22T12:39:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5LYr24",
          "commit": {
            "abbreviatedOid": "62f3452"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-22T12:39:53Z",
          "updatedAt": "2023-01-22T12:39:53Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "```suggestion\r\non any path, not only the path identified by the Packet Number Space\r\n```",
              "createdAt": "2023-01-22T12:39:53Z",
              "updatedAt": "2023-01-22T12:39:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Lam1N",
          "commit": {
            "abbreviatedOid": "f493cc8"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I agree that we could simplify the Path Identifier field and remove the type of it, but it's a little confusing using both Path Identifier and PNS Identifier in the PATH_STATUS / PATH_ABANDON Frame format.\r\n\r\nI suggest using Path Identifier(i) in PATH_STATUS / PATH_ABANDON Frame, using Packet Number Space Identifier in ACK_MP and 1-RTT packets.",
          "createdAt": "2023-01-23T09:43:40Z",
          "updatedAt": "2023-01-23T10:11:21Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "_Path Identifier (i),_ ",
              "createdAt": "2023-01-23T10:00:35Z",
              "updatedAt": "2023-01-23T10:11:21Z"
            },
            {
              "originalPosition": 98,
              "body": "_Path Identifier (i),_",
              "createdAt": "2023-01-23T10:00:52Z",
              "updatedAt": "2023-01-23T10:11:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5La3LP",
          "commit": {
            "abbreviatedOid": "f493cc8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T10:26:05Z",
          "updatedAt": "2023-01-23T10:26:05Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "That was an oversight. Fixed now! Thanks!",
              "createdAt": "2023-01-23T10:26:05Z",
              "updatedAt": "2023-01-23T10:26:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5LbQrF",
          "commit": {
            "abbreviatedOid": "a663f5a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good to me",
          "createdAt": "2023-01-23T11:39:06Z",
          "updatedAt": "2023-01-23T11:39:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 161,
      "id": "PR_kwDOGNtpaM5I1LcG",
      "title": "Move most text of former PNS/CID section to where it belongs",
      "url": "https://github.com/quicwg/multipath/pull/161",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is the first PR of 3-4 editorial passes I'm planning to do. This first PR only move existing text into the right place. I did not change anything in the text (except the section heading).\r\n\r\nThe next round will move some sections entirely (e.g. section on congestion control, RTT calculation, packet scheduling could maybe go into the implementation considerations) and then I'm planning to do a full edit pass at the end to check consistency. Would be great if we could review and merge this one soon, so I can move on with the next one. I'm keeping those PRs separately so it is easier to follow the changes.",
      "createdAt": "2023-01-30T16:12:24Z",
      "updatedAt": "2023-02-01T09:24:26Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "7ae9ca752468438613029fdb4d30d6197de13cb4",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-10",
      "headRefOid": "90ca3345a1c3b93abe7f2c796285c81b53c6fa64",
      "closedAt": "2023-02-01T09:24:26Z",
      "mergedAt": "2023-02-01T09:24:25Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "528e7f076203f05db2be891a6fa026b478e91bb4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5MNA6S",
          "commit": {
            "abbreviatedOid": "90ca334"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Basically very useful restructure. Looks good to me. ",
          "createdAt": "2023-02-01T06:08:29Z",
          "updatedAt": "2023-02-01T06:15:56Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I'd suggest that we only keep Line 192 to 194, it's useful for readers to understand the initial path identifier.\r\nLine 195 to 197 is very similar with the definition of Path Identifier in Line 175 to 177.\r\n",
              "createdAt": "2023-02-01T06:08:30Z",
              "updatedAt": "2023-02-01T06:15:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5MNv_5",
          "commit": {
            "abbreviatedOid": "90ca334"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Loos good to me:)",
          "createdAt": "2023-02-01T08:56:45Z",
          "updatedAt": "2023-02-01T08:56:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5MN1sp",
          "commit": {
            "abbreviatedOid": "90ca334"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T09:11:13Z",
          "updatedAt": "2023-02-01T09:11:14Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I'm planning to do that in a separate PR when we also remove the PNS ID (and only have path ID).",
              "createdAt": "2023-02-01T09:11:13Z",
              "updatedAt": "2023-02-01T09:11:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5MN6cS",
          "commit": {
            "abbreviatedOid": "90ca334"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T09:22:54Z",
          "updatedAt": "2023-02-01T09:22:54Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "That's ok.",
              "createdAt": "2023-02-01T09:22:54Z",
              "updatedAt": "2023-02-01T09:22:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 163,
      "id": "PR_kwDOGNtpaM5JMg88",
      "title": "Move sections to impl consideration and new section heading on MPNSes",
      "url": "https://github.com/quicwg/multipath/pull/163",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Restructuring part II:\r\n- This moves section on congestion control, packet scheduling, RTT calculation, and retransmission into the implementation guidance. These section don't contain normative language but only guidance (expect the congestion control one but that should probably be removed or potentially moved, see issue #162). None of the text is changed.\r\n- Add a new section heading on \"multipath operation with MPNSes\" that clusters the sections on ack handling and protection as those things are impacted (normatively) by the introduction of MPNSes. No changes in the text accept some intro sentences to this new section heading.",
      "createdAt": "2023-02-03T11:39:09Z",
      "updatedAt": "2023-02-07T15:57:26Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "528e7f076203f05db2be891a6fa026b478e91bb4",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-11",
      "headRefOid": "e61dbe79caa2692872e1396e5d982646b5872bf0",
      "closedAt": "2023-02-07T15:57:25Z",
      "mergedAt": "2023-02-07T15:57:25Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5MnRUY",
          "commit": {
            "abbreviatedOid": "2fa205f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Minor typos, otherwise LGTM.",
          "createdAt": "2023-02-06T14:55:39Z",
          "updatedAt": "2023-02-06T14:58:02Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nThe QUIC multipath extension uses different packet number spaces for each path.\r\n```",
              "createdAt": "2023-02-06T14:55:39Z",
              "updatedAt": "2023-02-06T14:58:03Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nthe ACK frame as well as packet protection as described in the following subsections.\r\n```",
              "createdAt": "2023-02-06T14:56:08Z",
              "updatedAt": "2023-02-06T14:58:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5MnSsR",
          "commit": {
            "abbreviatedOid": "2fa205f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-06T14:58:30Z",
          "updatedAt": "2023-02-06T14:58:31Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n- PATH_STATUS frame to express a preference in path usage\r\n```",
              "createdAt": "2023-02-06T14:58:30Z",
              "updatedAt": "2023-02-06T14:58:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 165,
      "id": "PR_kwDOGNtpaM5J83z0",
      "title": "Fix path closure example with path ID",
      "url": "https://github.com/quicwg/multipath/pull/165",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #164",
      "createdAt": "2023-02-14T14:39:57Z",
      "updatedAt": "2023-02-22T03:07:37Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-12",
      "headRefOid": "74a1e54d828779a9a5a4a245ed50d7be0cd8d48d",
      "closedAt": "2023-02-22T03:07:37Z",
      "mergedAt": "2023-02-22T03:07:37Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "35be46139cae685f894ae57aa054725ed87977bc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5NbWRE",
          "commit": {
            "abbreviatedOid": "35c5cc8"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I would also suggest to slightly update the text related to the `Path ID` field of the PATH_ABANDON and PATH_STATUS frames to indicate it refers to the sender's Path ID.",
          "createdAt": "2023-02-15T08:30:40Z",
          "updatedAt": "2023-02-15T08:32:34Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nnumber of the DCID it uses for sending packets over that path,\r\n```",
              "createdAt": "2023-02-15T08:30:40Z",
              "updatedAt": "2023-02-15T08:32:34Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nthe sequence number of the DCID it uses to send over that path as path\r\n```",
              "createdAt": "2023-02-15T08:31:07Z",
              "updatedAt": "2023-02-15T08:32:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5NwK9U",
          "commit": {
            "abbreviatedOid": "35c5cc8"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-02-18T04:06:27Z",
          "updatedAt": "2023-02-18T04:09:14Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\n1-RTT[U]: DCID=S3 RETIRE_CONNECTION_ID[2], ACK_MP[Seq=1, PN=Y] ->\r\n```\r\nClient wants to retire DCID S2, so the sequence number field in the retire_connection_ID should be 2.",
              "createdAt": "2023-02-18T04:06:27Z",
              "updatedAt": "2023-02-18T04:09:14Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n <- 1-RTT[V]: DCID=C2 RETIRE_CONNECTION_ID[1], ACK_MP[Seq=3, PN=U]\r\n```\r\nServer wants to retire DCID C1, so the sequence number field in the retire_connection_ID should be 1.",
              "createdAt": "2023-02-18T04:09:03Z",
              "updatedAt": "2023-02-18T04:09:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N7IJ_",
          "commit": {
            "abbreviatedOid": "35c5cc8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T12:50:57Z",
          "updatedAt": "2023-02-21T12:50:57Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Yes, I guess that was wrong in the example.",
              "createdAt": "2023-02-21T12:50:57Z",
              "updatedAt": "2023-02-21T12:50:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N_WYp",
          "commit": {
            "abbreviatedOid": "74a1e54"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-02-22T03:03:55Z",
          "updatedAt": "2023-02-22T03:03:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 166,
      "id": "PR_kwDOGNtpaM5J87SE",
      "title": "Do not use normative language for congestion control",
      "url": "https://github.com/quicwg/multipath/pull/166",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "as this is already stated normatively in RFC900.\r\n\r\nfixes #162",
      "createdAt": "2023-02-14T14:50:01Z",
      "updatedAt": "2023-02-22T03:07:49Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-13",
      "headRefOid": "1d27014ebbb83e391a4a620030d4dcdcf6074b69",
      "closedAt": "2023-02-22T03:07:49Z",
      "mergedAt": "2023-02-22T03:07:49Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "d518bf502455639efa82cfacd239b63f9c845602"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5NWqeY",
          "commit": {
            "abbreviatedOid": "e6cef4f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-14T15:03:42Z",
          "updatedAt": "2023-02-14T15:03:42Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nWhen the QUIC multipath extension is used, senders manage per-path\r\n```",
              "createdAt": "2023-02-14T15:03:42Z",
              "updatedAt": "2023-02-14T15:03:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5NWqiO",
          "commit": {
            "abbreviatedOid": "e6cef4f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-14T15:03:49Z",
          "updatedAt": "2023-02-14T15:03:50Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nThis means a sender is not allowed to send more data on a given path\r\n```",
              "createdAt": "2023-02-14T15:03:49Z",
              "updatedAt": "2023-02-14T15:03:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5NbX7S",
          "commit": {
            "abbreviatedOid": "d5abd04"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-02-15T08:35:05Z",
          "updatedAt": "2023-02-15T08:35:12Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nThis means a sender is not allowed sending more data on a given path\r\n```",
              "createdAt": "2023-02-15T08:35:05Z",
              "updatedAt": "2023-02-15T08:35:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N7Gbd",
          "commit": {
            "abbreviatedOid": "71117bc"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T12:45:57Z",
          "updatedAt": "2023-02-21T12:45:58Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nThis means a sender is not allowed to send more data on a given path\r\n```",
              "createdAt": "2023-02-21T12:45:58Z",
              "updatedAt": "2023-02-21T12:45:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N_WyY",
          "commit": {
            "abbreviatedOid": "1d27014"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-02-22T03:06:49Z",
          "updatedAt": "2023-02-22T03:06:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 167,
      "id": "PR_kwDOGNtpaM5J9H9d",
      "title": "Remove PNS ID",
      "url": "https://github.com/quicwg/multipath/pull/167",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #154",
      "createdAt": "2023-02-14T15:22:02Z",
      "updatedAt": "2023-02-22T07:57:17Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "d518bf502455639efa82cfacd239b63f9c845602",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-14",
      "headRefOid": "c6acdac98bef3bd346be5df344ab2d8d85a9b745",
      "closedAt": "2023-02-22T07:57:16Z",
      "mergedAt": "2023-02-22T07:57:16Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "19559ddc93c93503e6d22ab8a98d482ae01df547"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5NW1Zz",
          "commit": {
            "abbreviatedOid": "1d86e24"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-14T15:24:21Z",
          "updatedAt": "2023-02-14T15:24:22Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n  processed with the path ID 0. For 1-RTT packets, the path ID is the\r\n```",
              "createdAt": "2023-02-14T15:24:21Z",
              "updatedAt": "2023-02-14T15:24:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5NbYbF",
          "commit": {
            "abbreviatedOid": "9d5d455"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Sounds good.",
          "createdAt": "2023-02-15T08:36:27Z",
          "updatedAt": "2023-02-15T08:40:11Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\n  in multipath control frames (e.g., PATH_ABANDON frame) to identify\r\n```",
              "createdAt": "2023-02-15T08:36:27Z",
              "updatedAt": "2023-02-15T08:40:12Z"
            },
            {
              "originalPosition": 63,
              "body": "```suggestion\r\nThe Path ID is used to distinguish packet number spaces for different\r\n```",
              "createdAt": "2023-02-15T08:37:41Z",
              "updatedAt": "2023-02-15T08:40:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N_obK",
          "commit": {
            "abbreviatedOid": "c6acdac"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The conflict was solved. LGTM.",
          "createdAt": "2023-02-22T04:56:37Z",
          "updatedAt": "2023-02-22T04:56:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 168,
      "id": "PR_kwDOGNtpaM5KU-iM",
      "title": "Clarify supported scenarios",
      "url": "https://github.com/quicwg/multipath/pull/168",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #159.",
      "createdAt": "2023-02-20T10:02:44Z",
      "updatedAt": "2023-02-22T05:02:31Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "ip-addresses",
      "headRefOid": "c8fb94520569292e0e6be171442a8bb938bbcc01",
      "closedAt": "2023-02-22T05:02:30Z",
      "mergedAt": "2023-02-22T05:02:30Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "5be2002035635fc6b021ebc3cf90b0267aef3fb0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5N7EAS",
          "commit": {
            "abbreviatedOid": "c8fb945"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-21T12:38:46Z",
          "updatedAt": "2023-02-21T12:38:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5N_mg2",
          "commit": {
            "abbreviatedOid": "c8fb945"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-22T04:43:19Z",
          "updatedAt": "2023-02-22T04:43:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5N_pVT",
          "commit": {
            "abbreviatedOid": "c8fb945"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-02-22T05:02:25Z",
          "updatedAt": "2023-02-22T05:02:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 171,
      "id": "PR_kwDOGNtpaM5Kbjcy",
      "title": "What happens when a CID is retired and no new CID is available anymore",
      "url": "https://github.com/quicwg/multipath/pull/171",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-02-21T13:33:52Z",
      "updatedAt": "2023-03-06T15:33:38Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-15",
      "headRefOid": "f09feefc1928730375f660757330fae35c515f0b",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "After author discussion: we need to also add a sentence about control frames",
          "createdAt": "2023-03-03T16:13:29Z",
          "updatedAt": "2023-03-03T16:13:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5N8CDw",
          "commit": {
            "abbreviatedOid": "cd1c6ac"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T14:49:29Z",
          "updatedAt": "2023-02-21T14:49:30Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nE.g this can happen if the Connection ID issuer requests retirement of a\r\n```",
              "createdAt": "2023-02-21T14:49:29Z",
              "updatedAt": "2023-02-21T14:49:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N_qTC",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-22T05:08:45Z",
          "updatedAt": "2023-02-22T05:08:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5OATbw",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "We definitely need to add some text to better explain what happens in such cases, but I think we need to be a bit clearer on the implicit path closure case (as we may want to explicitly close an available path before idle timeout).",
          "createdAt": "2023-02-22T08:04:22Z",
          "updatedAt": "2023-02-22T08:11:56Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nThis can happen if, e.g., the Connection ID issuer requests retirement of a\r\n```",
              "createdAt": "2023-02-22T08:04:22Z",
              "updatedAt": "2023-02-22T08:11:56Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nConnection ID using the Retire Prior To field in the NEW_CONNECTION_ID frame.\r\n```",
              "createdAt": "2023-02-22T08:04:34Z",
              "updatedAt": "2023-02-22T08:11:56Z"
            },
            {
              "originalPosition": 15,
              "body": "I'm not sure that the endpoint \"has to wait\" the idle timeout to close the path. I could also send a PATH_ABANDON to explicitly close the path, right? Instead, do we want to state here that an inactivity larger than the idle timeout implies an implicit path closure?",
              "createdAt": "2023-02-22T08:08:35Z",
              "updatedAt": "2023-02-22T08:11:56Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nthe path. If another active path is available, the enpoint can re-activate\r\n```",
              "createdAt": "2023-02-22T08:08:46Z",
              "updatedAt": "2023-02-22T08:11:56Z"
            },
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nthe path before the timer expires if a new Connection ID gets issued\r\n```",
              "createdAt": "2023-02-22T08:08:56Z",
              "updatedAt": "2023-02-22T08:11:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OAYBR",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-22T08:17:09Z",
          "updatedAt": "2023-02-22T08:17:09Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Currently it can't send an PATH_ABANDON because if we don't have a CID we don't have a valid path ID.",
              "createdAt": "2023-02-22T08:17:09Z",
              "updatedAt": "2023-02-22T08:17:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OAZuP",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-22T08:21:18Z",
          "updatedAt": "2023-02-22T08:21:19Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Oh indeed, I went too quick on this one :-)",
              "createdAt": "2023-02-22T08:21:18Z",
              "updatedAt": "2023-02-22T08:21:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OAZ75",
          "commit": {
            "abbreviatedOid": "3ce3fdd"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-22T08:21:54Z",
          "updatedAt": "2023-02-22T08:21:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5OAbfE",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-22T08:26:08Z",
          "updatedAt": "2023-02-22T08:26:09Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I do mention this issue in #169",
              "createdAt": "2023-02-22T08:26:09Z",
              "updatedAt": "2023-02-22T08:26:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OA2m3",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-22T09:31:40Z",
          "updatedAt": "2023-02-22T09:31:41Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Actually we could say that the endpoint should first send the path abandoned frame and then the retire CID frame. However, those frames probably don't have to be processed in order and we need to address issue #137 properly. Or alternative you have to wait until the path abandoned frame is ack'ed and then send the retire CID frame but that would introduce a delay. Not sure how bad that is.",
              "createdAt": "2023-02-22T09:31:40Z",
              "updatedAt": "2023-02-22T09:31:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEdf7",
          "commit": {
            "abbreviatedOid": "3ce3fdd"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:32:54Z",
          "updatedAt": "2023-03-06T15:32:55Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nthis path and is not able to send control frames associated to this path anymore.\r\nHowever, it can still acknowledge packets received on the path, by sending ACK_MP frames \r\non another path, if available. If no data is received on this path, the idle time-out will close\r\nthe path. The endpoint can re-activate the path if a new Connection ID gets issued\r\nby its peer over another path before the idle timer expires.\r\n```",
              "createdAt": "2023-03-06T15:32:54Z",
              "updatedAt": "2023-03-06T15:32:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 172,
      "id": "PR_kwDOGNtpaM5Kb8XD",
      "title": "Clarifications on connection migration",
      "url": "https://github.com/quicwg/multipath/pull/172",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #160\r\n\r\nAs I added this text into the implementation consideration section, I on purpose did not use normative language. However, we might want to double check that the normative language we used elsewhere in the document is covering this appropriately.",
      "createdAt": "2023-02-21T14:46:54Z",
      "updatedAt": "2023-03-06T20:06:11Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-16",
      "headRefOid": "13477ea90d7c0ca56748cfe01166c7fb1ad3392e",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5OcD4R",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I don't think that I agree.",
          "createdAt": "2023-02-27T16:37:51Z",
          "updatedAt": "2023-02-27T16:38:14Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "I don't think we need this. I would like to ensure that the handling of paths is pretty much the same as RFC 9000, at least when we have only one path. NAT rebinding is a key scenario in RFC 9000, and we should keep it as is. In particular, if we see a packet arrives with a CID already in use on path N but a different 4 tuple, we should absolutely treat that as NAT rebinding.",
              "createdAt": "2023-02-27T16:37:51Z",
              "updatedAt": "2023-02-27T16:38:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OcUoM",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T17:16:50Z",
          "updatedAt": "2023-02-27T17:16:50Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "First, I don't think it is true that this is not aligned with RFC9000 because there is always just one path in RFC9000. However, the problem is that in RFC9000 both ends don't need a common understanding of the path but now they do, so we need to address this. In our definition in this draft every 4-tuple is a different path and sticking to that makes it less complicated. The problem with NAT rebinding is that only one end see a new 4-tuple. As such we need an explicit signal to tell the other end to create a new path. I propose to simple use path validation for this (to keep change minimal).\r\n\r\nIf you are concerned about resetting the congestion window, we can say that the new path can be initialisierend with the cc values from the old path if only the source port changes.",
              "createdAt": "2023-02-27T17:16:50Z",
              "updatedAt": "2023-02-27T17:16:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OgINu",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't think the added text is right.",
          "createdAt": "2023-02-28T08:51:00Z",
          "updatedAt": "2023-02-28T09:20:59Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nIn this case the server performs path validation (see {{Section 9 of QUIC-TRANSPORT}})\r\n```",
              "createdAt": "2023-02-28T08:51:00Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            },
            {
              "originalPosition": 10,
              "body": "I'm not sure the client is always expected to change its CID when experiencing NAT rebinding, as by definition it does not observe any 4-tuple change (while the server does, of course). In particular, I'm not sure how the client could even notice that. Relying on the reception of a PATH_CHALLENGE after some time is probably too reactive, as a server may periodically probe its network paths (i.e., receiving a path challenge from the server does not necessarily indicates it saw a NAT rebinding).",
              "createdAt": "2023-02-28T08:55:18Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nEven is the path validation is caused by a migration event, when\r\n```",
              "createdAt": "2023-02-28T08:56:02Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            },
            {
              "originalPosition": 15,
              "body": "I don't think this is right. The reception of a new PATH_CHALLENGE should not create a new path, especially if the perceived 4-tuple remains the same.",
              "createdAt": "2023-02-28T08:57:53Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            },
            {
              "originalPosition": 17,
              "body": "I definitely agree with the common share view on the number of active paths, but I will relax this that \"within some time (ideally 1 RTT), end hosts should eventually have the same view\".\r\n\r\nDuring a NAT rebinding event, if the CID previously used remains the same, the server can consider this new 4-tuple as the updated 4-tuple of the previously used path. However, if both the 4-tuple and the CID change, the server will interpret this as a brand new path (while the client does not). The server would then maintain a no-more functioning path (the old 4-tuple), which is not desirable.",
              "createdAt": "2023-02-28T09:09:25Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            },
            {
              "originalPosition": 34,
              "body": "Also, I don't think we should consider two different CIDs using the same perceived 4-tuple as two different paths. This should just be considered as a CID rotation over a given path. We could specify at some place that \"the sequence number of the DCID used over a path MUST be greater or equal to the one currently in use\" to avoid flipping the CID on a path.\r\n\r\nAnd as mentioned in a previous comment, I don't think we should consider the reception of a PATH_CHALLENGE as an automatic path creation, as end hosts may probe existing paths. It also raises the concerns of an end hosts sending multiple PATH_CHALLENGEs over a path to cope with possible packet losses (these should not be considered as multiple paths).",
              "createdAt": "2023-02-28T09:19:54Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OhKWr",
          "commit": {
            "abbreviatedOid": "2ee092d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-28T11:23:23Z",
          "updatedAt": "2023-02-28T11:23:23Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "My thinking was that if you receive a path challenge from the server, you should treat this as a \"request\" to open a new path and thus use a new CID even if the 4-tuple seem to correspond to an existing path.\r\n\r\nHowever, thinking further I guess you also have to close the existing path at the same time as you should not have two paths with the same 4-tuple. Thus the client MUST send a path abandon frame for the old path.",
              "createdAt": "2023-02-28T11:23:23Z",
              "updatedAt": "2023-02-28T11:23:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OhOAb",
          "commit": {
            "abbreviatedOid": "2ee092d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-28T11:34:08Z",
          "updatedAt": "2023-02-28T11:35:44Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I think this is something we need to decide.\r\n\r\nThe problem is that the server sees a new 4-tuple but the client not, so we need to make clear if this creates a new path or not in such a way that both ends come to the same conclusion.\r\n\r\nYou could also say it's not a new path if on server side the 4-tuple changes but not the CID and on client side a path challenge (with new CID) is received on an existing 4-tuple. However, you still need to reset congestion control in most cases, so I thought it was easier to just create a new path. ",
              "createdAt": "2023-02-28T11:34:08Z",
              "updatedAt": "2023-02-28T11:35:44Z"
            },
            {
              "originalPosition": 17,
              "body": "If both the 4-tuple and the CID changes, the client should send a path challenge in that packet to explicitly open a new path. Otherwise the server should probably ignore that packet as it can't associate it to an exiting path. Maybe something we should also spell out more clearly.",
              "createdAt": "2023-02-28T11:35:38Z",
              "updatedAt": "2023-02-28T11:35:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Op180",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T10:57:26Z",
          "updatedAt": "2023-03-01T10:57:26Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Actually ignoring might not be right to address this change where you restart after an idle period with a new CID and then also the NAT rebinding happens... however, it would be the same procedure as in the case when the CID not changes after a NAT rebinding: the server sends a path challenge frame and that would be the signal for the client to assign a new path and use a new CID + close the old path on the presumedly same 4-tuple from the client's point of view.",
              "createdAt": "2023-03-01T10:57:26Z",
              "updatedAt": "2023-03-01T10:57:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O5s2h",
          "commit": {
            "abbreviatedOid": "2ee092d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T12:50:59Z",
          "updatedAt": "2023-03-03T12:50:59Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "And you still need to address the case where both the CID and the 4-tuple changes. As you can't decide to which existing path you should assign this packet, I guess you have to assume it's a new path. Therefore it better if the client also opens a new path when it received the path challenge and explicitly closes the old path. ",
              "createdAt": "2023-03-03T12:50:59Z",
              "updatedAt": "2023-03-03T12:50:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PFNE1",
          "commit": {
            "abbreviatedOid": "13477ea"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:58:37Z",
          "updatedAt": "2023-03-06T16:58:37Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I updated the text but I'm not really happy here. The server has to assume a new path if it can't associate a packet with new CID and new 4-tuple to an existing path but it might still try to use the old path to send data. Those packets will then be lost and it takes a timeout to detect that this is a the case. Isn't there a way for the client to say: ups I received a path validation even though I din't know my address change, so please don't send data using this old CID anymore because it's actually the same path...?",
              "createdAt": "2023-03-06T16:58:37Z",
              "updatedAt": "2023-03-06T16:58:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PF3Qw",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T18:08:39Z",
          "updatedAt": "2023-03-06T18:08:39Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "We should not associate a state change with receiving a path challenge. Path challenges can be sent at any time to verify continuity.",
              "createdAt": "2023-03-06T18:08:39Z",
              "updatedAt": "2023-03-06T18:08:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PF5a0",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T18:12:45Z",
          "updatedAt": "2023-03-06T18:12:45Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "The node that renewed the CID will deduce the path change from invoming traffic on same (incoming) CID and new 4-tuple. It can at any point abandon the old path or retire the old CID.",
              "createdAt": "2023-03-06T18:12:45Z",
              "updatedAt": "2023-03-06T18:12:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGC_x",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T18:36:49Z",
          "updatedAt": "2023-03-06T18:36:50Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "The problem is that after removing the type we used the sender\u2019s cid in the abandon frame and then this doesn\u2019t work as the client only sees one path. However I think we need to fix that an then recommend to send an abandon frame for the old received cid.",
              "createdAt": "2023-03-06T18:36:49Z",
              "updatedAt": "2023-03-06T18:36:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGXeF",
          "commit": {
            "abbreviatedOid": "13477ea"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I don't think that this is ready. I would suggest to not have a migration section, but instead have two sections for NAT Rebinding and CID renewal.",
          "createdAt": "2023-03-06T19:36:24Z",
          "updatedAt": "2023-03-06T20:06:10Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "I don't understand what is meant by \"As such a sole change of the Connection\r\nID without any change in the address does indiacte a path.\" Maybe remove that part.",
              "createdAt": "2023-03-06T19:36:24Z",
              "updatedAt": "2023-03-06T20:06:11Z"
            },
            {
              "originalPosition": 15,
              "body": "Migration in RFC 9000 means \"move from sending and receiving on path 1 to sending and receiving on path 2\". I think that multipath implementation just replaces the RFC 9000 concept to \"migration\", replacing it by a multiphase process in which path 2 is explicitly tried and validated, and then path 1 might be kept going, or might be explicitly abandoned if not useful any more.\r\n\r\nWe are discussing here two exceptions to that process: NAT Rebinding, and CID renewal. Mabe we should make that into two sections, instead of a single migration section.",
              "createdAt": "2023-03-06T20:04:38Z",
              "updatedAt": "2023-03-06T20:06:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 173,
      "id": "PR_kwDOGNtpaM5KcCTJ",
      "title": "Clarify path close and waiting for at least 3 PTOs",
      "url": "https://github.com/quicwg/multipath/pull/173",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current text says that one has to wait for a the retire frame or 3 PTOs. However (as also indicated in the states figure) this should be at least 3 PTOs. This PR fixes this inconsistency. Further is add a reference to the definition to PTO and replaces RTO with PTO where the wrong term is used. I believe all these fixes address straightforward mistakes, however, if discussion is needed, we can of course also open an issue.",
      "createdAt": "2023-02-21T15:03:53Z",
      "updatedAt": "2023-03-03T12:54:54Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-17",
      "headRefOid": "483499a5503ff6cfd1df938674e3dea480058981",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5N8Zg_",
          "commit": {
            "abbreviatedOid": "d4494be"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T15:37:01Z",
          "updatedAt": "2023-02-21T15:37:01Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nThis is inline with the requirement of {{Section 10.2 of QUIC-TRANSPORT}}\r\n```",
              "createdAt": "2023-02-21T15:37:01Z",
              "updatedAt": "2023-02-21T15:37:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N9yge",
          "commit": {
            "abbreviatedOid": "fab7d7d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T19:26:57Z",
          "updatedAt": "2023-02-21T19:26:58Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nframe for the used connection IDs but at least three times the current\r\n```",
              "createdAt": "2023-02-21T19:26:58Z",
              "updatedAt": "2023-02-21T19:26:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OPYWf",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good to me.",
          "createdAt": "2023-02-24T07:26:19Z",
          "updatedAt": "2023-02-24T07:26:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5OXQJ7",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-02-26T19:35:17Z",
          "updatedAt": "2023-02-26T19:35:52Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "This does not read very well: \"SHOULD wait for the reception of the RETIRE_CONNECTION_ID\r\nframe for the used connection IDs but at least three times the current\r\nProbe Timeout (PTO) interval as defined in {{Section 6.2. of QUIC-RECOVERY}}.\" I don't know how to interpret it.\r\n\r\nI think what you mean is: \"the receiver of a PATH_ABANDON frame SHOULD NOT release its resources\r\nimmediately, but SHOULD wait for at least 3 RTOs after the last time a packet was sent using the corresponding CID or until it receives a RETIRE_CONNECTION_ID frame for that CID, whichever happens sooner.\"\r\n\r\nThen there is the separate question of the sender behavior. I think we should says something like: \"Nodes that Abandon a PATH SHOULD wait for 3 RTOs before sending a RETIRE_CONNECTION_ID frame for the corresponding CID. However, they MAY issue the RETIRE_CONNECTION_ID frame sooner, for example because of resource constraints or because the peer asked to retire all connection identifier before a specific sequence number. This may cause the peer node to conclude that no acknowledgement will be received for packets sent with that CID.\"\r\n\r\n",
              "createdAt": "2023-02-26T19:35:17Z",
              "updatedAt": "2023-02-26T19:35:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OZrLc",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T10:59:14Z",
          "updatedAt": "2023-02-27T10:59:14Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "What you propose in your text is exactly what we need to clarify. I think based on {{Section 6.2. of QUIC-RECOVERY}} you always need to wait for at least 3 PTO. If we say it that way, I don't think there is a need to add the second part you propose to wait with the sending of RETIRE_CONNECTION_ID frame . That would be another solution but more complex.",
              "createdAt": "2023-02-27T10:59:14Z",
              "updatedAt": "2023-02-27T10:59:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OboCb",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T15:45:34Z",
          "updatedAt": "2023-02-27T15:45:35Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "In any case, the text needs to be fixed. \"The receiver SHOUD (do something), but (something else) but (something else again)...\" -- that's a very confusing syntax.",
              "createdAt": "2023-02-27T15:45:34Z",
              "updatedAt": "2023-02-27T15:46:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Obskl",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T15:54:39Z",
          "updatedAt": "2023-02-27T15:54:40Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Yes, agree. I'll give it a try. But we do agree that's the right thing?",
              "createdAt": "2023-02-27T15:54:39Z",
              "updatedAt": "2023-02-27T15:54:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OgddA",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think the meaning is right, but I think we can clarify it (suggestion provided).",
          "createdAt": "2023-02-28T09:40:55Z",
          "updatedAt": "2023-02-28T09:41:58Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I think we agree on the meaning, but we should indeed improve the presentation. What about replacing the first (very) long sentence by this?\r\n\r\n```\r\nUpon the reception of a PATH_ABANDON, the endpoint SHOULD delay the release\r\nof the associated path resource until either a) the peer has retired the\r\nConnection ID it used on the abandoned path, or b) at least three times the\r\ncurrent Probe Timeout (PTO) interval as defined in {{Section 6.2. of QUIC-RECOVERY}}.\r\n```",
              "createdAt": "2023-02-28T09:40:56Z",
              "updatedAt": "2023-02-28T09:41:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OhFAF",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-28T11:08:54Z",
          "updatedAt": "2023-02-28T11:08:55Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Okay this means we do not agree. I believe you always have to wait at least threes PTOs because of re-ordered packets. I guess if you receive the retired CID frame that means that the peer will not send any new packets but you can only be sure that there is no reordering if you received all packets before the packet with the retired CID frame, however, you don't really know how far back you have to look or there could be gaps introduced by the sender. So checking that is not really practical and always waiting for 3 PTOs is therefore just simpler. Or is there is strong reason why it would be needed to release resources on receipt of the retired CID frame already?\r\n\r\nI note that this discussion is also related to the question if we change the path ID with the CID or not. If we retire the path ID together with the CID, it makes more sense to act on the retired CID frame because in this case even if you receive reordered packets, you would not be able to process them as you don't have a valid path ID.",
              "createdAt": "2023-02-28T11:08:54Z",
              "updatedAt": "2023-02-28T11:08:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Oz9mT",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-03-02T16:57:02Z",
          "updatedAt": "2023-03-02T16:57:19Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I agree that endpoint should always wait at least three PTOs before it releases resources of the corresponding path, but the sentence need to be fixed. Maybe we need 2 states \"Closing Path State\" and \"Draining Path State\": \r\n- After the endpoint sends the PATH_ABANDON frame, it enters into the \"Closing Path State\", and needs to wait for at least three PTOs before releasing the CID resource of the corresponding path. \r\n- The \"Draining Path State\" is entered once an endpoint receives a PATH_ABANDON frame, which indicates that its peer is closing or draining on this path. \"Draining Path State\" last for at least three PTOs, before it ends, the endpoint SHOULD NOT release the corresponding CID resouce, until it receives a RETIRE_CONNECTION_ID frame for that CID.",
              "createdAt": "2023-03-02T16:57:02Z",
              "updatedAt": "2023-03-02T16:57:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O5muO",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T12:31:20Z",
          "updatedAt": "2023-03-03T12:31:20Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "This PR is actually also connects to the question on path  ID.\r\n\r\nFirst of all it is not clear to me what an endpoints need to do if it first receives a retired CID frame and then a (re-order) packet with that CID. In order word is an endpoint supposed to retire/forget the CID immediately when it received the retire CID frame and discard any packets with the old CID or might it also what 1-3 PTOs for re-order packet? I didn't find anything in RFC9000 but maybe somebody else that is better in finding this has a pointer to right part...?\r\n\r\nIf the former, meaning you remove it immediately and ignore old packets, that would also mean that you don't have a valid path ID anymore and can't process any ACKs or other control frame with the old path ID anymore. As such you also don't have to wait for 3 PTOs as you might receive packet/frames but can process them anymore. In this case (assuming that the path ID is connected to the CID), one solution could be to recommend to wait 3PTOs before you send the retired CID frame (or just accepting that this might happens and you have time retransmit some packets unnecessarily if you change the CID).\r\n\r\nIf you have a stable path ID, you can retire immediately and ignore packets with the old CID but still process any control frames that are received in packets with the new CID, and respectively have to wait 3 PTO before you can also remove the path id/close the path entirely.\r\n\r\nOr alternatively, you always have to 3 PTOs after the abandon frame before you remove any state including the last used CID but that also means that the retired CID frames doesn't have any impact. And it also means whenever you received a retired CID frame during an active path use, you also need to wait 3 PTOs before you remove it.\r\n\r\n\r\n",
              "createdAt": "2023-03-03T12:31:20Z",
              "updatedAt": "2023-03-03T12:54:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 174,
      "id": "PR_kwDOGNtpaM5KcGsT",
      "title": "Clarify path usage for PATH_ABANDON frame",
      "url": "https://github.com/quicwg/multipath/pull/174",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-02-21T15:15:46Z",
      "updatedAt": "2023-03-03T15:14:30Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-18",
      "headRefOid": "c260691bfee7c2b289be079e70420e86d4b7cdd2",
      "closedAt": "2023-03-03T15:14:30Z",
      "mergedAt": "2023-03-03T15:14:30Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "6e279069cf117af0b6bee17d0248ba726ed4bbbe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5N8Yw_",
          "commit": {
            "abbreviatedOid": "38d51e6"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T15:35:56Z",
          "updatedAt": "2023-02-21T15:35:57Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nendpoint respectively might consider to retransmit on another path.\r\n```",
              "createdAt": "2023-02-21T15:35:56Z",
              "updatedAt": "2023-02-21T15:35:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OgWAi",
          "commit": {
            "abbreviatedOid": "6b78252"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Minor editorial suggestion.",
          "createdAt": "2023-02-28T09:23:56Z",
          "updatedAt": "2023-02-28T09:24:24Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nthis might be an indication that the sending path is not usable anymore and the\r\nendpoint might consider to retransmit the frame on another path.\r\n```",
              "createdAt": "2023-02-28T09:23:56Z",
              "updatedAt": "2023-02-28T09:24:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O0Del",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-02T17:10:04Z",
          "updatedAt": "2023-03-02T17:10:09Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "How about: \"If the PATH_ABANDON frame is considered lost in the current path, the endpoint might choose to retransmit the frame on another path if it indicates the path is not usable anymore.\"\r\n\r\nThe keypoint is the expiration of the PTO might not be an indication of path blackhole in most cases, but the endpoint could choose to use another path if it indicates the path is unavailable.",
              "createdAt": "2023-03-02T17:10:04Z",
              "updatedAt": "2023-03-02T17:10:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O5SZs",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T11:40:18Z",
          "updatedAt": "2023-03-03T11:40:18Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "The reason why I mention PTO here is because if you, receives ACK that indicate a lost, that means the path is probably still usable. It's only if the PTO expires. However, maybe it better to says this more generically like:\r\n\r\n\"If the PATH_ABANDON frame is considered lost in the current path and another other packet has been received on that path indication that the past is still usable, the endpoint might choose to retransmit the frame on another path.\"\r\n\r\nOr should we even say something stronger than \"might\"?",
              "createdAt": "2023-03-03T11:40:18Z",
              "updatedAt": "2023-03-03T11:40:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O6dbS",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T14:41:13Z",
          "updatedAt": "2023-03-03T14:41:13Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I think retransmitting PATH_ABANDON on another path when PTO happens is reasonable.",
              "createdAt": "2023-03-03T14:41:13Z",
              "updatedAt": "2023-03-03T14:41:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O6gNG",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-03T14:45:52Z",
          "updatedAt": "2023-03-03T14:45:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5O6s_4",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T15:06:52Z",
          "updatedAt": "2023-03-03T15:06:52Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nIf the PATH_ABANDON frame is considered lost in the current path and \r\nanother other packet has been received on that path indication that the \r\npast is still usable, the endpoint might choose to retransmit the frame on another path.\r\n```",
              "createdAt": "2023-03-03T15:06:52Z",
              "updatedAt": "2023-03-03T15:06:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O6w0n",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T15:13:11Z",
          "updatedAt": "2023-03-03T15:13:12Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-03-03T15:13:11Z",
              "updatedAt": "2023-03-03T15:13:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 178,
      "id": "PR_kwDOGNtpaM5KcKZ9",
      "title": "Add ref to definition of non-probing packets",
      "url": "https://github.com/quicwg/multipath/pull/178",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2023-02-21T15:26:51Z",
      "updatedAt": "2023-03-03T11:40:49Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-19",
      "headRefOid": "d316ff44907fc1945eb72e63f0de33cb8fbea6e0",
      "closedAt": "2023-03-03T11:40:49Z",
      "mergedAt": "2023-03-03T11:40:49Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "8dcee71e18c66d1be063ea79709c2920d65f599f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5OgVZ_",
          "commit": {
            "abbreviatedOid": "d316ff4"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-28T09:22:33Z",
          "updatedAt": "2023-02-28T09:22:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5O0Duc",
          "commit": {
            "abbreviatedOid": "d316ff4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-02T17:10:41Z",
          "updatedAt": "2023-03-02T17:10:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 185,
      "id": "PR_kwDOGNtpaM5LPuLi",
      "title": "Remove mentions of the \"Path Identifier\"",
      "url": "https://github.com/quicwg/multipath/pull/185",
      "state": "OPEN",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In lot of places in the draft, we mention the \"Path Identifier\", which we define as the Destination Connection ID sequence number used over that path. It seems that maintaining the notion of \"Path Identifier\" causes a lot of confusion, so better keep things simple and mention CID sequence numbers directly.\r\n\r\nNote that this implies that the related fields in\r\nmultipath-specific have been renamed to their \"explicit\" form. Some of these names are maybe a bit long, so we may shorten them if this does not introduce ambiguity.\r\n\r\nFix #169. Rewriting related section should also fix #181.",
      "createdAt": "2023-03-03T17:25:53Z",
      "updatedAt": "2023-03-06T19:27:23Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "6e279069cf117af0b6bee17d0248ba726ed4bbbe",
      "headRepository": "quicwg/multipath",
      "headRefName": "remove-path-id",
      "headRefOid": "bb9bb5e49110a8fdba6cb1ff5ffedd55e33b4bae",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5PESf5",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:10:34Z",
          "updatedAt": "2023-03-06T15:10:35Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\nA new path can only be used once it has been validated. The Destination\r\nConnection ID is used to associate a packet to a valid path. Further, the\r\nsequence number of Destination Connection ID is used as numerical identifier\r\nin control frames. E.g. an endpoint sends a PATH_ABANDON frame to request its peer to\r\nabandon the path on which the sender uses the Destination Connection ID\r\nwith the sequence number contained in the PATH_ABANDON frame.\r\n```",
              "createdAt": "2023-03-06T15:10:35Z",
              "updatedAt": "2023-03-06T15:10:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PESwQ",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:10:59Z",
          "updatedAt": "2023-03-06T15:10:59Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Maybe we can also move the text about the status frame here.",
              "createdAt": "2023-03-06T15:10:59Z",
              "updatedAt": "2023-03-06T15:10:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEUK6",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:13:38Z",
          "updatedAt": "2023-03-06T15:13:39Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "I don't think we need this additional text.\r\n\r\nYou don't need the sequence number to identify the packet space; you can also just use the CID directly. You only need the sequence number really in control frames.\r\n\r\nAlso what consideration in RFC9000 do you want to point to?",
              "createdAt": "2023-03-06T15:13:38Z",
              "updatedAt": "2023-03-06T15:13:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEU9p",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:15:19Z",
          "updatedAt": "2023-03-06T15:15:20Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "```suggestion\r\npackets over the path. The endpoint relies on its sequence number to\r\nsend path control information and specifically acknowledge packets belonging to that Connection ID-specific\r\npacket number space.\r\n```",
              "createdAt": "2023-03-06T15:15:19Z",
              "updatedAt": "2023-03-06T16:04:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEVmu",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:16:41Z",
          "updatedAt": "2023-03-06T15:16:41Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "```suggestion\r\nto distinguish the Connection ID-specific packet number space.\r\n```",
              "createdAt": "2023-03-06T15:16:41Z",
              "updatedAt": "2023-03-06T15:16:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEXmK",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:20:46Z",
          "updatedAt": "2023-03-06T15:20:47Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "```suggestion\r\nConnection ID Sequence Number field. If multipath has been successfully\r\nnegotiated, ACK frames in 1-RTT packets MUST be interpreted as acknowledging\r\npackets on the path they the packet with the ACK frames been received.\r\n```",
              "createdAt": "2023-03-06T15:20:47Z",
              "updatedAt": "2023-03-06T15:20:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEYbB",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:22:24Z",
          "updatedAt": "2023-03-06T15:22:25Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "```suggestion\r\ndata packets, including 0-RTT packets, using the initial Connection ID with\r\n```",
              "createdAt": "2023-03-06T15:22:25Z",
              "updatedAt": "2023-03-06T15:22:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEY_J",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:23:33Z",
          "updatedAt": "2023-03-06T15:23:34Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "```suggestion\r\nACK_MP frame (defined in {{ack-mp-frame}}) SHOULD be sent on same the path\r\nas the data was sent that it acknowledged.\r\n```",
              "createdAt": "2023-03-06T15:23:33Z",
              "updatedAt": "2023-03-06T15:23:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEZwg",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:25:08Z",
          "updatedAt": "2023-03-06T15:25:08Z",
          "comments": [
            {
              "originalPosition": 233,
              "body": "```suggestion\r\n  corresponds to.\r\n```",
              "createdAt": "2023-03-06T15:25:08Z",
              "updatedAt": "2023-03-06T15:25:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEaKp",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:25:56Z",
          "updatedAt": "2023-03-06T15:25:56Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "+1 Mirja",
              "createdAt": "2023-03-06T15:25:56Z",
              "updatedAt": "2023-03-06T15:25:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEao5",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "A few nits, but this PR does improve the draft!",
          "createdAt": "2023-03-06T15:26:55Z",
          "updatedAt": "2023-03-06T15:51:30Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "Typo in suggested change: oath -> path",
              "createdAt": "2023-03-06T15:26:55Z",
              "updatedAt": "2023-03-06T15:51:30Z"
            },
            {
              "originalPosition": 128,
              "body": "No, please do not apply this change. This PR is editorial in nature, and should not change the consensus so far, i.e., the old ACK frame acknowledges CID number 0. Quentin's original text is fine.",
              "createdAt": "2023-03-06T15:29:50Z",
              "updatedAt": "2023-03-06T15:51:30Z"
            },
            {
              "originalPosition": 286,
              "body": "I think we have an issue of consistency. In the Abandon and Path Status frames, the DCID field is called \"Sender's DCID\". Here, it is called \"Receiver's DCID\". Yet, they refer to exactly the same value. My suggestion:\r\n\r\n* Remove \"Sender's\" from the DCID descriptions in PATH_ABANDON and PATH_STATUS\r\n* Remove \"Receiver's\" from the DCID descriptions in ACK_MP\r\n* Otherwise, keep the text as is, because the text is correct.",
              "createdAt": "2023-03-06T15:42:10Z",
              "updatedAt": "2023-03-06T15:51:30Z"
            },
            {
              "originalPosition": 299,
              "body": "The reference to \"closed paths\" is a bit ambiguous, because it is in fact OK to send an ACK_MP after and ABANDON_PATH -- or even in the same packet, but QUIC does not specify the order of processing of frames in a packet. And it is also OK to process it, rather than spuriously repeat data that has been actually received. I would be tempted to just strike out \"or belonging to closed paths\". Or maybe strike out the whole parenthesis. Or maybe strike out the whole paragraph about not active anymore. For comparison, Section 19.16 of RFC 9000 just says:\r\n\r\nReceipt of a RETIRE_CONNECTION_ID frame containing a sequence number greater than any previously sent to the peer MUST be treated as a connection error of type PROTOCOL_VIOLATION.",
              "createdAt": "2023-03-06T15:50:56Z",
              "updatedAt": "2023-03-06T15:51:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEtQN",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:04:08Z",
          "updatedAt": "2023-03-06T16:04:08Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "fixed",
              "createdAt": "2023-03-06T16:04:08Z",
              "updatedAt": "2023-03-06T16:04:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEt_F",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:05:42Z",
          "updatedAt": "2023-03-06T16:05:42Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "Indeed, let's remove that added text.",
              "createdAt": "2023-03-06T16:05:42Z",
              "updatedAt": "2023-03-06T16:05:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEuu7",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:07:19Z",
          "updatedAt": "2023-03-06T16:07:20Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "Yes, this changes goes maybe a bit far for this PR but Quentin's text is not right because he removed the \"If for any reason  ACK frames are received in 1-RTT packets while the state of multipath negotiation is ambiguous\" part. In this ambiguous state all acks are mapped to the seq number 0. However, this is not true later. My proposal is not to change the consensus but rather say the more general thing.",
              "createdAt": "2023-03-06T16:07:19Z",
              "updatedAt": "2023-03-06T16:07:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEvZ7",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:08:48Z",
          "updatedAt": "2023-03-06T16:08:49Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "No they do not refer to the same value. The Sender's CID is the one used when you sent a packet. The Receivers's CID is the one used by the other end to send - hence when you receive packets.",
              "createdAt": "2023-03-06T16:08:48Z",
              "updatedAt": "2023-03-06T16:08:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEvgW",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:08:59Z",
          "updatedAt": "2023-03-06T16:09:00Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "Yes, let's avoid introducing design changes here. Also, I think relying on the reception 4-tuple may lead to ambiguous state at the receiver.",
              "createdAt": "2023-03-06T16:09:00Z",
              "updatedAt": "2023-03-06T16:09:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEwix",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:11:18Z",
          "updatedAt": "2023-03-06T16:11:19Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "While I understand the suggestion, I'm not sure this makes the text clearer, though I don't have strong opposition here.",
              "createdAt": "2023-03-06T16:11:19Z",
              "updatedAt": "2023-03-06T16:11:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEx6Y",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:14:17Z",
          "updatedAt": "2023-03-06T16:14:18Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "Actually the PATH_ABANDON and PATH_STATUS frame includes the sequence number of the DCID of the sender of the frame, while in ACK_MP the sequence number corresponds to the DCID used by its peer, hence the (verbose) name convention. But if this introduces confusion, I can remove \"Sender's\" and \"Receiver's\" mentions.",
              "createdAt": "2023-03-06T16:14:18Z",
              "updatedAt": "2023-03-06T16:14:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PE4C6",
          "commit": {
            "abbreviatedOid": "bb9bb5e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:27:12Z",
          "updatedAt": "2023-03-06T16:27:13Z",
          "comments": [
            {
              "originalPosition": 299,
              "body": "I think your point about the whole parenthesis is right. Also, this issue about seeing retired DCID also applies in PATH_ABANDON and PATH_STATUS (i.e., just ignore the frame), so we may just want to add a sentence at the beginning of the presentation of the multi path-specific frames?",
              "createdAt": "2023-03-06T16:27:13Z",
              "updatedAt": "2023-03-06T16:27:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PFBIC",
          "commit": {
            "abbreviatedOid": "bb9bb5e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:39:48Z",
          "updatedAt": "2023-03-06T16:39:48Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "For the ambiguous part, I'm not sure to understand when the negotiation of multi path could be ambiguous. But so far the less ambiguous approach (as I understood so far) is that ACK frames (always) relate to CID number 0.",
              "createdAt": "2023-03-06T16:39:48Z",
              "updatedAt": "2023-03-06T16:39:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PFO2a",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T17:02:08Z",
          "updatedAt": "2023-03-06T17:02:08Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "I was assuming an ACK frame always corresponds to the path it was sent on. However, it seem this is simply not defined in the draft and we probably need to open an issue to clarify this.",
              "createdAt": "2023-03-06T17:02:08Z",
              "updatedAt": "2023-03-06T17:02:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGBlL",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T18:32:24Z",
          "updatedAt": "2023-03-06T18:32:24Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "Actually we did a mistake here when I remove the type field. The path abandon frame should also have the receivers cid as you tell the other end to not use this for sending data anymore. Same I probably true for the path status frame.",
              "createdAt": "2023-03-06T18:32:24Z",
              "updatedAt": "2023-03-06T18:32:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGNJE",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T19:04:49Z",
          "updatedAt": "2023-03-06T19:04:50Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "No, we specifically do not want implementations to continue sending ACK frames after negotiating multipath. The notion of \"current path\" is ambiguous -- for example, it does change in case of NAT rebinding. Adding the CID-sequence-number in the ACK_MP guarantee that there is no such ambiguity. As for nake ACK, the equivalence to \"cid-number=0\" is straightforward. ",
              "createdAt": "2023-03-06T19:04:49Z",
              "updatedAt": "2023-03-06T19:04:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGSWv",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T19:20:32Z",
          "updatedAt": "2023-03-06T19:20:32Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "I am OK with a soft guidance to send ACK_MP on the \"same path\", but I am opposed to any mandate to always do that. In particular, there is well established practice of combining a high bandwidth long delay path through Geo satellite and a short delay low bandwidth terrestrial path, sending data on the wide path and sending ACK on the short path. Having a shorter control loop does improve performance, for example allowing the congestion window to ramp up twice faster during slow start. Similarly, sending ACK_MP on a reliable path results in better control than sending them on a lossy path results in more reliable control.\r\n\r\nI understand that the \"same path\" practice makes RTT computation easier, but that's only one aspect of the issue, IMHO not the most dominant aspect. In QUIC, most packet losses are detected by noticing that packets sent later on the path are already acknowledged, not by waiting on timers. Sending ACK_MP on a short path will enable faster detection of packet losses by acked number holes, while sending only on the \"return\" path only improve the computation of RTT, which may or may not improve timer-based recovery. (If ACK_MP are *always* sent on the shortest path, then measuring average and deviation of  ACK delays actually provide good input for loss detection timeout.)\r\n\r\nI think we do have an issue with getting good RTT estimates while not using time stamps. This could be fixed by requiring to also replicate some of the ACK_MP on the \"return\" path when possible, and by having implementation keep track of the progress of same path ACK.\r\n\r\nBut trying to mandate same path ACK just won't help, because implementation seeking better congestion control and better loss detection will just ignore the requirement. ",
              "createdAt": "2023-03-06T19:20:32Z",
              "updatedAt": "2023-03-06T19:22:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGUmK",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T19:27:22Z",
          "updatedAt": "2023-03-06T19:27:23Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "I think aligning ACK, ABANDON and STATUS makes sense. ABANDON is in many respects just the symmetric of the ACK. For example, a node receives data on a cellular path that charges per byte when a \"free\" path is available. The node will send the ABANDON immediately, telling its peer to \"stop doing that.\" Using the DCID \"used by the peer to send 1-RTT packets\" makes a lot of sense.",
              "createdAt": "2023-03-06T19:27:22Z",
              "updatedAt": "2023-03-06T19:27:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 187,
      "id": "PR_kwDOGNtpaM5LVML7",
      "title": "Explain number spaces",
      "url": "https://github.com/quicwg/multipath/pull/187",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This explanation of how to implement number spaces addresses issue #184.",
      "createdAt": "2023-03-06T05:38:04Z",
      "updatedAt": "2023-03-06T15:16:27Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "6e279069cf117af0b6bee17d0248ba726ed4bbbe",
      "headRepository": "huitema/multipath",
      "headRefName": "explain-numbers",
      "headRefOid": "f0a3dd83b2b146e2155d426eeb2aee1cd6250f54",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that I still have some diffs when running `make fix-lint`.",
          "createdAt": "2023-03-06T09:14:25Z",
          "updatedAt": "2023-03-06T09:14:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5PBXa7",
          "commit": {
            "abbreviatedOid": "e329f72"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The added text greatly clarifies the relation between CIDs and paths IMHO. Some suggestions to make naming coherence across the document + typos.",
          "createdAt": "2023-03-06T08:57:45Z",
          "updatedAt": "2023-03-06T09:11:43Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nDestination Connection ID is linked to a separate packet number space.\r\n```",
              "createdAt": "2023-03-06T08:57:45Z",
              "updatedAt": "2023-03-06T09:11:43Z"
            },
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nRFC 9000, which only have to manage three number spaces for Initial,\r\n```",
              "createdAt": "2023-03-06T08:58:16Z",
              "updatedAt": "2023-03-06T09:11:43Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nmodel the relations between paths and number spaces, as shown\r\nin {{fig-number-spaces}}.\r\n```",
              "createdAt": "2023-03-06T09:00:13Z",
              "updatedAt": "2023-03-06T09:11:43Z"
            },
            {
              "originalPosition": 47,
              "body": "Just for name coherence across the remaining of the document.\r\n\r\n```suggestion\r\nThe path is defined by the 4-tuple through which packets are\r\n```",
              "createdAt": "2023-03-06T09:02:54Z",
              "updatedAt": "2023-03-06T09:11:43Z"
            },
            {
              "originalPosition": 56,
              "body": "Given that there are sending and receiving CIDs, maybe clarify a bit?\r\n\r\n```suggestion\r\nThe relation between CIDs and paths is not fixed. A node may\r\ndecide to rotate the Destination CID it uses, a NAT may decide\r\nto change the 4-tuple over which packets from that path will be\r\nreceived.\r\n```",
              "createdAt": "2023-03-06T09:06:28Z",
              "updatedAt": "2023-03-06T09:11:44Z"
            },
            {
              "originalPosition": 64,
              "body": "```suggestion\r\n  with the 4-tuple. They will remain unchanged if data starts\r\n```",
              "createdAt": "2023-03-06T09:07:14Z",
              "updatedAt": "2023-03-06T09:11:44Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n  being received or sent through the same 4-tuple using new CIDs.\r\n```",
              "createdAt": "2023-03-06T09:07:24Z",
              "updatedAt": "2023-03-06T09:11:44Z"
            },
            {
              "originalPosition": 81,
              "body": "```suggestion\r\nreceiver number space could still be used to send ACK_MP frames\r\n```",
              "createdAt": "2023-03-06T09:09:32Z",
              "updatedAt": "2023-03-06T09:11:44Z"
            },
            {
              "originalPosition": 84,
              "body": "```suggestion\r\nwhen processing incoming ACK_MP frames for that number space. Such\r\n```",
              "createdAt": "2023-03-06T09:09:50Z",
              "updatedAt": "2023-03-06T09:11:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PENYM",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:02:31Z",
          "updatedAt": "2023-03-06T15:02:32Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n   | Receiver Number Space   |\r\n```",
              "createdAt": "2023-03-06T15:02:31Z",
              "updatedAt": "2023-03-06T15:02:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PENda",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:02:41Z",
          "updatedAt": "2023-03-06T15:02:42Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n   | CID received from peer: |\r\n```",
              "createdAt": "2023-03-06T15:02:41Z",
              "updatedAt": "2023-03-06T15:02:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PENnk",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:03:01Z",
          "updatedAt": "2023-03-06T15:03:02Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n   | Space                   |\r\n```",
              "createdAt": "2023-03-06T15:03:02Z",
              "updatedAt": "2023-03-06T15:03:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEN4D",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:03:26Z",
          "updatedAt": "2023-03-06T15:03:27Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n~~~\r\n```",
              "createdAt": "2023-03-06T15:03:26Z",
              "updatedAt": "2023-03-06T15:03:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEN_E",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:03:36Z",
          "updatedAt": "2023-03-06T15:03:37Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\n   | CID previously used by  |\r\n```",
              "createdAt": "2023-03-06T15:03:37Z",
              "updatedAt": "2023-03-06T15:03:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEOhO",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:04:26Z",
          "updatedAt": "2023-03-06T15:04:27Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2023-03-06T15:04:26Z",
              "updatedAt": "2023-03-06T15:04:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEOnu",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:04:36Z",
          "updatedAt": "2023-03-06T15:04:37Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2023-03-06T15:04:36Z",
              "updatedAt": "2023-03-06T15:04:37Z"
            }
          ]
        }
      ]
    }
  ]
}